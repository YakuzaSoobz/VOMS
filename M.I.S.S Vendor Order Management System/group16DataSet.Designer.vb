'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("group16DataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class group16DataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCustomer As CustomerDataTable
    
    Private tableCustomer_Quote As Customer_QuoteDataTable
    
    Private tableCustomer_Quote_Line_Item As Customer_Quote_Line_ItemDataTable
    
    Private tableEmployee As EmployeeDataTable
    
    Private tableProduct As ProductDataTable
    
    Private tableSupplier As SupplierDataTable
    
    Private tableSupplier_Quote As Supplier_QuoteDataTable
    
    Private tableSupplier_Quote_Line_Item As Supplier_Quote_Line_ItemDataTable
    
    Private tableSuppLineItemJoinProduct As SuppLineItemJoinProductDataTable
    
    Private tableSupplierQuoteJoinSupplier As SupplierQuoteJoinSupplierDataTable
    
    Private tableCustomerQuoteJoinCustomer As CustomerQuoteJoinCustomerDataTable
    
    Private tableCustLineItemJoinProducts As CustLineItemJoinProductsDataTable
    
    Private tableSuppQuoteJoinSuppLineItem As SuppQuoteJoinSuppLineItemDataTable
    
    Private relationFK_Customer_Quote_Customer As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Employee As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Line_Item_Customer_Quote As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Line_Item_Product As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Line_Item_Supplier As Global.System.Data.DataRelation
    
    Private relationFK_Supplier_Quote_Supplier As Global.System.Data.DataRelation
    
    Private relationFK_Supplier_Quote_Line_Item_Product As Global.System.Data.DataRelation
    
    Private relationFK_Supplier_Quote_Line_Item_Supplier_Quote As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Line_Item_Product1 As Global.System.Data.DataRelation
    
    Private relationFK_Supplier_Quote_Line_Item_Product1 As Global.System.Data.DataRelation
    
    Private relationFK_Supplier_Quote_Supplier1 As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Line_Item_Supplier1 As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Customer1 As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Line_Item_Customer_Quote1 As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Line_Item_Product2 As Global.System.Data.DataRelation
    
    Private relationFK_Customer_Quote_Line_Item_Supplier2 As Global.System.Data.DataRelation
    
    Private relationFK_Supplier_Quote_Line_Item_Supplier_Quote1 As Global.System.Data.DataRelation
    
    Private relationFK_Supplier_Quote_Supplier2 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Customer")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerDataTable(ds.Tables("Customer")))
            End If
            If (Not (ds.Tables("Customer_Quote")) Is Nothing) Then
                MyBase.Tables.Add(New Customer_QuoteDataTable(ds.Tables("Customer_Quote")))
            End If
            If (Not (ds.Tables("Customer_Quote_Line_Item")) Is Nothing) Then
                MyBase.Tables.Add(New Customer_Quote_Line_ItemDataTable(ds.Tables("Customer_Quote_Line_Item")))
            End If
            If (Not (ds.Tables("Employee")) Is Nothing) Then
                MyBase.Tables.Add(New EmployeeDataTable(ds.Tables("Employee")))
            End If
            If (Not (ds.Tables("Product")) Is Nothing) Then
                MyBase.Tables.Add(New ProductDataTable(ds.Tables("Product")))
            End If
            If (Not (ds.Tables("Supplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierDataTable(ds.Tables("Supplier")))
            End If
            If (Not (ds.Tables("Supplier_Quote")) Is Nothing) Then
                MyBase.Tables.Add(New Supplier_QuoteDataTable(ds.Tables("Supplier_Quote")))
            End If
            If (Not (ds.Tables("Supplier_Quote_Line_Item")) Is Nothing) Then
                MyBase.Tables.Add(New Supplier_Quote_Line_ItemDataTable(ds.Tables("Supplier_Quote_Line_Item")))
            End If
            If (Not (ds.Tables("SuppLineItemJoinProduct")) Is Nothing) Then
                MyBase.Tables.Add(New SuppLineItemJoinProductDataTable(ds.Tables("SuppLineItemJoinProduct")))
            End If
            If (Not (ds.Tables("SupplierQuoteJoinSupplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierQuoteJoinSupplierDataTable(ds.Tables("SupplierQuoteJoinSupplier")))
            End If
            If (Not (ds.Tables("CustomerQuoteJoinCustomer")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerQuoteJoinCustomerDataTable(ds.Tables("CustomerQuoteJoinCustomer")))
            End If
            If (Not (ds.Tables("CustLineItemJoinProducts")) Is Nothing) Then
                MyBase.Tables.Add(New CustLineItemJoinProductsDataTable(ds.Tables("CustLineItemJoinProducts")))
            End If
            If (Not (ds.Tables("SuppQuoteJoinSuppLineItem")) Is Nothing) Then
                MyBase.Tables.Add(New SuppQuoteJoinSuppLineItemDataTable(ds.Tables("SuppQuoteJoinSuppLineItem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customer() As CustomerDataTable
        Get
            Return Me.tableCustomer
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customer_Quote() As Customer_QuoteDataTable
        Get
            Return Me.tableCustomer_Quote
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customer_Quote_Line_Item() As Customer_Quote_Line_ItemDataTable
        Get
            Return Me.tableCustomer_Quote_Line_Item
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Employee() As EmployeeDataTable
        Get
            Return Me.tableEmployee
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Product() As ProductDataTable
        Get
            Return Me.tableProduct
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Supplier() As SupplierDataTable
        Get
            Return Me.tableSupplier
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Supplier_Quote() As Supplier_QuoteDataTable
        Get
            Return Me.tableSupplier_Quote
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Supplier_Quote_Line_Item() As Supplier_Quote_Line_ItemDataTable
        Get
            Return Me.tableSupplier_Quote_Line_Item
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SuppLineItemJoinProduct() As SuppLineItemJoinProductDataTable
        Get
            Return Me.tableSuppLineItemJoinProduct
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SupplierQuoteJoinSupplier() As SupplierQuoteJoinSupplierDataTable
        Get
            Return Me.tableSupplierQuoteJoinSupplier
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomerQuoteJoinCustomer() As CustomerQuoteJoinCustomerDataTable
        Get
            Return Me.tableCustomerQuoteJoinCustomer
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustLineItemJoinProducts() As CustLineItemJoinProductsDataTable
        Get
            Return Me.tableCustLineItemJoinProducts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SuppQuoteJoinSuppLineItem() As SuppQuoteJoinSuppLineItemDataTable
        Get
            Return Me.tableSuppQuoteJoinSuppLineItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As group16DataSet = CType(MyBase.Clone,group16DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Customer")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerDataTable(ds.Tables("Customer")))
            End If
            If (Not (ds.Tables("Customer_Quote")) Is Nothing) Then
                MyBase.Tables.Add(New Customer_QuoteDataTable(ds.Tables("Customer_Quote")))
            End If
            If (Not (ds.Tables("Customer_Quote_Line_Item")) Is Nothing) Then
                MyBase.Tables.Add(New Customer_Quote_Line_ItemDataTable(ds.Tables("Customer_Quote_Line_Item")))
            End If
            If (Not (ds.Tables("Employee")) Is Nothing) Then
                MyBase.Tables.Add(New EmployeeDataTable(ds.Tables("Employee")))
            End If
            If (Not (ds.Tables("Product")) Is Nothing) Then
                MyBase.Tables.Add(New ProductDataTable(ds.Tables("Product")))
            End If
            If (Not (ds.Tables("Supplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierDataTable(ds.Tables("Supplier")))
            End If
            If (Not (ds.Tables("Supplier_Quote")) Is Nothing) Then
                MyBase.Tables.Add(New Supplier_QuoteDataTable(ds.Tables("Supplier_Quote")))
            End If
            If (Not (ds.Tables("Supplier_Quote_Line_Item")) Is Nothing) Then
                MyBase.Tables.Add(New Supplier_Quote_Line_ItemDataTable(ds.Tables("Supplier_Quote_Line_Item")))
            End If
            If (Not (ds.Tables("SuppLineItemJoinProduct")) Is Nothing) Then
                MyBase.Tables.Add(New SuppLineItemJoinProductDataTable(ds.Tables("SuppLineItemJoinProduct")))
            End If
            If (Not (ds.Tables("SupplierQuoteJoinSupplier")) Is Nothing) Then
                MyBase.Tables.Add(New SupplierQuoteJoinSupplierDataTable(ds.Tables("SupplierQuoteJoinSupplier")))
            End If
            If (Not (ds.Tables("CustomerQuoteJoinCustomer")) Is Nothing) Then
                MyBase.Tables.Add(New CustomerQuoteJoinCustomerDataTable(ds.Tables("CustomerQuoteJoinCustomer")))
            End If
            If (Not (ds.Tables("CustLineItemJoinProducts")) Is Nothing) Then
                MyBase.Tables.Add(New CustLineItemJoinProductsDataTable(ds.Tables("CustLineItemJoinProducts")))
            End If
            If (Not (ds.Tables("SuppQuoteJoinSuppLineItem")) Is Nothing) Then
                MyBase.Tables.Add(New SuppQuoteJoinSuppLineItemDataTable(ds.Tables("SuppQuoteJoinSuppLineItem")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCustomer = CType(MyBase.Tables("Customer"),CustomerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomer) Is Nothing) Then
                Me.tableCustomer.InitVars
            End If
        End If
        Me.tableCustomer_Quote = CType(MyBase.Tables("Customer_Quote"),Customer_QuoteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomer_Quote) Is Nothing) Then
                Me.tableCustomer_Quote.InitVars
            End If
        End If
        Me.tableCustomer_Quote_Line_Item = CType(MyBase.Tables("Customer_Quote_Line_Item"),Customer_Quote_Line_ItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomer_Quote_Line_Item) Is Nothing) Then
                Me.tableCustomer_Quote_Line_Item.InitVars
            End If
        End If
        Me.tableEmployee = CType(MyBase.Tables("Employee"),EmployeeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEmployee) Is Nothing) Then
                Me.tableEmployee.InitVars
            End If
        End If
        Me.tableProduct = CType(MyBase.Tables("Product"),ProductDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProduct) Is Nothing) Then
                Me.tableProduct.InitVars
            End If
        End If
        Me.tableSupplier = CType(MyBase.Tables("Supplier"),SupplierDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSupplier) Is Nothing) Then
                Me.tableSupplier.InitVars
            End If
        End If
        Me.tableSupplier_Quote = CType(MyBase.Tables("Supplier_Quote"),Supplier_QuoteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSupplier_Quote) Is Nothing) Then
                Me.tableSupplier_Quote.InitVars
            End If
        End If
        Me.tableSupplier_Quote_Line_Item = CType(MyBase.Tables("Supplier_Quote_Line_Item"),Supplier_Quote_Line_ItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSupplier_Quote_Line_Item) Is Nothing) Then
                Me.tableSupplier_Quote_Line_Item.InitVars
            End If
        End If
        Me.tableSuppLineItemJoinProduct = CType(MyBase.Tables("SuppLineItemJoinProduct"),SuppLineItemJoinProductDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSuppLineItemJoinProduct) Is Nothing) Then
                Me.tableSuppLineItemJoinProduct.InitVars
            End If
        End If
        Me.tableSupplierQuoteJoinSupplier = CType(MyBase.Tables("SupplierQuoteJoinSupplier"),SupplierQuoteJoinSupplierDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSupplierQuoteJoinSupplier) Is Nothing) Then
                Me.tableSupplierQuoteJoinSupplier.InitVars
            End If
        End If
        Me.tableCustomerQuoteJoinCustomer = CType(MyBase.Tables("CustomerQuoteJoinCustomer"),CustomerQuoteJoinCustomerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomerQuoteJoinCustomer) Is Nothing) Then
                Me.tableCustomerQuoteJoinCustomer.InitVars
            End If
        End If
        Me.tableCustLineItemJoinProducts = CType(MyBase.Tables("CustLineItemJoinProducts"),CustLineItemJoinProductsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustLineItemJoinProducts) Is Nothing) Then
                Me.tableCustLineItemJoinProducts.InitVars
            End If
        End If
        Me.tableSuppQuoteJoinSuppLineItem = CType(MyBase.Tables("SuppQuoteJoinSuppLineItem"),SuppQuoteJoinSuppLineItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSuppQuoteJoinSuppLineItem) Is Nothing) Then
                Me.tableSuppQuoteJoinSuppLineItem.InitVars
            End If
        End If
        Me.relationFK_Customer_Quote_Customer = Me.Relations("FK_Customer_Quote_Customer")
        Me.relationFK_Customer_Quote_Employee = Me.Relations("FK_Customer_Quote_Employee")
        Me.relationFK_Customer_Quote_Line_Item_Customer_Quote = Me.Relations("FK_Customer_Quote_Line_Item_Customer_Quote")
        Me.relationFK_Customer_Quote_Line_Item_Product = Me.Relations("FK_Customer_Quote_Line_Item_Product")
        Me.relationFK_Customer_Quote_Line_Item_Supplier = Me.Relations("FK_Customer_Quote_Line_Item_Supplier")
        Me.relationFK_Supplier_Quote_Supplier = Me.Relations("FK_Supplier_Quote_Supplier")
        Me.relationFK_Supplier_Quote_Line_Item_Product = Me.Relations("FK_Supplier_Quote_Line_Item_Product")
        Me.relationFK_Supplier_Quote_Line_Item_Supplier_Quote = Me.Relations("FK_Supplier_Quote_Line_Item_Supplier_Quote")
        Me.relationFK_Customer_Quote_Line_Item_Product1 = Me.Relations("FK_Customer_Quote_Line_Item_Product1")
        Me.relationFK_Supplier_Quote_Line_Item_Product1 = Me.Relations("FK_Supplier_Quote_Line_Item_Product1")
        Me.relationFK_Supplier_Quote_Supplier1 = Me.Relations("FK_Supplier_Quote_Supplier1")
        Me.relationFK_Customer_Quote_Line_Item_Supplier1 = Me.Relations("FK_Customer_Quote_Line_Item_Supplier1")
        Me.relationFK_Customer_Quote_Customer1 = Me.Relations("FK_Customer_Quote_Customer1")
        Me.relationFK_Customer_Quote_Line_Item_Customer_Quote1 = Me.Relations("FK_Customer_Quote_Line_Item_Customer_Quote1")
        Me.relationFK_Customer_Quote_Line_Item_Product2 = Me.Relations("FK_Customer_Quote_Line_Item_Product2")
        Me.relationFK_Customer_Quote_Line_Item_Supplier2 = Me.Relations("FK_Customer_Quote_Line_Item_Supplier2")
        Me.relationFK_Supplier_Quote_Line_Item_Supplier_Quote1 = Me.Relations("FK_Supplier_Quote_Line_Item_Supplier_Quote1")
        Me.relationFK_Supplier_Quote_Supplier2 = Me.Relations("FK_Supplier_Quote_Supplier2")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "group16DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/group16DataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCustomer = New CustomerDataTable()
        MyBase.Tables.Add(Me.tableCustomer)
        Me.tableCustomer_Quote = New Customer_QuoteDataTable()
        MyBase.Tables.Add(Me.tableCustomer_Quote)
        Me.tableCustomer_Quote_Line_Item = New Customer_Quote_Line_ItemDataTable()
        MyBase.Tables.Add(Me.tableCustomer_Quote_Line_Item)
        Me.tableEmployee = New EmployeeDataTable()
        MyBase.Tables.Add(Me.tableEmployee)
        Me.tableProduct = New ProductDataTable()
        MyBase.Tables.Add(Me.tableProduct)
        Me.tableSupplier = New SupplierDataTable()
        MyBase.Tables.Add(Me.tableSupplier)
        Me.tableSupplier_Quote = New Supplier_QuoteDataTable()
        MyBase.Tables.Add(Me.tableSupplier_Quote)
        Me.tableSupplier_Quote_Line_Item = New Supplier_Quote_Line_ItemDataTable()
        MyBase.Tables.Add(Me.tableSupplier_Quote_Line_Item)
        Me.tableSuppLineItemJoinProduct = New SuppLineItemJoinProductDataTable()
        MyBase.Tables.Add(Me.tableSuppLineItemJoinProduct)
        Me.tableSupplierQuoteJoinSupplier = New SupplierQuoteJoinSupplierDataTable()
        MyBase.Tables.Add(Me.tableSupplierQuoteJoinSupplier)
        Me.tableCustomerQuoteJoinCustomer = New CustomerQuoteJoinCustomerDataTable()
        MyBase.Tables.Add(Me.tableCustomerQuoteJoinCustomer)
        Me.tableCustLineItemJoinProducts = New CustLineItemJoinProductsDataTable()
        MyBase.Tables.Add(Me.tableCustLineItemJoinProducts)
        Me.tableSuppQuoteJoinSuppLineItem = New SuppQuoteJoinSuppLineItemDataTable()
        MyBase.Tables.Add(Me.tableSuppQuoteJoinSuppLineItem)
        Me.relationFK_Customer_Quote_Customer = New Global.System.Data.DataRelation("FK_Customer_Quote_Customer", New Global.System.Data.DataColumn() {Me.tableCustomer.Customer_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustomer_Quote.Customer_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Customer)
        Me.relationFK_Customer_Quote_Employee = New Global.System.Data.DataRelation("FK_Customer_Quote_Employee", New Global.System.Data.DataColumn() {Me.tableEmployee.Employee_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustomer_Quote.Employee_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Employee)
        Me.relationFK_Customer_Quote_Line_Item_Customer_Quote = New Global.System.Data.DataRelation("FK_Customer_Quote_Line_Item_Customer_Quote", New Global.System.Data.DataColumn() {Me.tableCustomer_Quote.Cust_Quote_Reference_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustomer_Quote_Line_Item.Cust_Quote_Reference_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Line_Item_Customer_Quote)
        Me.relationFK_Customer_Quote_Line_Item_Product = New Global.System.Data.DataRelation("FK_Customer_Quote_Line_Item_Product", New Global.System.Data.DataColumn() {Me.tableProduct.Product_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustomer_Quote_Line_Item.Product_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Line_Item_Product)
        Me.relationFK_Customer_Quote_Line_Item_Supplier = New Global.System.Data.DataRelation("FK_Customer_Quote_Line_Item_Supplier", New Global.System.Data.DataColumn() {Me.tableSupplier.Supplier_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustomer_Quote_Line_Item.Supplier_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Line_Item_Supplier)
        Me.relationFK_Supplier_Quote_Supplier = New Global.System.Data.DataRelation("FK_Supplier_Quote_Supplier", New Global.System.Data.DataColumn() {Me.tableSupplier.Supplier_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSupplier_Quote.Supplier_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Supplier_Quote_Supplier)
        Me.relationFK_Supplier_Quote_Line_Item_Product = New Global.System.Data.DataRelation("FK_Supplier_Quote_Line_Item_Product", New Global.System.Data.DataColumn() {Me.tableProduct.Product_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSupplier_Quote_Line_Item.Product_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Supplier_Quote_Line_Item_Product)
        Me.relationFK_Supplier_Quote_Line_Item_Supplier_Quote = New Global.System.Data.DataRelation("FK_Supplier_Quote_Line_Item_Supplier_Quote", New Global.System.Data.DataColumn() {Me.tableSupplier_Quote.Supp_Quote_Reference_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSupplier_Quote_Line_Item.Supp_Quote_Reference_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Supplier_Quote_Line_Item_Supplier_Quote)
        Me.relationFK_Customer_Quote_Line_Item_Product1 = New Global.System.Data.DataRelation("FK_Customer_Quote_Line_Item_Product1", New Global.System.Data.DataColumn() {Me.tableSuppLineItemJoinProduct.Product_IDColumn}, New Global.System.Data.DataColumn() {Me.tableProduct.Product_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Line_Item_Product1)
        Me.relationFK_Supplier_Quote_Line_Item_Product1 = New Global.System.Data.DataRelation("FK_Supplier_Quote_Line_Item_Product1", New Global.System.Data.DataColumn() {Me.tableSuppLineItemJoinProduct.Supp_Quote_Reference_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSupplier_Quote_Line_Item.Supp_Quote_Reference_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Supplier_Quote_Line_Item_Product1)
        Me.relationFK_Supplier_Quote_Supplier1 = New Global.System.Data.DataRelation("FK_Supplier_Quote_Supplier1", New Global.System.Data.DataColumn() {Me.tableSupplierQuoteJoinSupplier.Supplier_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSupplier_Quote.Supplier_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Supplier_Quote_Supplier1)
        Me.relationFK_Customer_Quote_Line_Item_Supplier1 = New Global.System.Data.DataRelation("FK_Customer_Quote_Line_Item_Supplier1", New Global.System.Data.DataColumn() {Me.tableSupplierQuoteJoinSupplier.Supplier_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSupplier.Supplier_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Line_Item_Supplier1)
        Me.relationFK_Customer_Quote_Customer1 = New Global.System.Data.DataRelation("FK_Customer_Quote_Customer1", New Global.System.Data.DataColumn() {Me.tableCustomerQuoteJoinCustomer.Customer_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustomer_Quote.Customer_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Customer1)
        Me.relationFK_Customer_Quote_Line_Item_Customer_Quote1 = New Global.System.Data.DataRelation("FK_Customer_Quote_Line_Item_Customer_Quote1", New Global.System.Data.DataColumn() {Me.tableCustomer_Quote.Cust_Quote_Reference_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustLineItemJoinProducts.Cust_Quote_Reference_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Line_Item_Customer_Quote1)
        Me.relationFK_Customer_Quote_Line_Item_Product2 = New Global.System.Data.DataRelation("FK_Customer_Quote_Line_Item_Product2", New Global.System.Data.DataColumn() {Me.tableProduct.Product_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustLineItemJoinProducts.Product_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Line_Item_Product2)
        Me.relationFK_Customer_Quote_Line_Item_Supplier2 = New Global.System.Data.DataRelation("FK_Customer_Quote_Line_Item_Supplier2", New Global.System.Data.DataColumn() {Me.tableSupplier.Supplier_IDColumn}, New Global.System.Data.DataColumn() {Me.tableCustLineItemJoinProducts.Supplier_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Customer_Quote_Line_Item_Supplier2)
        Me.relationFK_Supplier_Quote_Line_Item_Supplier_Quote1 = New Global.System.Data.DataRelation("FK_Supplier_Quote_Line_Item_Supplier_Quote1", New Global.System.Data.DataColumn() {Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Reference_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSupplier_Quote_Line_Item.Supp_Quote_Reference_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Supplier_Quote_Line_Item_Supplier_Quote1)
        Me.relationFK_Supplier_Quote_Supplier2 = New Global.System.Data.DataRelation("FK_Supplier_Quote_Supplier2", New Global.System.Data.DataColumn() {Me.tableSupplier.Supplier_IDColumn}, New Global.System.Data.DataColumn() {Me.tableSuppQuoteJoinSuppLineItem.Supplier_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Supplier_Quote_Supplier2)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCustomer() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCustomer_Quote() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCustomer_Quote_Line_Item() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeEmployee() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeProduct() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSupplier() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSupplier_Quote() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSupplier_Quote_Line_Item() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSuppLineItemJoinProduct() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSupplierQuoteJoinSupplier() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCustomerQuoteJoinCustomer() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeCustLineItemJoinProducts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSuppQuoteJoinSuppLineItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As group16DataSet = New group16DataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CustomerRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Customer_QuoteRowChangeEventHandler(ByVal sender As Object, ByVal e As Customer_QuoteRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Customer_Quote_Line_ItemRowChangeEventHandler(ByVal sender As Object, ByVal e As Customer_Quote_Line_ItemRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub EmployeeRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeeRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ProductRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SupplierRowChangeEventHandler(ByVal sender As Object, ByVal e As SupplierRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Supplier_QuoteRowChangeEventHandler(ByVal sender As Object, ByVal e As Supplier_QuoteRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub Supplier_Quote_Line_ItemRowChangeEventHandler(ByVal sender As Object, ByVal e As Supplier_Quote_Line_ItemRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SuppLineItemJoinProductRowChangeEventHandler(ByVal sender As Object, ByVal e As SuppLineItemJoinProductRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SupplierQuoteJoinSupplierRowChangeEventHandler(ByVal sender As Object, ByVal e As SupplierQuoteJoinSupplierRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CustomerQuoteJoinCustomerRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerQuoteJoinCustomerRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub CustLineItemJoinProductsRowChangeEventHandler(ByVal sender As Object, ByVal e As CustLineItemJoinProductsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SuppQuoteJoinSuppLineItemRowChangeEventHandler(ByVal sender As Object, ByVal e As SuppQuoteJoinSuppLineItemRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomerDataTable
        Inherits Global.System.Data.TypedTableBase(Of CustomerRow)
        
        Private columnCustomer_ID As Global.System.Data.DataColumn
        
        Private columnCust_FName As Global.System.Data.DataColumn
        
        Private columnCust_SName As Global.System.Data.DataColumn
        
        Private columnCust_DOB As Global.System.Data.DataColumn
        
        Private columnCust_Phone_No As Global.System.Data.DataColumn
        
        Private columnCust_Alt_Phone_No As Global.System.Data.DataColumn
        
        Private columnCust_Email As Global.System.Data.DataColumn
        
        Private columnCust_Password As Global.System.Data.DataColumn
        
        Private columnCust_Street_Addr_1 As Global.System.Data.DataColumn
        
        Private columnCust_Street_Addr_2 As Global.System.Data.DataColumn
        
        Private columnCust_Suburb As Global.System.Data.DataColumn
        
        Private columnCust_City As Global.System.Data.DataColumn
        
        Private columnCust_Province As Global.System.Data.DataColumn
        
        Private columnCust_Postal_Code As Global.System.Data.DataColumn
        
        Private columnCust_Active_Status As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Customer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Customer_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_FNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_FName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_SNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_SName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_DOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Alt_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Alt_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Password
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Street_Addr_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Street_Addr_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Street_Addr_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Street_Addr_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_SuburbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Suburb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_City
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Province
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Postal_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Postal_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Active_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Active_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerRow
            Get
                Return CType(Me.Rows(index),CustomerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustomerRowChanging As CustomerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustomerRowChanged As CustomerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustomerRowDeleting As CustomerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustomerRowDeleted As CustomerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCustomerRow(ByVal row As CustomerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCustomerRow(ByVal Cust_FName As String, ByVal Cust_SName As String, ByVal Cust_DOB As Date, ByVal Cust_Phone_No As String, ByVal Cust_Alt_Phone_No As String, ByVal Cust_Email As String, ByVal Cust_Password As String, ByVal Cust_Street_Addr_1 As String, ByVal Cust_Street_Addr_2 As String, ByVal Cust_Suburb As String, ByVal Cust_City As String, ByVal Cust_Province As String, ByVal Cust_Postal_Code As Decimal, ByVal Cust_Active_Status As String) As CustomerRow
            Dim rowCustomerRow As CustomerRow = CType(Me.NewRow,CustomerRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Cust_FName, Cust_SName, Cust_DOB, Cust_Phone_No, Cust_Alt_Phone_No, Cust_Email, Cust_Password, Cust_Street_Addr_1, Cust_Street_Addr_2, Cust_Suburb, Cust_City, Cust_Province, Cust_Postal_Code, Cust_Active_Status}
            rowCustomerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustomerRow)
            Return rowCustomerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCustomer_ID(ByVal Customer_ID As Integer) As CustomerRow
            Return CType(Me.Rows.Find(New Object() {Customer_ID}),CustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustomerDataTable = CType(MyBase.Clone,CustomerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustomerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCustomer_ID = MyBase.Columns("Customer_ID")
            Me.columnCust_FName = MyBase.Columns("Cust_FName")
            Me.columnCust_SName = MyBase.Columns("Cust_SName")
            Me.columnCust_DOB = MyBase.Columns("Cust_DOB")
            Me.columnCust_Phone_No = MyBase.Columns("Cust_Phone_No")
            Me.columnCust_Alt_Phone_No = MyBase.Columns("Cust_Alt_Phone_No")
            Me.columnCust_Email = MyBase.Columns("Cust_Email")
            Me.columnCust_Password = MyBase.Columns("Cust_Password")
            Me.columnCust_Street_Addr_1 = MyBase.Columns("Cust_Street_Addr_1")
            Me.columnCust_Street_Addr_2 = MyBase.Columns("Cust_Street_Addr_2")
            Me.columnCust_Suburb = MyBase.Columns("Cust_Suburb")
            Me.columnCust_City = MyBase.Columns("Cust_City")
            Me.columnCust_Province = MyBase.Columns("Cust_Province")
            Me.columnCust_Postal_Code = MyBase.Columns("Cust_Postal_Code")
            Me.columnCust_Active_Status = MyBase.Columns("Cust_Active_Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCustomer_ID = New Global.System.Data.DataColumn("Customer_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_ID)
            Me.columnCust_FName = New Global.System.Data.DataColumn("Cust_FName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_FName)
            Me.columnCust_SName = New Global.System.Data.DataColumn("Cust_SName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_SName)
            Me.columnCust_DOB = New Global.System.Data.DataColumn("Cust_DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_DOB)
            Me.columnCust_Phone_No = New Global.System.Data.DataColumn("Cust_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Phone_No)
            Me.columnCust_Alt_Phone_No = New Global.System.Data.DataColumn("Cust_Alt_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Alt_Phone_No)
            Me.columnCust_Email = New Global.System.Data.DataColumn("Cust_Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Email)
            Me.columnCust_Password = New Global.System.Data.DataColumn("Cust_Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Password)
            Me.columnCust_Street_Addr_1 = New Global.System.Data.DataColumn("Cust_Street_Addr_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Street_Addr_1)
            Me.columnCust_Street_Addr_2 = New Global.System.Data.DataColumn("Cust_Street_Addr_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Street_Addr_2)
            Me.columnCust_Suburb = New Global.System.Data.DataColumn("Cust_Suburb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Suburb)
            Me.columnCust_City = New Global.System.Data.DataColumn("Cust_City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_City)
            Me.columnCust_Province = New Global.System.Data.DataColumn("Cust_Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Province)
            Me.columnCust_Postal_Code = New Global.System.Data.DataColumn("Cust_Postal_Code", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Postal_Code)
            Me.columnCust_Active_Status = New Global.System.Data.DataColumn("Cust_Active_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Active_Status)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCustomer_ID}, true))
            Me.columnCustomer_ID.AutoIncrement = true
            Me.columnCustomer_ID.AutoIncrementSeed = -1
            Me.columnCustomer_ID.AutoIncrementStep = -1
            Me.columnCustomer_ID.AllowDBNull = false
            Me.columnCustomer_ID.ReadOnly = true
            Me.columnCustomer_ID.Unique = true
            Me.columnCust_FName.AllowDBNull = false
            Me.columnCust_FName.MaxLength = 50
            Me.columnCust_SName.AllowDBNull = false
            Me.columnCust_SName.MaxLength = 50
            Me.columnCust_DOB.AllowDBNull = false
            Me.columnCust_Phone_No.AllowDBNull = false
            Me.columnCust_Phone_No.MaxLength = 12
            Me.columnCust_Alt_Phone_No.MaxLength = 12
            Me.columnCust_Email.AllowDBNull = false
            Me.columnCust_Email.MaxLength = 50
            Me.columnCust_Password.MaxLength = 10
            Me.columnCust_Street_Addr_1.AllowDBNull = false
            Me.columnCust_Street_Addr_1.MaxLength = 50
            Me.columnCust_Street_Addr_2.MaxLength = 50
            Me.columnCust_Suburb.AllowDBNull = false
            Me.columnCust_Suburb.MaxLength = 50
            Me.columnCust_City.AllowDBNull = false
            Me.columnCust_City.MaxLength = 50
            Me.columnCust_Province.AllowDBNull = false
            Me.columnCust_Province.MaxLength = 50
            Me.columnCust_Postal_Code.AllowDBNull = false
            Me.columnCust_Active_Status.AllowDBNull = false
            Me.columnCust_Active_Status.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCustomerRow() As CustomerRow
            Return CType(Me.NewRow,CustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustomerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerRowChanged(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerRowChanging(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerRowDeleted(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerRowDeleting(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCustomerRow(ByVal row As CustomerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Customer_QuoteDataTable
        Inherits Global.System.Data.TypedTableBase(Of Customer_QuoteRow)
        
        Private columnCust_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnCustomer_ID As Global.System.Data.DataColumn
        
        Private columnEmployee_ID As Global.System.Data.DataColumn
        
        Private columnCust__Quote_Total_Price As Global.System.Data.DataColumn
        
        Private columnCust_Quote_Date_Issued As Global.System.Data.DataColumn
        
        Private columnCust_Quote_Acceptance_Status As Global.System.Data.DataColumn
        
        Private columnCust_Quote_Date_Accepted As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Customer_Quote"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Customer_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust__Quote_Total_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust__Quote_Total_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Date_IssuedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Date_Issued
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Acceptance_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Acceptance_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Date_AcceptedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Date_Accepted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Customer_QuoteRow
            Get
                Return CType(Me.Rows(index),Customer_QuoteRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Customer_QuoteRowChanging As Customer_QuoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Customer_QuoteRowChanged As Customer_QuoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Customer_QuoteRowDeleting As Customer_QuoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Customer_QuoteRowDeleted As Customer_QuoteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCustomer_QuoteRow(ByVal row As Customer_QuoteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCustomer_QuoteRow(ByVal Cust_Quote_Reference_ID As Integer, ByVal parentCustomerRowByFK_Customer_Quote_Customer As CustomerRow, ByVal parentEmployeeRowByFK_Customer_Quote_Employee As EmployeeRow, ByVal Cust__Quote_Total_Price As Decimal, ByVal Cust_Quote_Date_Issued As Date, ByVal Cust_Quote_Acceptance_Status As String, ByVal Cust_Quote_Date_Accepted As Date) As Customer_QuoteRow
            Dim rowCustomer_QuoteRow As Customer_QuoteRow = CType(Me.NewRow,Customer_QuoteRow)
            Dim columnValuesArray() As Object = New Object() {Cust_Quote_Reference_ID, Nothing, Nothing, Cust__Quote_Total_Price, Cust_Quote_Date_Issued, Cust_Quote_Acceptance_Status, Cust_Quote_Date_Accepted}
            If (Not (parentCustomerRowByFK_Customer_Quote_Customer) Is Nothing) Then
                columnValuesArray(1) = parentCustomerRowByFK_Customer_Quote_Customer(0)
            End If
            If (Not (parentEmployeeRowByFK_Customer_Quote_Employee) Is Nothing) Then
                columnValuesArray(2) = parentEmployeeRowByFK_Customer_Quote_Employee(0)
            End If
            rowCustomer_QuoteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustomer_QuoteRow)
            Return rowCustomer_QuoteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCust_Quote_Reference_ID(ByVal Cust_Quote_Reference_ID As Integer) As Customer_QuoteRow
            Return CType(Me.Rows.Find(New Object() {Cust_Quote_Reference_ID}),Customer_QuoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Customer_QuoteDataTable = CType(MyBase.Clone,Customer_QuoteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Customer_QuoteDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCust_Quote_Reference_ID = MyBase.Columns("Cust_Quote_Reference_ID")
            Me.columnCustomer_ID = MyBase.Columns("Customer_ID")
            Me.columnEmployee_ID = MyBase.Columns("Employee_ID")
            Me.columnCust__Quote_Total_Price = MyBase.Columns("Cust__Quote_Total_Price")
            Me.columnCust_Quote_Date_Issued = MyBase.Columns("Cust_Quote_Date_Issued")
            Me.columnCust_Quote_Acceptance_Status = MyBase.Columns("Cust_Quote_Acceptance_Status")
            Me.columnCust_Quote_Date_Accepted = MyBase.Columns("Cust_Quote_Date_Accepted")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCust_Quote_Reference_ID = New Global.System.Data.DataColumn("Cust_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Reference_ID)
            Me.columnCustomer_ID = New Global.System.Data.DataColumn("Customer_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_ID)
            Me.columnEmployee_ID = New Global.System.Data.DataColumn("Employee_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_ID)
            Me.columnCust__Quote_Total_Price = New Global.System.Data.DataColumn("Cust__Quote_Total_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust__Quote_Total_Price)
            Me.columnCust_Quote_Date_Issued = New Global.System.Data.DataColumn("Cust_Quote_Date_Issued", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Date_Issued)
            Me.columnCust_Quote_Acceptance_Status = New Global.System.Data.DataColumn("Cust_Quote_Acceptance_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Acceptance_Status)
            Me.columnCust_Quote_Date_Accepted = New Global.System.Data.DataColumn("Cust_Quote_Date_Accepted", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Date_Accepted)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCust_Quote_Reference_ID}, true))
            Me.columnCust_Quote_Reference_ID.AutoIncrementSeed = -1
            Me.columnCust_Quote_Reference_ID.AutoIncrementStep = -1
            Me.columnCust_Quote_Reference_ID.AllowDBNull = false
            Me.columnCust_Quote_Reference_ID.Unique = true
            Me.columnCustomer_ID.AllowDBNull = false
            Me.columnEmployee_ID.AllowDBNull = false
            Me.columnCust__Quote_Total_Price.AllowDBNull = false
            Me.columnCust_Quote_Date_Issued.AllowDBNull = false
            Me.columnCust_Quote_Acceptance_Status.AllowDBNull = false
            Me.columnCust_Quote_Acceptance_Status.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCustomer_QuoteRow() As Customer_QuoteRow
            Return CType(Me.NewRow,Customer_QuoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Customer_QuoteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Customer_QuoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Customer_QuoteRowChangedEvent) Is Nothing) Then
                RaiseEvent Customer_QuoteRowChanged(Me, New Customer_QuoteRowChangeEvent(CType(e.Row,Customer_QuoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Customer_QuoteRowChangingEvent) Is Nothing) Then
                RaiseEvent Customer_QuoteRowChanging(Me, New Customer_QuoteRowChangeEvent(CType(e.Row,Customer_QuoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Customer_QuoteRowDeletedEvent) Is Nothing) Then
                RaiseEvent Customer_QuoteRowDeleted(Me, New Customer_QuoteRowChangeEvent(CType(e.Row,Customer_QuoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Customer_QuoteRowDeletingEvent) Is Nothing) Then
                RaiseEvent Customer_QuoteRowDeleting(Me, New Customer_QuoteRowChangeEvent(CType(e.Row,Customer_QuoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCustomer_QuoteRow(ByVal row As Customer_QuoteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Customer_QuoteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Customer_Quote_Line_ItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of Customer_Quote_Line_ItemRow)
        
        Private columnProduct_ID As Global.System.Data.DataColumn
        
        Private columnCust_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Cost_Price As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Sale_incl_VAT As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Sale_excl_VAT As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Markup_Percentage As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Discount_Percentage As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Quantity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Customer_Quote_Line_Item"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Cost_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Cost_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Sale_incl_VATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Sale_incl_VAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Sale_excl_VATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Sale_excl_VAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Markup_PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Markup_Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Discount_PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Discount_Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Quantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Customer_Quote_Line_ItemRow
            Get
                Return CType(Me.Rows(index),Customer_Quote_Line_ItemRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Customer_Quote_Line_ItemRowChanging As Customer_Quote_Line_ItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Customer_Quote_Line_ItemRowChanged As Customer_Quote_Line_ItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Customer_Quote_Line_ItemRowDeleting As Customer_Quote_Line_ItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Customer_Quote_Line_ItemRowDeleted As Customer_Quote_Line_ItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCustomer_Quote_Line_ItemRow(ByVal row As Customer_Quote_Line_ItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCustomer_Quote_Line_ItemRow(ByVal parentProductRowByFK_Customer_Quote_Line_Item_Product As ProductRow, ByVal parentCustomer_QuoteRowByFK_Customer_Quote_Line_Item_Customer_Quote As Customer_QuoteRow, ByVal parentSupplierRowByFK_Customer_Quote_Line_Item_Supplier As SupplierRow, ByVal Cust_Line_Item_Cost_Price As Decimal, ByVal Cust_Line_Item_Sale_incl_VAT As Decimal, ByVal Cust_Line_Item_Sale_excl_VAT As Decimal, ByVal Cust_Line_Item_Markup_Percentage As Decimal, ByVal Cust_Line_Item_Discount_Percentage As Decimal, ByVal Cust_Line_Item_Quantity As Integer) As Customer_Quote_Line_ItemRow
            Dim rowCustomer_Quote_Line_ItemRow As Customer_Quote_Line_ItemRow = CType(Me.NewRow,Customer_Quote_Line_ItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, Cust_Line_Item_Cost_Price, Cust_Line_Item_Sale_incl_VAT, Cust_Line_Item_Sale_excl_VAT, Cust_Line_Item_Markup_Percentage, Cust_Line_Item_Discount_Percentage, Cust_Line_Item_Quantity}
            If (Not (parentProductRowByFK_Customer_Quote_Line_Item_Product) Is Nothing) Then
                columnValuesArray(0) = parentProductRowByFK_Customer_Quote_Line_Item_Product(0)
            End If
            If (Not (parentCustomer_QuoteRowByFK_Customer_Quote_Line_Item_Customer_Quote) Is Nothing) Then
                columnValuesArray(1) = parentCustomer_QuoteRowByFK_Customer_Quote_Line_Item_Customer_Quote(0)
            End If
            If (Not (parentSupplierRowByFK_Customer_Quote_Line_Item_Supplier) Is Nothing) Then
                columnValuesArray(2) = parentSupplierRowByFK_Customer_Quote_Line_Item_Supplier(0)
            End If
            rowCustomer_Quote_Line_ItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustomer_Quote_Line_ItemRow)
            Return rowCustomer_Quote_Line_ItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProduct_IDCust_Quote_Reference_IDSupplier_ID(ByVal Product_ID As Integer, ByVal Cust_Quote_Reference_ID As Integer, ByVal Supplier_ID As Integer) As Customer_Quote_Line_ItemRow
            Return CType(Me.Rows.Find(New Object() {Product_ID, Cust_Quote_Reference_ID, Supplier_ID}),Customer_Quote_Line_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Customer_Quote_Line_ItemDataTable = CType(MyBase.Clone,Customer_Quote_Line_ItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Customer_Quote_Line_ItemDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProduct_ID = MyBase.Columns("Product_ID")
            Me.columnCust_Quote_Reference_ID = MyBase.Columns("Cust_Quote_Reference_ID")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnCust_Line_Item_Cost_Price = MyBase.Columns("Cust_Line_Item_Cost_Price")
            Me.columnCust_Line_Item_Sale_incl_VAT = MyBase.Columns("Cust_Line_Item_Sale_incl_VAT")
            Me.columnCust_Line_Item_Sale_excl_VAT = MyBase.Columns("Cust_Line_Item_Sale_excl_VAT")
            Me.columnCust_Line_Item_Markup_Percentage = MyBase.Columns("Cust_Line_Item_Markup_Percentage")
            Me.columnCust_Line_Item_Discount_Percentage = MyBase.Columns("Cust_Line_Item_Discount_Percentage")
            Me.columnCust_Line_Item_Quantity = MyBase.Columns("Cust_Line_Item_Quantity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProduct_ID = New Global.System.Data.DataColumn("Product_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_ID)
            Me.columnCust_Quote_Reference_ID = New Global.System.Data.DataColumn("Cust_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Reference_ID)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnCust_Line_Item_Cost_Price = New Global.System.Data.DataColumn("Cust_Line_Item_Cost_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Cost_Price)
            Me.columnCust_Line_Item_Sale_incl_VAT = New Global.System.Data.DataColumn("Cust_Line_Item_Sale_incl_VAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Sale_incl_VAT)
            Me.columnCust_Line_Item_Sale_excl_VAT = New Global.System.Data.DataColumn("Cust_Line_Item_Sale_excl_VAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Sale_excl_VAT)
            Me.columnCust_Line_Item_Markup_Percentage = New Global.System.Data.DataColumn("Cust_Line_Item_Markup_Percentage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Markup_Percentage)
            Me.columnCust_Line_Item_Discount_Percentage = New Global.System.Data.DataColumn("Cust_Line_Item_Discount_Percentage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Discount_Percentage)
            Me.columnCust_Line_Item_Quantity = New Global.System.Data.DataColumn("Cust_Line_Item_Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Quantity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProduct_ID, Me.columnCust_Quote_Reference_ID, Me.columnSupplier_ID}, true))
            Me.columnProduct_ID.AllowDBNull = false
            Me.columnCust_Quote_Reference_ID.AllowDBNull = false
            Me.columnSupplier_ID.AllowDBNull = false
            Me.columnCust_Line_Item_Cost_Price.AllowDBNull = false
            Me.columnCust_Line_Item_Sale_incl_VAT.AllowDBNull = false
            Me.columnCust_Line_Item_Sale_excl_VAT.AllowDBNull = false
            Me.columnCust_Line_Item_Markup_Percentage.AllowDBNull = false
            Me.columnCust_Line_Item_Discount_Percentage.AllowDBNull = false
            Me.columnCust_Line_Item_Quantity.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCustomer_Quote_Line_ItemRow() As Customer_Quote_Line_ItemRow
            Return CType(Me.NewRow,Customer_Quote_Line_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Customer_Quote_Line_ItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Customer_Quote_Line_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Customer_Quote_Line_ItemRowChangedEvent) Is Nothing) Then
                RaiseEvent Customer_Quote_Line_ItemRowChanged(Me, New Customer_Quote_Line_ItemRowChangeEvent(CType(e.Row,Customer_Quote_Line_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Customer_Quote_Line_ItemRowChangingEvent) Is Nothing) Then
                RaiseEvent Customer_Quote_Line_ItemRowChanging(Me, New Customer_Quote_Line_ItemRowChangeEvent(CType(e.Row,Customer_Quote_Line_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Customer_Quote_Line_ItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent Customer_Quote_Line_ItemRowDeleted(Me, New Customer_Quote_Line_ItemRowChangeEvent(CType(e.Row,Customer_Quote_Line_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Customer_Quote_Line_ItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent Customer_Quote_Line_ItemRowDeleting(Me, New Customer_Quote_Line_ItemRowChangeEvent(CType(e.Row,Customer_Quote_Line_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCustomer_Quote_Line_ItemRow(ByVal row As Customer_Quote_Line_ItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Customer_Quote_Line_ItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EmployeeDataTable
        Inherits Global.System.Data.TypedTableBase(Of EmployeeRow)
        
        Private columnEmployee_ID As Global.System.Data.DataColumn
        
        Private columnEmployee_FName As Global.System.Data.DataColumn
        
        Private columnEmployee_SName As Global.System.Data.DataColumn
        
        Private columnEmployee_DOB As Global.System.Data.DataColumn
        
        Private columnEmployee_Gender As Global.System.Data.DataColumn
        
        Private columnEmployee_Phone_No As Global.System.Data.DataColumn
        
        Private columnEmployee_Alt_Phone_No As Global.System.Data.DataColumn
        
        Private columnEmployee_Email As Global.System.Data.DataColumn
        
        Private columnEmployee_Password As Global.System.Data.DataColumn
        
        Private columnEmployee_SA_ID_No As Global.System.Data.DataColumn
        
        Private columnEmployee_Street_Addr_1 As Global.System.Data.DataColumn
        
        Private columnEmployee_Street_Addr_2 As Global.System.Data.DataColumn
        
        Private columnEmployee_Suburb As Global.System.Data.DataColumn
        
        Private columnEmployee_City As Global.System.Data.DataColumn
        
        Private columnEmployee_Province As Global.System.Data.DataColumn
        
        Private columnEmployee_Postal_Code As Global.System.Data.DataColumn
        
        Private columnEmployee_Position As Global.System.Data.DataColumn
        
        Private columnEmployee_Admin_Level As Global.System.Data.DataColumn
        
        Private columnEmployee_Active_Status As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Employee"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_FNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_FName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_SNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_SName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_DOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Gender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_Alt_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Alt_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Password
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_SA_ID_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_SA_ID_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_Street_Addr_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Street_Addr_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_Street_Addr_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Street_Addr_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_SuburbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Suburb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_City
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Province
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_Postal_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Postal_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Position
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_Admin_LevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Admin_Level
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_Active_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_Active_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EmployeeRow
            Get
                Return CType(Me.Rows(index),EmployeeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EmployeeRowChanging As EmployeeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EmployeeRowChanged As EmployeeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EmployeeRowDeleting As EmployeeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event EmployeeRowDeleted As EmployeeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddEmployeeRow(ByVal row As EmployeeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddEmployeeRow( _
                    ByVal Employee_FName As String,  _
                    ByVal Employee_SName As String,  _
                    ByVal Employee_DOB As Date,  _
                    ByVal Employee_Gender As String,  _
                    ByVal Employee_Phone_No As String,  _
                    ByVal Employee_Alt_Phone_No As String,  _
                    ByVal Employee_Email As String,  _
                    ByVal Employee_Password As String,  _
                    ByVal Employee_SA_ID_No As Decimal,  _
                    ByVal Employee_Street_Addr_1 As String,  _
                    ByVal Employee_Street_Addr_2 As String,  _
                    ByVal Employee_Suburb As String,  _
                    ByVal Employee_City As String,  _
                    ByVal Employee_Province As String,  _
                    ByVal Employee_Postal_Code As Decimal,  _
                    ByVal Employee_Position As String,  _
                    ByVal Employee_Admin_Level As Integer,  _
                    ByVal Employee_Active_Status As String) As EmployeeRow
            Dim rowEmployeeRow As EmployeeRow = CType(Me.NewRow,EmployeeRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Employee_FName, Employee_SName, Employee_DOB, Employee_Gender, Employee_Phone_No, Employee_Alt_Phone_No, Employee_Email, Employee_Password, Employee_SA_ID_No, Employee_Street_Addr_1, Employee_Street_Addr_2, Employee_Suburb, Employee_City, Employee_Province, Employee_Postal_Code, Employee_Position, Employee_Admin_Level, Employee_Active_Status}
            rowEmployeeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEmployeeRow)
            Return rowEmployeeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByEmployee_ID(ByVal Employee_ID As Integer) As EmployeeRow
            Return CType(Me.Rows.Find(New Object() {Employee_ID}),EmployeeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EmployeeDataTable = CType(MyBase.Clone,EmployeeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EmployeeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnEmployee_ID = MyBase.Columns("Employee_ID")
            Me.columnEmployee_FName = MyBase.Columns("Employee_FName")
            Me.columnEmployee_SName = MyBase.Columns("Employee_SName")
            Me.columnEmployee_DOB = MyBase.Columns("Employee_DOB")
            Me.columnEmployee_Gender = MyBase.Columns("Employee_Gender")
            Me.columnEmployee_Phone_No = MyBase.Columns("Employee_Phone_No")
            Me.columnEmployee_Alt_Phone_No = MyBase.Columns("Employee_Alt_Phone_No")
            Me.columnEmployee_Email = MyBase.Columns("Employee_Email")
            Me.columnEmployee_Password = MyBase.Columns("Employee_Password")
            Me.columnEmployee_SA_ID_No = MyBase.Columns("Employee_SA_ID_No")
            Me.columnEmployee_Street_Addr_1 = MyBase.Columns("Employee_Street_Addr_1")
            Me.columnEmployee_Street_Addr_2 = MyBase.Columns("Employee_Street_Addr_2")
            Me.columnEmployee_Suburb = MyBase.Columns("Employee_Suburb")
            Me.columnEmployee_City = MyBase.Columns("Employee_City")
            Me.columnEmployee_Province = MyBase.Columns("Employee_Province")
            Me.columnEmployee_Postal_Code = MyBase.Columns("Employee_Postal_Code")
            Me.columnEmployee_Position = MyBase.Columns("Employee_Position")
            Me.columnEmployee_Admin_Level = MyBase.Columns("Employee_Admin_Level")
            Me.columnEmployee_Active_Status = MyBase.Columns("Employee_Active_Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnEmployee_ID = New Global.System.Data.DataColumn("Employee_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_ID)
            Me.columnEmployee_FName = New Global.System.Data.DataColumn("Employee_FName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_FName)
            Me.columnEmployee_SName = New Global.System.Data.DataColumn("Employee_SName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_SName)
            Me.columnEmployee_DOB = New Global.System.Data.DataColumn("Employee_DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_DOB)
            Me.columnEmployee_Gender = New Global.System.Data.DataColumn("Employee_Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Gender)
            Me.columnEmployee_Phone_No = New Global.System.Data.DataColumn("Employee_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Phone_No)
            Me.columnEmployee_Alt_Phone_No = New Global.System.Data.DataColumn("Employee_Alt_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Alt_Phone_No)
            Me.columnEmployee_Email = New Global.System.Data.DataColumn("Employee_Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Email)
            Me.columnEmployee_Password = New Global.System.Data.DataColumn("Employee_Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Password)
            Me.columnEmployee_SA_ID_No = New Global.System.Data.DataColumn("Employee_SA_ID_No", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_SA_ID_No)
            Me.columnEmployee_Street_Addr_1 = New Global.System.Data.DataColumn("Employee_Street_Addr_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Street_Addr_1)
            Me.columnEmployee_Street_Addr_2 = New Global.System.Data.DataColumn("Employee_Street_Addr_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Street_Addr_2)
            Me.columnEmployee_Suburb = New Global.System.Data.DataColumn("Employee_Suburb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Suburb)
            Me.columnEmployee_City = New Global.System.Data.DataColumn("Employee_City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_City)
            Me.columnEmployee_Province = New Global.System.Data.DataColumn("Employee_Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Province)
            Me.columnEmployee_Postal_Code = New Global.System.Data.DataColumn("Employee_Postal_Code", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Postal_Code)
            Me.columnEmployee_Position = New Global.System.Data.DataColumn("Employee_Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Position)
            Me.columnEmployee_Admin_Level = New Global.System.Data.DataColumn("Employee_Admin_Level", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Admin_Level)
            Me.columnEmployee_Active_Status = New Global.System.Data.DataColumn("Employee_Active_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_Active_Status)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEmployee_ID}, true))
            Me.columnEmployee_ID.AutoIncrement = true
            Me.columnEmployee_ID.AutoIncrementSeed = -1
            Me.columnEmployee_ID.AutoIncrementStep = -1
            Me.columnEmployee_ID.AllowDBNull = false
            Me.columnEmployee_ID.ReadOnly = true
            Me.columnEmployee_ID.Unique = true
            Me.columnEmployee_FName.AllowDBNull = false
            Me.columnEmployee_FName.MaxLength = 20
            Me.columnEmployee_SName.AllowDBNull = false
            Me.columnEmployee_SName.MaxLength = 20
            Me.columnEmployee_DOB.AllowDBNull = false
            Me.columnEmployee_Gender.AllowDBNull = false
            Me.columnEmployee_Gender.MaxLength = 1
            Me.columnEmployee_Phone_No.AllowDBNull = false
            Me.columnEmployee_Phone_No.MaxLength = 12
            Me.columnEmployee_Alt_Phone_No.MaxLength = 12
            Me.columnEmployee_Email.AllowDBNull = false
            Me.columnEmployee_Email.MaxLength = 50
            Me.columnEmployee_Password.AllowDBNull = false
            Me.columnEmployee_Password.MaxLength = 10
            Me.columnEmployee_SA_ID_No.AllowDBNull = false
            Me.columnEmployee_Street_Addr_1.AllowDBNull = false
            Me.columnEmployee_Street_Addr_1.MaxLength = 50
            Me.columnEmployee_Street_Addr_2.MaxLength = 50
            Me.columnEmployee_Suburb.AllowDBNull = false
            Me.columnEmployee_Suburb.MaxLength = 50
            Me.columnEmployee_City.AllowDBNull = false
            Me.columnEmployee_City.MaxLength = 50
            Me.columnEmployee_Province.AllowDBNull = false
            Me.columnEmployee_Province.MaxLength = 50
            Me.columnEmployee_Postal_Code.AllowDBNull = false
            Me.columnEmployee_Position.AllowDBNull = false
            Me.columnEmployee_Position.MaxLength = 20
            Me.columnEmployee_Admin_Level.AllowDBNull = false
            Me.columnEmployee_Active_Status.AllowDBNull = false
            Me.columnEmployee_Active_Status.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewEmployeeRow() As EmployeeRow
            Return CType(Me.NewRow,EmployeeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EmployeeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EmployeeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EmployeeRowChangedEvent) Is Nothing) Then
                RaiseEvent EmployeeRowChanged(Me, New EmployeeRowChangeEvent(CType(e.Row,EmployeeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EmployeeRowChangingEvent) Is Nothing) Then
                RaiseEvent EmployeeRowChanging(Me, New EmployeeRowChangeEvent(CType(e.Row,EmployeeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EmployeeRowDeletedEvent) Is Nothing) Then
                RaiseEvent EmployeeRowDeleted(Me, New EmployeeRowChangeEvent(CType(e.Row,EmployeeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EmployeeRowDeletingEvent) Is Nothing) Then
                RaiseEvent EmployeeRowDeleting(Me, New EmployeeRowChangeEvent(CType(e.Row,EmployeeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveEmployeeRow(ByVal row As EmployeeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EmployeeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProductDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProductRow)
        
        Private columnProduct_ID As Global.System.Data.DataColumn
        
        Private columnProduct_Name As Global.System.Data.DataColumn
        
        Private columnProduct_Brand As Global.System.Data.DataColumn
        
        Private columnProduct_Description As Global.System.Data.DataColumn
        
        Private columnProduct_Active_Status As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Product"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_BrandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Brand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_Active_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Active_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductRow
            Get
                Return CType(Me.Rows(index),ProductRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ProductRowChanging As ProductRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ProductRowChanged As ProductRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ProductRowDeleting As ProductRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ProductRowDeleted As ProductRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddProductRow(ByVal row As ProductRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddProductRow(ByVal Product_Name As String, ByVal Product_Brand As String, ByVal Product_Description As String, ByVal Product_Active_Status As String) As ProductRow
            Dim rowProductRow As ProductRow = CType(Me.NewRow,ProductRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Product_Name, Product_Brand, Product_Description, Product_Active_Status}
            rowProductRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProductRow)
            Return rowProductRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProduct_ID(ByVal Product_ID As Integer) As ProductRow
            Return CType(Me.Rows.Find(New Object() {Product_ID}),ProductRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProductDataTable = CType(MyBase.Clone,ProductDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProductDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProduct_ID = MyBase.Columns("Product_ID")
            Me.columnProduct_Name = MyBase.Columns("Product_Name")
            Me.columnProduct_Brand = MyBase.Columns("Product_Brand")
            Me.columnProduct_Description = MyBase.Columns("Product_Description")
            Me.columnProduct_Active_Status = MyBase.Columns("Product_Active_Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProduct_ID = New Global.System.Data.DataColumn("Product_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_ID)
            Me.columnProduct_Name = New Global.System.Data.DataColumn("Product_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Name)
            Me.columnProduct_Brand = New Global.System.Data.DataColumn("Product_Brand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Brand)
            Me.columnProduct_Description = New Global.System.Data.DataColumn("Product_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Description)
            Me.columnProduct_Active_Status = New Global.System.Data.DataColumn("Product_Active_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Active_Status)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProduct_ID}, true))
            Me.columnProduct_ID.AutoIncrement = true
            Me.columnProduct_ID.AutoIncrementSeed = -1
            Me.columnProduct_ID.AutoIncrementStep = -1
            Me.columnProduct_ID.AllowDBNull = false
            Me.columnProduct_ID.ReadOnly = true
            Me.columnProduct_ID.Unique = true
            Me.columnProduct_Name.AllowDBNull = false
            Me.columnProduct_Name.MaxLength = 30
            Me.columnProduct_Brand.AllowDBNull = false
            Me.columnProduct_Brand.MaxLength = 30
            Me.columnProduct_Description.AllowDBNull = false
            Me.columnProduct_Description.MaxLength = 2147483647
            Me.columnProduct_Active_Status.AllowDBNull = false
            Me.columnProduct_Active_Status.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewProductRow() As ProductRow
            Return CType(Me.NewRow,ProductRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProductRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProductRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductRowChanged(Me, New ProductRowChangeEvent(CType(e.Row,ProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductRowChanging(Me, New ProductRowChangeEvent(CType(e.Row,ProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductRowDeleted(Me, New ProductRowChangeEvent(CType(e.Row,ProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductRowDeleting(Me, New ProductRowChangeEvent(CType(e.Row,ProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveProductRow(ByVal row As ProductRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProductDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SupplierDataTable
        Inherits Global.System.Data.TypedTableBase(Of SupplierRow)
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_Name As Global.System.Data.DataColumn
        
        Private columnSupplier_Street_Addr_1 As Global.System.Data.DataColumn
        
        Private columnSupplier_Street_Addr_2 As Global.System.Data.DataColumn
        
        Private columnSupplier_Suburb As Global.System.Data.DataColumn
        
        Private columnSupplier_City As Global.System.Data.DataColumn
        
        Private columnSupplier_Province As Global.System.Data.DataColumn
        
        Private columnSupplier_Postal_Code As Global.System.Data.DataColumn
        
        Private columnSupplier_Phone_No As Global.System.Data.DataColumn
        
        Private columnSupplier_Alt_Phone_No As Global.System.Data.DataColumn
        
        Private columnSupplier_Email As Global.System.Data.DataColumn
        
        Private columnSupplier_Password As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_FName As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_SName As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_Email As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_Phone_No As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_Alt_Phone_No As Global.System.Data.DataColumn
        
        Private columnSupplier_Active_Status As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Supplier"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Street_Addr_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Street_Addr_1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Street_Addr_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Street_Addr_2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_SuburbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Suburb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_City
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_ProvinceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Province
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Postal_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Postal_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Alt_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Alt_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Password
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_FNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_FName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_SNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_SName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_Email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_Alt_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_Alt_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Active_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Active_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SupplierRow
            Get
                Return CType(Me.Rows(index),SupplierRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SupplierRowChanging As SupplierRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SupplierRowChanged As SupplierRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SupplierRowDeleting As SupplierRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SupplierRowDeleted As SupplierRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSupplierRow(ByVal row As SupplierRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSupplierRow( _
                    ByVal Supplier_Name As String,  _
                    ByVal Supplier_Street_Addr_1 As String,  _
                    ByVal Supplier_Street_Addr_2 As String,  _
                    ByVal Supplier_Suburb As String,  _
                    ByVal Supplier_City As String,  _
                    ByVal Supplier_Province As String,  _
                    ByVal Supplier_Postal_Code As Decimal,  _
                    ByVal Supplier_Phone_No As String,  _
                    ByVal Supplier_Alt_Phone_No As String,  _
                    ByVal Supplier_Email As String,  _
                    ByVal Supplier_Password As String,  _
                    ByVal Supplier_Rep_FName As String,  _
                    ByVal Supplier_Rep_SName As String,  _
                    ByVal Supplier_Rep_Email As String,  _
                    ByVal Supplier_Rep_Phone_No As String,  _
                    ByVal Supplier_Rep_Alt_Phone_No As String,  _
                    ByVal Supplier_Active_Status As String) As SupplierRow
            Dim rowSupplierRow As SupplierRow = CType(Me.NewRow,SupplierRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Supplier_Name, Supplier_Street_Addr_1, Supplier_Street_Addr_2, Supplier_Suburb, Supplier_City, Supplier_Province, Supplier_Postal_Code, Supplier_Phone_No, Supplier_Alt_Phone_No, Supplier_Email, Supplier_Password, Supplier_Rep_FName, Supplier_Rep_SName, Supplier_Rep_Email, Supplier_Rep_Phone_No, Supplier_Rep_Alt_Phone_No, Supplier_Active_Status}
            rowSupplierRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSupplierRow)
            Return rowSupplierRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySupplier_ID(ByVal Supplier_ID As Integer) As SupplierRow
            Return CType(Me.Rows.Find(New Object() {Supplier_ID}),SupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SupplierDataTable = CType(MyBase.Clone,SupplierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SupplierDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnSupplier_Name = MyBase.Columns("Supplier_Name")
            Me.columnSupplier_Street_Addr_1 = MyBase.Columns("Supplier_Street_Addr_1")
            Me.columnSupplier_Street_Addr_2 = MyBase.Columns("Supplier_Street_Addr_2")
            Me.columnSupplier_Suburb = MyBase.Columns("Supplier_Suburb")
            Me.columnSupplier_City = MyBase.Columns("Supplier_City")
            Me.columnSupplier_Province = MyBase.Columns("Supplier_Province")
            Me.columnSupplier_Postal_Code = MyBase.Columns("Supplier_Postal_Code")
            Me.columnSupplier_Phone_No = MyBase.Columns("Supplier_Phone_No")
            Me.columnSupplier_Alt_Phone_No = MyBase.Columns("Supplier_Alt_Phone_No")
            Me.columnSupplier_Email = MyBase.Columns("Supplier_Email")
            Me.columnSupplier_Password = MyBase.Columns("Supplier_Password")
            Me.columnSupplier_Rep_FName = MyBase.Columns("Supplier_Rep_FName")
            Me.columnSupplier_Rep_SName = MyBase.Columns("Supplier_Rep_SName")
            Me.columnSupplier_Rep_Email = MyBase.Columns("Supplier_Rep_Email")
            Me.columnSupplier_Rep_Phone_No = MyBase.Columns("Supplier_Rep_Phone_No")
            Me.columnSupplier_Rep_Alt_Phone_No = MyBase.Columns("Supplier_Rep_Alt_Phone_No")
            Me.columnSupplier_Active_Status = MyBase.Columns("Supplier_Active_Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnSupplier_Name = New Global.System.Data.DataColumn("Supplier_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Name)
            Me.columnSupplier_Street_Addr_1 = New Global.System.Data.DataColumn("Supplier_Street_Addr_1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Street_Addr_1)
            Me.columnSupplier_Street_Addr_2 = New Global.System.Data.DataColumn("Supplier_Street_Addr_2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Street_Addr_2)
            Me.columnSupplier_Suburb = New Global.System.Data.DataColumn("Supplier_Suburb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Suburb)
            Me.columnSupplier_City = New Global.System.Data.DataColumn("Supplier_City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_City)
            Me.columnSupplier_Province = New Global.System.Data.DataColumn("Supplier_Province", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Province)
            Me.columnSupplier_Postal_Code = New Global.System.Data.DataColumn("Supplier_Postal_Code", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Postal_Code)
            Me.columnSupplier_Phone_No = New Global.System.Data.DataColumn("Supplier_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Phone_No)
            Me.columnSupplier_Alt_Phone_No = New Global.System.Data.DataColumn("Supplier_Alt_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Alt_Phone_No)
            Me.columnSupplier_Email = New Global.System.Data.DataColumn("Supplier_Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Email)
            Me.columnSupplier_Password = New Global.System.Data.DataColumn("Supplier_Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Password)
            Me.columnSupplier_Rep_FName = New Global.System.Data.DataColumn("Supplier_Rep_FName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_FName)
            Me.columnSupplier_Rep_SName = New Global.System.Data.DataColumn("Supplier_Rep_SName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_SName)
            Me.columnSupplier_Rep_Email = New Global.System.Data.DataColumn("Supplier_Rep_Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_Email)
            Me.columnSupplier_Rep_Phone_No = New Global.System.Data.DataColumn("Supplier_Rep_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_Phone_No)
            Me.columnSupplier_Rep_Alt_Phone_No = New Global.System.Data.DataColumn("Supplier_Rep_Alt_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_Alt_Phone_No)
            Me.columnSupplier_Active_Status = New Global.System.Data.DataColumn("Supplier_Active_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Active_Status)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSupplier_ID}, true))
            Me.columnSupplier_ID.AutoIncrement = true
            Me.columnSupplier_ID.AutoIncrementSeed = -1
            Me.columnSupplier_ID.AutoIncrementStep = -1
            Me.columnSupplier_ID.AllowDBNull = false
            Me.columnSupplier_ID.ReadOnly = true
            Me.columnSupplier_ID.Unique = true
            Me.columnSupplier_Name.AllowDBNull = false
            Me.columnSupplier_Name.MaxLength = 50
            Me.columnSupplier_Street_Addr_1.AllowDBNull = false
            Me.columnSupplier_Street_Addr_1.MaxLength = 50
            Me.columnSupplier_Street_Addr_2.MaxLength = 50
            Me.columnSupplier_Suburb.AllowDBNull = false
            Me.columnSupplier_Suburb.MaxLength = 50
            Me.columnSupplier_City.AllowDBNull = false
            Me.columnSupplier_City.MaxLength = 50
            Me.columnSupplier_Province.AllowDBNull = false
            Me.columnSupplier_Province.MaxLength = 50
            Me.columnSupplier_Postal_Code.AllowDBNull = false
            Me.columnSupplier_Phone_No.AllowDBNull = false
            Me.columnSupplier_Phone_No.MaxLength = 12
            Me.columnSupplier_Alt_Phone_No.MaxLength = 12
            Me.columnSupplier_Email.AllowDBNull = false
            Me.columnSupplier_Email.MaxLength = 50
            Me.columnSupplier_Password.MaxLength = 10
            Me.columnSupplier_Rep_FName.AllowDBNull = false
            Me.columnSupplier_Rep_FName.MaxLength = 20
            Me.columnSupplier_Rep_SName.AllowDBNull = false
            Me.columnSupplier_Rep_SName.MaxLength = 20
            Me.columnSupplier_Rep_Email.AllowDBNull = false
            Me.columnSupplier_Rep_Email.MaxLength = 50
            Me.columnSupplier_Rep_Phone_No.AllowDBNull = false
            Me.columnSupplier_Rep_Phone_No.MaxLength = 12
            Me.columnSupplier_Rep_Alt_Phone_No.MaxLength = 12
            Me.columnSupplier_Active_Status.AllowDBNull = false
            Me.columnSupplier_Active_Status.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSupplierRow() As SupplierRow
            Return CType(Me.NewRow,SupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SupplierRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SupplierRowChangedEvent) Is Nothing) Then
                RaiseEvent SupplierRowChanged(Me, New SupplierRowChangeEvent(CType(e.Row,SupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SupplierRowChangingEvent) Is Nothing) Then
                RaiseEvent SupplierRowChanging(Me, New SupplierRowChangeEvent(CType(e.Row,SupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SupplierRowDeletedEvent) Is Nothing) Then
                RaiseEvent SupplierRowDeleted(Me, New SupplierRowChangeEvent(CType(e.Row,SupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SupplierRowDeletingEvent) Is Nothing) Then
                RaiseEvent SupplierRowDeleting(Me, New SupplierRowChangeEvent(CType(e.Row,SupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSupplierRow(ByVal row As SupplierRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SupplierDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Supplier_QuoteDataTable
        Inherits Global.System.Data.TypedTableBase(Of Supplier_QuoteRow)
        
        Private columnSupp_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Total_Price As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Date_Recieved As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Acceptance_Status As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Date_Acceptance As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Supplier_Quote"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Total_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Total_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Date_RecievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Date_Recieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Acceptance_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Acceptance_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Date_AcceptanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Date_Acceptance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Supplier_QuoteRow
            Get
                Return CType(Me.Rows(index),Supplier_QuoteRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Supplier_QuoteRowChanging As Supplier_QuoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Supplier_QuoteRowChanged As Supplier_QuoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Supplier_QuoteRowDeleting As Supplier_QuoteRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Supplier_QuoteRowDeleted As Supplier_QuoteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSupplier_QuoteRow(ByVal row As Supplier_QuoteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSupplier_QuoteRow(ByVal parentSupplierRowByFK_Supplier_Quote_Supplier As SupplierRow, ByVal Supp_Quote_Total_Price As Decimal, ByVal Supp_Quote_Date_Recieved As Date, ByVal Supp_Quote_Acceptance_Status As String, ByVal Supp_Quote_Date_Acceptance As Date) As Supplier_QuoteRow
            Dim rowSupplier_QuoteRow As Supplier_QuoteRow = CType(Me.NewRow,Supplier_QuoteRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Supp_Quote_Total_Price, Supp_Quote_Date_Recieved, Supp_Quote_Acceptance_Status, Supp_Quote_Date_Acceptance}
            If (Not (parentSupplierRowByFK_Supplier_Quote_Supplier) Is Nothing) Then
                columnValuesArray(1) = parentSupplierRowByFK_Supplier_Quote_Supplier(0)
            End If
            rowSupplier_QuoteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSupplier_QuoteRow)
            Return rowSupplier_QuoteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySupp_Quote_Reference_ID(ByVal Supp_Quote_Reference_ID As Integer) As Supplier_QuoteRow
            Return CType(Me.Rows.Find(New Object() {Supp_Quote_Reference_ID}),Supplier_QuoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Supplier_QuoteDataTable = CType(MyBase.Clone,Supplier_QuoteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Supplier_QuoteDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSupp_Quote_Reference_ID = MyBase.Columns("Supp_Quote_Reference_ID")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnSupp_Quote_Total_Price = MyBase.Columns("Supp_Quote_Total_Price")
            Me.columnSupp_Quote_Date_Recieved = MyBase.Columns("Supp_Quote_Date_Recieved")
            Me.columnSupp_Quote_Acceptance_Status = MyBase.Columns("Supp_Quote_Acceptance_Status")
            Me.columnSupp_Quote_Date_Acceptance = MyBase.Columns("Supp_Quote_Date_Acceptance")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSupp_Quote_Reference_ID = New Global.System.Data.DataColumn("Supp_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Reference_ID)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnSupp_Quote_Total_Price = New Global.System.Data.DataColumn("Supp_Quote_Total_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Total_Price)
            Me.columnSupp_Quote_Date_Recieved = New Global.System.Data.DataColumn("Supp_Quote_Date_Recieved", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Date_Recieved)
            Me.columnSupp_Quote_Acceptance_Status = New Global.System.Data.DataColumn("Supp_Quote_Acceptance_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Acceptance_Status)
            Me.columnSupp_Quote_Date_Acceptance = New Global.System.Data.DataColumn("Supp_Quote_Date_Acceptance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Date_Acceptance)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSupp_Quote_Reference_ID}, true))
            Me.columnSupp_Quote_Reference_ID.AutoIncrement = true
            Me.columnSupp_Quote_Reference_ID.AutoIncrementSeed = -1
            Me.columnSupp_Quote_Reference_ID.AutoIncrementStep = -1
            Me.columnSupp_Quote_Reference_ID.AllowDBNull = false
            Me.columnSupp_Quote_Reference_ID.ReadOnly = true
            Me.columnSupp_Quote_Reference_ID.Unique = true
            Me.columnSupplier_ID.AllowDBNull = false
            Me.columnSupp_Quote_Total_Price.AllowDBNull = false
            Me.columnSupp_Quote_Date_Recieved.AllowDBNull = false
            Me.columnSupp_Quote_Acceptance_Status.AllowDBNull = false
            Me.columnSupp_Quote_Acceptance_Status.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSupplier_QuoteRow() As Supplier_QuoteRow
            Return CType(Me.NewRow,Supplier_QuoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Supplier_QuoteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Supplier_QuoteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Supplier_QuoteRowChangedEvent) Is Nothing) Then
                RaiseEvent Supplier_QuoteRowChanged(Me, New Supplier_QuoteRowChangeEvent(CType(e.Row,Supplier_QuoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Supplier_QuoteRowChangingEvent) Is Nothing) Then
                RaiseEvent Supplier_QuoteRowChanging(Me, New Supplier_QuoteRowChangeEvent(CType(e.Row,Supplier_QuoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Supplier_QuoteRowDeletedEvent) Is Nothing) Then
                RaiseEvent Supplier_QuoteRowDeleted(Me, New Supplier_QuoteRowChangeEvent(CType(e.Row,Supplier_QuoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Supplier_QuoteRowDeletingEvent) Is Nothing) Then
                RaiseEvent Supplier_QuoteRowDeleting(Me, New Supplier_QuoteRowChangeEvent(CType(e.Row,Supplier_QuoteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSupplier_QuoteRow(ByVal row As Supplier_QuoteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Supplier_QuoteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Supplier_Quote_Line_ItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of Supplier_Quote_Line_ItemRow)
        
        Private columnSupp_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnProduct_ID As Global.System.Data.DataColumn
        
        Private columnSupp_Line_Item_Cost_Price As Global.System.Data.DataColumn
        
        Private columnSupp_Line_Item_Quantity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Supplier_Quote_Line_Item"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Line_Item_Cost_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Line_Item_Cost_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Line_Item_QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Line_Item_Quantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Supplier_Quote_Line_ItemRow
            Get
                Return CType(Me.Rows(index),Supplier_Quote_Line_ItemRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Supplier_Quote_Line_ItemRowChanging As Supplier_Quote_Line_ItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Supplier_Quote_Line_ItemRowChanged As Supplier_Quote_Line_ItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Supplier_Quote_Line_ItemRowDeleting As Supplier_Quote_Line_ItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event Supplier_Quote_Line_ItemRowDeleted As Supplier_Quote_Line_ItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSupplier_Quote_Line_ItemRow(ByVal row As Supplier_Quote_Line_ItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSupplier_Quote_Line_ItemRow(ByVal parentSupplier_QuoteRowByFK_Supplier_Quote_Line_Item_Supplier_Quote As Supplier_QuoteRow, ByVal parentProductRowByFK_Supplier_Quote_Line_Item_Product As ProductRow, ByVal Supp_Line_Item_Cost_Price As Decimal, ByVal Supp_Line_Item_Quantity As Integer) As Supplier_Quote_Line_ItemRow
            Dim rowSupplier_Quote_Line_ItemRow As Supplier_Quote_Line_ItemRow = CType(Me.NewRow,Supplier_Quote_Line_ItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Supp_Line_Item_Cost_Price, Supp_Line_Item_Quantity}
            If (Not (parentSupplier_QuoteRowByFK_Supplier_Quote_Line_Item_Supplier_Quote) Is Nothing) Then
                columnValuesArray(0) = parentSupplier_QuoteRowByFK_Supplier_Quote_Line_Item_Supplier_Quote(0)
            End If
            If (Not (parentProductRowByFK_Supplier_Quote_Line_Item_Product) Is Nothing) Then
                columnValuesArray(1) = parentProductRowByFK_Supplier_Quote_Line_Item_Product(0)
            End If
            rowSupplier_Quote_Line_ItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSupplier_Quote_Line_ItemRow)
            Return rowSupplier_Quote_Line_ItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySupp_Quote_Reference_IDProduct_ID(ByVal Supp_Quote_Reference_ID As Integer, ByVal Product_ID As Integer) As Supplier_Quote_Line_ItemRow
            Return CType(Me.Rows.Find(New Object() {Supp_Quote_Reference_ID, Product_ID}),Supplier_Quote_Line_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Supplier_Quote_Line_ItemDataTable = CType(MyBase.Clone,Supplier_Quote_Line_ItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Supplier_Quote_Line_ItemDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSupp_Quote_Reference_ID = MyBase.Columns("Supp_Quote_Reference_ID")
            Me.columnProduct_ID = MyBase.Columns("Product_ID")
            Me.columnSupp_Line_Item_Cost_Price = MyBase.Columns("Supp_Line_Item_Cost_Price")
            Me.columnSupp_Line_Item_Quantity = MyBase.Columns("Supp_Line_Item_Quantity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSupp_Quote_Reference_ID = New Global.System.Data.DataColumn("Supp_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Reference_ID)
            Me.columnProduct_ID = New Global.System.Data.DataColumn("Product_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_ID)
            Me.columnSupp_Line_Item_Cost_Price = New Global.System.Data.DataColumn("Supp_Line_Item_Cost_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Line_Item_Cost_Price)
            Me.columnSupp_Line_Item_Quantity = New Global.System.Data.DataColumn("Supp_Line_Item_Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Line_Item_Quantity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSupp_Quote_Reference_ID, Me.columnProduct_ID}, true))
            Me.columnSupp_Quote_Reference_ID.AllowDBNull = false
            Me.columnProduct_ID.AllowDBNull = false
            Me.columnSupp_Line_Item_Cost_Price.AllowDBNull = false
            Me.columnSupp_Line_Item_Quantity.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSupplier_Quote_Line_ItemRow() As Supplier_Quote_Line_ItemRow
            Return CType(Me.NewRow,Supplier_Quote_Line_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Supplier_Quote_Line_ItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Supplier_Quote_Line_ItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Supplier_Quote_Line_ItemRowChangedEvent) Is Nothing) Then
                RaiseEvent Supplier_Quote_Line_ItemRowChanged(Me, New Supplier_Quote_Line_ItemRowChangeEvent(CType(e.Row,Supplier_Quote_Line_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Supplier_Quote_Line_ItemRowChangingEvent) Is Nothing) Then
                RaiseEvent Supplier_Quote_Line_ItemRowChanging(Me, New Supplier_Quote_Line_ItemRowChangeEvent(CType(e.Row,Supplier_Quote_Line_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Supplier_Quote_Line_ItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent Supplier_Quote_Line_ItemRowDeleted(Me, New Supplier_Quote_Line_ItemRowChangeEvent(CType(e.Row,Supplier_Quote_Line_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Supplier_Quote_Line_ItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent Supplier_Quote_Line_ItemRowDeleting(Me, New Supplier_Quote_Line_ItemRowChangeEvent(CType(e.Row,Supplier_Quote_Line_ItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSupplier_Quote_Line_ItemRow(ByVal row As Supplier_Quote_Line_ItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Supplier_Quote_Line_ItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SuppLineItemJoinProductDataTable
        Inherits Global.System.Data.TypedTableBase(Of SuppLineItemJoinProductRow)
        
        Private columnProduct_ID As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnSupp_Line_Item_Cost_Price As Global.System.Data.DataColumn
        
        Private columnSupp_Line_Item_Quantity As Global.System.Data.DataColumn
        
        Private columnProduct_Name As Global.System.Data.DataColumn
        
        Private columnProduct_Brand As Global.System.Data.DataColumn
        
        Private columnProduct_Description As Global.System.Data.DataColumn
        
        Private columnProduct_Active_Status As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SuppLineItemJoinProduct"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Line_Item_Cost_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Line_Item_Cost_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Line_Item_QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Line_Item_Quantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_BrandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Brand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_Active_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Active_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SuppLineItemJoinProductRow
            Get
                Return CType(Me.Rows(index),SuppLineItemJoinProductRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SuppLineItemJoinProductRowChanging As SuppLineItemJoinProductRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SuppLineItemJoinProductRowChanged As SuppLineItemJoinProductRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SuppLineItemJoinProductRowDeleting As SuppLineItemJoinProductRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SuppLineItemJoinProductRowDeleted As SuppLineItemJoinProductRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSuppLineItemJoinProductRow(ByVal row As SuppLineItemJoinProductRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSuppLineItemJoinProductRow(ByVal Product_ID As Integer, ByVal Supp_Quote_Reference_ID As Integer, ByVal Supp_Line_Item_Cost_Price As Decimal, ByVal Supp_Line_Item_Quantity As Integer, ByVal Product_Name As String, ByVal Product_Brand As String, ByVal Product_Description As String, ByVal Product_Active_Status As String) As SuppLineItemJoinProductRow
            Dim rowSuppLineItemJoinProductRow As SuppLineItemJoinProductRow = CType(Me.NewRow,SuppLineItemJoinProductRow)
            Dim columnValuesArray() As Object = New Object() {Product_ID, Supp_Quote_Reference_ID, Supp_Line_Item_Cost_Price, Supp_Line_Item_Quantity, Product_Name, Product_Brand, Product_Description, Product_Active_Status}
            rowSuppLineItemJoinProductRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSuppLineItemJoinProductRow)
            Return rowSuppLineItemJoinProductRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProduct_IDSupp_Quote_Reference_ID(ByVal Product_ID As Integer, ByVal Supp_Quote_Reference_ID As Integer) As SuppLineItemJoinProductRow
            Return CType(Me.Rows.Find(New Object() {Product_ID, Supp_Quote_Reference_ID}),SuppLineItemJoinProductRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SuppLineItemJoinProductDataTable = CType(MyBase.Clone,SuppLineItemJoinProductDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SuppLineItemJoinProductDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProduct_ID = MyBase.Columns("Product_ID")
            Me.columnSupp_Quote_Reference_ID = MyBase.Columns("Supp_Quote_Reference_ID")
            Me.columnSupp_Line_Item_Cost_Price = MyBase.Columns("Supp_Line_Item_Cost_Price")
            Me.columnSupp_Line_Item_Quantity = MyBase.Columns("Supp_Line_Item_Quantity")
            Me.columnProduct_Name = MyBase.Columns("Product_Name")
            Me.columnProduct_Brand = MyBase.Columns("Product_Brand")
            Me.columnProduct_Description = MyBase.Columns("Product_Description")
            Me.columnProduct_Active_Status = MyBase.Columns("Product_Active_Status")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProduct_ID = New Global.System.Data.DataColumn("Product_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_ID)
            Me.columnSupp_Quote_Reference_ID = New Global.System.Data.DataColumn("Supp_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Reference_ID)
            Me.columnSupp_Line_Item_Cost_Price = New Global.System.Data.DataColumn("Supp_Line_Item_Cost_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Line_Item_Cost_Price)
            Me.columnSupp_Line_Item_Quantity = New Global.System.Data.DataColumn("Supp_Line_Item_Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Line_Item_Quantity)
            Me.columnProduct_Name = New Global.System.Data.DataColumn("Product_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Name)
            Me.columnProduct_Brand = New Global.System.Data.DataColumn("Product_Brand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Brand)
            Me.columnProduct_Description = New Global.System.Data.DataColumn("Product_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Description)
            Me.columnProduct_Active_Status = New Global.System.Data.DataColumn("Product_Active_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Active_Status)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProduct_ID, Me.columnSupp_Quote_Reference_ID}, true))
            Me.columnProduct_ID.AllowDBNull = false
            Me.columnSupp_Quote_Reference_ID.AllowDBNull = false
            Me.columnSupp_Line_Item_Cost_Price.AllowDBNull = false
            Me.columnSupp_Line_Item_Quantity.AllowDBNull = false
            Me.columnProduct_Name.AllowDBNull = false
            Me.columnProduct_Name.MaxLength = 30
            Me.columnProduct_Brand.AllowDBNull = false
            Me.columnProduct_Brand.MaxLength = 30
            Me.columnProduct_Description.AllowDBNull = false
            Me.columnProduct_Description.MaxLength = 2147483647
            Me.columnProduct_Active_Status.AllowDBNull = false
            Me.columnProduct_Active_Status.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSuppLineItemJoinProductRow() As SuppLineItemJoinProductRow
            Return CType(Me.NewRow,SuppLineItemJoinProductRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SuppLineItemJoinProductRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SuppLineItemJoinProductRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SuppLineItemJoinProductRowChangedEvent) Is Nothing) Then
                RaiseEvent SuppLineItemJoinProductRowChanged(Me, New SuppLineItemJoinProductRowChangeEvent(CType(e.Row,SuppLineItemJoinProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SuppLineItemJoinProductRowChangingEvent) Is Nothing) Then
                RaiseEvent SuppLineItemJoinProductRowChanging(Me, New SuppLineItemJoinProductRowChangeEvent(CType(e.Row,SuppLineItemJoinProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SuppLineItemJoinProductRowDeletedEvent) Is Nothing) Then
                RaiseEvent SuppLineItemJoinProductRowDeleted(Me, New SuppLineItemJoinProductRowChangeEvent(CType(e.Row,SuppLineItemJoinProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SuppLineItemJoinProductRowDeletingEvent) Is Nothing) Then
                RaiseEvent SuppLineItemJoinProductRowDeleting(Me, New SuppLineItemJoinProductRowChangeEvent(CType(e.Row,SuppLineItemJoinProductRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSuppLineItemJoinProductRow(ByVal row As SuppLineItemJoinProductRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SuppLineItemJoinProductDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SupplierQuoteJoinSupplierDataTable
        Inherits Global.System.Data.TypedTableBase(Of SupplierQuoteJoinSupplierRow)
        
        Private columnSupp_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Total_Price As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Date_Recieved As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Acceptance_Status As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Date_Acceptance As Global.System.Data.DataColumn
        
        Private columnSupplier_Name As Global.System.Data.DataColumn
        
        Private columnSupplier_Phone_No As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_FName As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_SName As Global.System.Data.DataColumn
        
        Private columnSupplier_Email As Global.System.Data.DataColumn
        
        Private columnSupplier_Active_Status As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_Phone_No As Global.System.Data.DataColumn
        
        Private columnSupplier_Rep_Email As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SupplierQuoteJoinSupplier"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Total_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Total_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Date_RecievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Date_Recieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Acceptance_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Acceptance_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Date_AcceptanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Date_Acceptance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_FNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_FName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_SNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_SName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Active_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Active_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_Phone_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_Phone_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_Rep_EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Rep_Email
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SupplierQuoteJoinSupplierRow
            Get
                Return CType(Me.Rows(index),SupplierQuoteJoinSupplierRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SupplierQuoteJoinSupplierRowChanging As SupplierQuoteJoinSupplierRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SupplierQuoteJoinSupplierRowChanged As SupplierQuoteJoinSupplierRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SupplierQuoteJoinSupplierRowDeleting As SupplierQuoteJoinSupplierRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SupplierQuoteJoinSupplierRowDeleted As SupplierQuoteJoinSupplierRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSupplierQuoteJoinSupplierRow(ByVal row As SupplierQuoteJoinSupplierRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSupplierQuoteJoinSupplierRow(ByVal Supplier_ID As Integer, ByVal Supp_Quote_Total_Price As Decimal, ByVal Supp_Quote_Date_Recieved As Date, ByVal Supp_Quote_Acceptance_Status As String, ByVal Supp_Quote_Date_Acceptance As Date, ByVal Supplier_Name As String, ByVal Supplier_Phone_No As String, ByVal Supplier_Rep_FName As String, ByVal Supplier_Rep_SName As String, ByVal Supplier_Email As String, ByVal Supplier_Active_Status As String, ByVal Supplier_Rep_Phone_No As String, ByVal Supplier_Rep_Email As String) As SupplierQuoteJoinSupplierRow
            Dim rowSupplierQuoteJoinSupplierRow As SupplierQuoteJoinSupplierRow = CType(Me.NewRow,SupplierQuoteJoinSupplierRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Supplier_ID, Supp_Quote_Total_Price, Supp_Quote_Date_Recieved, Supp_Quote_Acceptance_Status, Supp_Quote_Date_Acceptance, Supplier_Name, Supplier_Phone_No, Supplier_Rep_FName, Supplier_Rep_SName, Supplier_Email, Supplier_Active_Status, Supplier_Rep_Phone_No, Supplier_Rep_Email}
            rowSupplierQuoteJoinSupplierRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSupplierQuoteJoinSupplierRow)
            Return rowSupplierQuoteJoinSupplierRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySupp_Quote_Reference_ID(ByVal Supp_Quote_Reference_ID As Integer) As SupplierQuoteJoinSupplierRow
            Return CType(Me.Rows.Find(New Object() {Supp_Quote_Reference_ID}),SupplierQuoteJoinSupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SupplierQuoteJoinSupplierDataTable = CType(MyBase.Clone,SupplierQuoteJoinSupplierDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SupplierQuoteJoinSupplierDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSupp_Quote_Reference_ID = MyBase.Columns("Supp_Quote_Reference_ID")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnSupp_Quote_Total_Price = MyBase.Columns("Supp_Quote_Total_Price")
            Me.columnSupp_Quote_Date_Recieved = MyBase.Columns("Supp_Quote_Date_Recieved")
            Me.columnSupp_Quote_Acceptance_Status = MyBase.Columns("Supp_Quote_Acceptance_Status")
            Me.columnSupp_Quote_Date_Acceptance = MyBase.Columns("Supp_Quote_Date_Acceptance")
            Me.columnSupplier_Name = MyBase.Columns("Supplier_Name")
            Me.columnSupplier_Phone_No = MyBase.Columns("Supplier_Phone_No")
            Me.columnSupplier_Rep_FName = MyBase.Columns("Supplier_Rep_FName")
            Me.columnSupplier_Rep_SName = MyBase.Columns("Supplier_Rep_SName")
            Me.columnSupplier_Email = MyBase.Columns("Supplier_Email")
            Me.columnSupplier_Active_Status = MyBase.Columns("Supplier_Active_Status")
            Me.columnSupplier_Rep_Phone_No = MyBase.Columns("Supplier_Rep_Phone_No")
            Me.columnSupplier_Rep_Email = MyBase.Columns("Supplier_Rep_Email")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSupp_Quote_Reference_ID = New Global.System.Data.DataColumn("Supp_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Reference_ID)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnSupp_Quote_Total_Price = New Global.System.Data.DataColumn("Supp_Quote_Total_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Total_Price)
            Me.columnSupp_Quote_Date_Recieved = New Global.System.Data.DataColumn("Supp_Quote_Date_Recieved", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Date_Recieved)
            Me.columnSupp_Quote_Acceptance_Status = New Global.System.Data.DataColumn("Supp_Quote_Acceptance_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Acceptance_Status)
            Me.columnSupp_Quote_Date_Acceptance = New Global.System.Data.DataColumn("Supp_Quote_Date_Acceptance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Date_Acceptance)
            Me.columnSupplier_Name = New Global.System.Data.DataColumn("Supplier_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Name)
            Me.columnSupplier_Phone_No = New Global.System.Data.DataColumn("Supplier_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Phone_No)
            Me.columnSupplier_Rep_FName = New Global.System.Data.DataColumn("Supplier_Rep_FName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_FName)
            Me.columnSupplier_Rep_SName = New Global.System.Data.DataColumn("Supplier_Rep_SName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_SName)
            Me.columnSupplier_Email = New Global.System.Data.DataColumn("Supplier_Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Email)
            Me.columnSupplier_Active_Status = New Global.System.Data.DataColumn("Supplier_Active_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Active_Status)
            Me.columnSupplier_Rep_Phone_No = New Global.System.Data.DataColumn("Supplier_Rep_Phone_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_Phone_No)
            Me.columnSupplier_Rep_Email = New Global.System.Data.DataColumn("Supplier_Rep_Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Rep_Email)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSupp_Quote_Reference_ID}, true))
            Me.columnSupp_Quote_Reference_ID.AutoIncrement = true
            Me.columnSupp_Quote_Reference_ID.AutoIncrementSeed = -1
            Me.columnSupp_Quote_Reference_ID.AutoIncrementStep = -1
            Me.columnSupp_Quote_Reference_ID.AllowDBNull = false
            Me.columnSupp_Quote_Reference_ID.ReadOnly = true
            Me.columnSupp_Quote_Reference_ID.Unique = true
            Me.columnSupplier_ID.AllowDBNull = false
            Me.columnSupp_Quote_Total_Price.AllowDBNull = false
            Me.columnSupp_Quote_Date_Recieved.AllowDBNull = false
            Me.columnSupp_Quote_Acceptance_Status.AllowDBNull = false
            Me.columnSupp_Quote_Acceptance_Status.MaxLength = 1
            Me.columnSupplier_Name.AllowDBNull = false
            Me.columnSupplier_Name.MaxLength = 50
            Me.columnSupplier_Phone_No.AllowDBNull = false
            Me.columnSupplier_Phone_No.MaxLength = 12
            Me.columnSupplier_Rep_FName.AllowDBNull = false
            Me.columnSupplier_Rep_FName.MaxLength = 20
            Me.columnSupplier_Rep_SName.AllowDBNull = false
            Me.columnSupplier_Rep_SName.MaxLength = 20
            Me.columnSupplier_Email.AllowDBNull = false
            Me.columnSupplier_Email.MaxLength = 50
            Me.columnSupplier_Active_Status.AllowDBNull = false
            Me.columnSupplier_Active_Status.MaxLength = 1
            Me.columnSupplier_Rep_Phone_No.AllowDBNull = false
            Me.columnSupplier_Rep_Phone_No.MaxLength = 12
            Me.columnSupplier_Rep_Email.AllowDBNull = false
            Me.columnSupplier_Rep_Email.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSupplierQuoteJoinSupplierRow() As SupplierQuoteJoinSupplierRow
            Return CType(Me.NewRow,SupplierQuoteJoinSupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SupplierQuoteJoinSupplierRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SupplierQuoteJoinSupplierRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SupplierQuoteJoinSupplierRowChangedEvent) Is Nothing) Then
                RaiseEvent SupplierQuoteJoinSupplierRowChanged(Me, New SupplierQuoteJoinSupplierRowChangeEvent(CType(e.Row,SupplierQuoteJoinSupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SupplierQuoteJoinSupplierRowChangingEvent) Is Nothing) Then
                RaiseEvent SupplierQuoteJoinSupplierRowChanging(Me, New SupplierQuoteJoinSupplierRowChangeEvent(CType(e.Row,SupplierQuoteJoinSupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SupplierQuoteJoinSupplierRowDeletedEvent) Is Nothing) Then
                RaiseEvent SupplierQuoteJoinSupplierRowDeleted(Me, New SupplierQuoteJoinSupplierRowChangeEvent(CType(e.Row,SupplierQuoteJoinSupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SupplierQuoteJoinSupplierRowDeletingEvent) Is Nothing) Then
                RaiseEvent SupplierQuoteJoinSupplierRowDeleting(Me, New SupplierQuoteJoinSupplierRowChangeEvent(CType(e.Row,SupplierQuoteJoinSupplierRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSupplierQuoteJoinSupplierRow(ByVal row As SupplierQuoteJoinSupplierRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SupplierQuoteJoinSupplierDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomerQuoteJoinCustomerDataTable
        Inherits Global.System.Data.TypedTableBase(Of CustomerQuoteJoinCustomerRow)
        
        Private columnCust_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnCustomer_ID As Global.System.Data.DataColumn
        
        Private columnEmployee_ID As Global.System.Data.DataColumn
        
        Private columnCust__Quote_Total_Price As Global.System.Data.DataColumn
        
        Private columnCust_Quote_Date_Issued As Global.System.Data.DataColumn
        
        Private columnCust_Quote_Acceptance_Status As Global.System.Data.DataColumn
        
        Private columnCust_Quote_Date_Accepted As Global.System.Data.DataColumn
        
        Private columnCust_FName As Global.System.Data.DataColumn
        
        Private columnCust_SName As Global.System.Data.DataColumn
        
        Private columnEmployee_FName As Global.System.Data.DataColumn
        
        Private columnEmployee_SName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CustomerQuoteJoinCustomer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Customer_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomer_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust__Quote_Total_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust__Quote_Total_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Date_IssuedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Date_Issued
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Acceptance_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Acceptance_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Date_AcceptedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Date_Accepted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_FNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_FName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_SNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_SName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_FNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_FName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Employee_SNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmployee_SName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerQuoteJoinCustomerRow
            Get
                Return CType(Me.Rows(index),CustomerQuoteJoinCustomerRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustomerQuoteJoinCustomerRowChanging As CustomerQuoteJoinCustomerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustomerQuoteJoinCustomerRowChanged As CustomerQuoteJoinCustomerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustomerQuoteJoinCustomerRowDeleting As CustomerQuoteJoinCustomerRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustomerQuoteJoinCustomerRowDeleted As CustomerQuoteJoinCustomerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCustomerQuoteJoinCustomerRow(ByVal row As CustomerQuoteJoinCustomerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCustomerQuoteJoinCustomerRow(ByVal Cust_Quote_Reference_ID As Integer, ByVal Customer_ID As Integer, ByVal Employee_ID As Integer, ByVal Cust__Quote_Total_Price As Decimal, ByVal Cust_Quote_Date_Issued As Date, ByVal Cust_Quote_Acceptance_Status As String, ByVal Cust_Quote_Date_Accepted As Date, ByVal Cust_FName As String, ByVal Cust_SName As String, ByVal Employee_FName As String, ByVal Employee_SName As String) As CustomerQuoteJoinCustomerRow
            Dim rowCustomerQuoteJoinCustomerRow As CustomerQuoteJoinCustomerRow = CType(Me.NewRow,CustomerQuoteJoinCustomerRow)
            Dim columnValuesArray() As Object = New Object() {Cust_Quote_Reference_ID, Customer_ID, Employee_ID, Cust__Quote_Total_Price, Cust_Quote_Date_Issued, Cust_Quote_Acceptance_Status, Cust_Quote_Date_Accepted, Cust_FName, Cust_SName, Employee_FName, Employee_SName}
            rowCustomerQuoteJoinCustomerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustomerQuoteJoinCustomerRow)
            Return rowCustomerQuoteJoinCustomerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCust_Quote_Reference_ID(ByVal Cust_Quote_Reference_ID As Integer) As CustomerQuoteJoinCustomerRow
            Return CType(Me.Rows.Find(New Object() {Cust_Quote_Reference_ID}),CustomerQuoteJoinCustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustomerQuoteJoinCustomerDataTable = CType(MyBase.Clone,CustomerQuoteJoinCustomerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustomerQuoteJoinCustomerDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCust_Quote_Reference_ID = MyBase.Columns("Cust_Quote_Reference_ID")
            Me.columnCustomer_ID = MyBase.Columns("Customer_ID")
            Me.columnEmployee_ID = MyBase.Columns("Employee_ID")
            Me.columnCust__Quote_Total_Price = MyBase.Columns("Cust__Quote_Total_Price")
            Me.columnCust_Quote_Date_Issued = MyBase.Columns("Cust_Quote_Date_Issued")
            Me.columnCust_Quote_Acceptance_Status = MyBase.Columns("Cust_Quote_Acceptance_Status")
            Me.columnCust_Quote_Date_Accepted = MyBase.Columns("Cust_Quote_Date_Accepted")
            Me.columnCust_FName = MyBase.Columns("Cust_FName")
            Me.columnCust_SName = MyBase.Columns("Cust_SName")
            Me.columnEmployee_FName = MyBase.Columns("Employee_FName")
            Me.columnEmployee_SName = MyBase.Columns("Employee_SName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCust_Quote_Reference_ID = New Global.System.Data.DataColumn("Cust_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Reference_ID)
            Me.columnCustomer_ID = New Global.System.Data.DataColumn("Customer_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomer_ID)
            Me.columnEmployee_ID = New Global.System.Data.DataColumn("Employee_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_ID)
            Me.columnCust__Quote_Total_Price = New Global.System.Data.DataColumn("Cust__Quote_Total_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust__Quote_Total_Price)
            Me.columnCust_Quote_Date_Issued = New Global.System.Data.DataColumn("Cust_Quote_Date_Issued", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Date_Issued)
            Me.columnCust_Quote_Acceptance_Status = New Global.System.Data.DataColumn("Cust_Quote_Acceptance_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Acceptance_Status)
            Me.columnCust_Quote_Date_Accepted = New Global.System.Data.DataColumn("Cust_Quote_Date_Accepted", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Date_Accepted)
            Me.columnCust_FName = New Global.System.Data.DataColumn("Cust_FName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_FName)
            Me.columnCust_SName = New Global.System.Data.DataColumn("Cust_SName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_SName)
            Me.columnEmployee_FName = New Global.System.Data.DataColumn("Employee_FName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_FName)
            Me.columnEmployee_SName = New Global.System.Data.DataColumn("Employee_SName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmployee_SName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCust_Quote_Reference_ID}, true))
            Me.columnCust_Quote_Reference_ID.AllowDBNull = false
            Me.columnCust_Quote_Reference_ID.Unique = true
            Me.columnCustomer_ID.AllowDBNull = false
            Me.columnEmployee_ID.AllowDBNull = false
            Me.columnCust__Quote_Total_Price.AllowDBNull = false
            Me.columnCust_Quote_Date_Issued.AllowDBNull = false
            Me.columnCust_Quote_Acceptance_Status.AllowDBNull = false
            Me.columnCust_Quote_Acceptance_Status.MaxLength = 1
            Me.columnCust_FName.AllowDBNull = false
            Me.columnCust_FName.MaxLength = 50
            Me.columnCust_SName.AllowDBNull = false
            Me.columnCust_SName.MaxLength = 50
            Me.columnEmployee_FName.AllowDBNull = false
            Me.columnEmployee_FName.MaxLength = 20
            Me.columnEmployee_SName.AllowDBNull = false
            Me.columnEmployee_SName.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCustomerQuoteJoinCustomerRow() As CustomerQuoteJoinCustomerRow
            Return CType(Me.NewRow,CustomerQuoteJoinCustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustomerQuoteJoinCustomerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustomerQuoteJoinCustomerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerQuoteJoinCustomerRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerQuoteJoinCustomerRowChanged(Me, New CustomerQuoteJoinCustomerRowChangeEvent(CType(e.Row,CustomerQuoteJoinCustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerQuoteJoinCustomerRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerQuoteJoinCustomerRowChanging(Me, New CustomerQuoteJoinCustomerRowChangeEvent(CType(e.Row,CustomerQuoteJoinCustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerQuoteJoinCustomerRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerQuoteJoinCustomerRowDeleted(Me, New CustomerQuoteJoinCustomerRowChangeEvent(CType(e.Row,CustomerQuoteJoinCustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerQuoteJoinCustomerRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerQuoteJoinCustomerRowDeleting(Me, New CustomerQuoteJoinCustomerRowChangeEvent(CType(e.Row,CustomerQuoteJoinCustomerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCustomerQuoteJoinCustomerRow(ByVal row As CustomerQuoteJoinCustomerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomerQuoteJoinCustomerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustLineItemJoinProductsDataTable
        Inherits Global.System.Data.TypedTableBase(Of CustLineItemJoinProductsRow)
        
        Private columnProduct_ID As Global.System.Data.DataColumn
        
        Private columnCust_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Cost_Price As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Sale_incl_VAT As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Sale_excl_VAT As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Markup_Percentage As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Discount_Percentage As Global.System.Data.DataColumn
        
        Private columnCust_Line_Item_Quantity As Global.System.Data.DataColumn
        
        Private columnProduct_Name As Global.System.Data.DataColumn
        
        Private columnProduct_Brand As Global.System.Data.DataColumn
        
        Private columnProduct_Description As Global.System.Data.DataColumn
        
        Private columnProduct_Active_Status As Global.System.Data.DataColumn
        
        Private columnSupplier_Name As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CustLineItemJoinProducts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Cost_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Cost_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Sale_incl_VATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Sale_incl_VAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Sale_excl_VATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Sale_excl_VAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Markup_PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Markup_Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_Discount_PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Discount_Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Cust_Line_Item_QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCust_Line_Item_Quantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_BrandColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Brand
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_Active_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Active_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustLineItemJoinProductsRow
            Get
                Return CType(Me.Rows(index),CustLineItemJoinProductsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustLineItemJoinProductsRowChanging As CustLineItemJoinProductsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustLineItemJoinProductsRowChanged As CustLineItemJoinProductsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustLineItemJoinProductsRowDeleting As CustLineItemJoinProductsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event CustLineItemJoinProductsRowDeleted As CustLineItemJoinProductsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddCustLineItemJoinProductsRow(ByVal row As CustLineItemJoinProductsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddCustLineItemJoinProductsRow(ByVal parentProductRowByFK_Customer_Quote_Line_Item_Product2 As ProductRow, ByVal parentCustomer_QuoteRowByFK_Customer_Quote_Line_Item_Customer_Quote1 As Customer_QuoteRow, ByVal parentSupplierRowByFK_Customer_Quote_Line_Item_Supplier2 As SupplierRow, ByVal Cust_Line_Item_Cost_Price As Decimal, ByVal Cust_Line_Item_Sale_incl_VAT As Decimal, ByVal Cust_Line_Item_Sale_excl_VAT As Decimal, ByVal Cust_Line_Item_Markup_Percentage As Decimal, ByVal Cust_Line_Item_Discount_Percentage As Decimal, ByVal Cust_Line_Item_Quantity As Integer, ByVal Product_Name As String, ByVal Product_Brand As String, ByVal Product_Description As String, ByVal Product_Active_Status As String, ByVal Supplier_Name As String) As CustLineItemJoinProductsRow
            Dim rowCustLineItemJoinProductsRow As CustLineItemJoinProductsRow = CType(Me.NewRow,CustLineItemJoinProductsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, Cust_Line_Item_Cost_Price, Cust_Line_Item_Sale_incl_VAT, Cust_Line_Item_Sale_excl_VAT, Cust_Line_Item_Markup_Percentage, Cust_Line_Item_Discount_Percentage, Cust_Line_Item_Quantity, Product_Name, Product_Brand, Product_Description, Product_Active_Status, Supplier_Name}
            If (Not (parentProductRowByFK_Customer_Quote_Line_Item_Product2) Is Nothing) Then
                columnValuesArray(0) = parentProductRowByFK_Customer_Quote_Line_Item_Product2(0)
            End If
            If (Not (parentCustomer_QuoteRowByFK_Customer_Quote_Line_Item_Customer_Quote1) Is Nothing) Then
                columnValuesArray(1) = parentCustomer_QuoteRowByFK_Customer_Quote_Line_Item_Customer_Quote1(0)
            End If
            If (Not (parentSupplierRowByFK_Customer_Quote_Line_Item_Supplier2) Is Nothing) Then
                columnValuesArray(2) = parentSupplierRowByFK_Customer_Quote_Line_Item_Supplier2(0)
            End If
            rowCustLineItemJoinProductsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustLineItemJoinProductsRow)
            Return rowCustLineItemJoinProductsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByProduct_IDCust_Quote_Reference_IDSupplier_ID(ByVal Product_ID As Integer, ByVal Cust_Quote_Reference_ID As Integer, ByVal Supplier_ID As Integer) As CustLineItemJoinProductsRow
            Return CType(Me.Rows.Find(New Object() {Product_ID, Cust_Quote_Reference_ID, Supplier_ID}),CustLineItemJoinProductsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustLineItemJoinProductsDataTable = CType(MyBase.Clone,CustLineItemJoinProductsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustLineItemJoinProductsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnProduct_ID = MyBase.Columns("Product_ID")
            Me.columnCust_Quote_Reference_ID = MyBase.Columns("Cust_Quote_Reference_ID")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnCust_Line_Item_Cost_Price = MyBase.Columns("Cust_Line_Item_Cost_Price")
            Me.columnCust_Line_Item_Sale_incl_VAT = MyBase.Columns("Cust_Line_Item_Sale_incl_VAT")
            Me.columnCust_Line_Item_Sale_excl_VAT = MyBase.Columns("Cust_Line_Item_Sale_excl_VAT")
            Me.columnCust_Line_Item_Markup_Percentage = MyBase.Columns("Cust_Line_Item_Markup_Percentage")
            Me.columnCust_Line_Item_Discount_Percentage = MyBase.Columns("Cust_Line_Item_Discount_Percentage")
            Me.columnCust_Line_Item_Quantity = MyBase.Columns("Cust_Line_Item_Quantity")
            Me.columnProduct_Name = MyBase.Columns("Product_Name")
            Me.columnProduct_Brand = MyBase.Columns("Product_Brand")
            Me.columnProduct_Description = MyBase.Columns("Product_Description")
            Me.columnProduct_Active_Status = MyBase.Columns("Product_Active_Status")
            Me.columnSupplier_Name = MyBase.Columns("Supplier_Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnProduct_ID = New Global.System.Data.DataColumn("Product_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_ID)
            Me.columnCust_Quote_Reference_ID = New Global.System.Data.DataColumn("Cust_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Quote_Reference_ID)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnCust_Line_Item_Cost_Price = New Global.System.Data.DataColumn("Cust_Line_Item_Cost_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Cost_Price)
            Me.columnCust_Line_Item_Sale_incl_VAT = New Global.System.Data.DataColumn("Cust_Line_Item_Sale_incl_VAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Sale_incl_VAT)
            Me.columnCust_Line_Item_Sale_excl_VAT = New Global.System.Data.DataColumn("Cust_Line_Item_Sale_excl_VAT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Sale_excl_VAT)
            Me.columnCust_Line_Item_Markup_Percentage = New Global.System.Data.DataColumn("Cust_Line_Item_Markup_Percentage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Markup_Percentage)
            Me.columnCust_Line_Item_Discount_Percentage = New Global.System.Data.DataColumn("Cust_Line_Item_Discount_Percentage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Discount_Percentage)
            Me.columnCust_Line_Item_Quantity = New Global.System.Data.DataColumn("Cust_Line_Item_Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCust_Line_Item_Quantity)
            Me.columnProduct_Name = New Global.System.Data.DataColumn("Product_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Name)
            Me.columnProduct_Brand = New Global.System.Data.DataColumn("Product_Brand", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Brand)
            Me.columnProduct_Description = New Global.System.Data.DataColumn("Product_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Description)
            Me.columnProduct_Active_Status = New Global.System.Data.DataColumn("Product_Active_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Active_Status)
            Me.columnSupplier_Name = New Global.System.Data.DataColumn("Supplier_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_Name)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProduct_ID, Me.columnCust_Quote_Reference_ID, Me.columnSupplier_ID}, true))
            Me.columnProduct_ID.AllowDBNull = false
            Me.columnCust_Quote_Reference_ID.AllowDBNull = false
            Me.columnSupplier_ID.AllowDBNull = false
            Me.columnCust_Line_Item_Cost_Price.AllowDBNull = false
            Me.columnCust_Line_Item_Sale_incl_VAT.AllowDBNull = false
            Me.columnCust_Line_Item_Sale_excl_VAT.AllowDBNull = false
            Me.columnCust_Line_Item_Markup_Percentage.AllowDBNull = false
            Me.columnCust_Line_Item_Discount_Percentage.AllowDBNull = false
            Me.columnCust_Line_Item_Quantity.AllowDBNull = false
            Me.columnProduct_Name.AllowDBNull = false
            Me.columnProduct_Name.MaxLength = 30
            Me.columnProduct_Brand.AllowDBNull = false
            Me.columnProduct_Brand.MaxLength = 30
            Me.columnProduct_Description.AllowDBNull = false
            Me.columnProduct_Description.MaxLength = 2147483647
            Me.columnProduct_Active_Status.AllowDBNull = false
            Me.columnProduct_Active_Status.MaxLength = 1
            Me.columnSupplier_Name.AllowDBNull = false
            Me.columnSupplier_Name.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewCustLineItemJoinProductsRow() As CustLineItemJoinProductsRow
            Return CType(Me.NewRow,CustLineItemJoinProductsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustLineItemJoinProductsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustLineItemJoinProductsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustLineItemJoinProductsRowChangedEvent) Is Nothing) Then
                RaiseEvent CustLineItemJoinProductsRowChanged(Me, New CustLineItemJoinProductsRowChangeEvent(CType(e.Row,CustLineItemJoinProductsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustLineItemJoinProductsRowChangingEvent) Is Nothing) Then
                RaiseEvent CustLineItemJoinProductsRowChanging(Me, New CustLineItemJoinProductsRowChangeEvent(CType(e.Row,CustLineItemJoinProductsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustLineItemJoinProductsRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustLineItemJoinProductsRowDeleted(Me, New CustLineItemJoinProductsRowChangeEvent(CType(e.Row,CustLineItemJoinProductsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustLineItemJoinProductsRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustLineItemJoinProductsRowDeleting(Me, New CustLineItemJoinProductsRowChangeEvent(CType(e.Row,CustLineItemJoinProductsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveCustLineItemJoinProductsRow(ByVal row As CustLineItemJoinProductsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustLineItemJoinProductsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SuppQuoteJoinSuppLineItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of SuppQuoteJoinSuppLineItemRow)
        
        Private columnSupp_Quote_Reference_ID As Global.System.Data.DataColumn
        
        Private columnSupplier_ID As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Date_Recieved As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Total_Price As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Acceptance_Status As Global.System.Data.DataColumn
        
        Private columnSupp_Quote_Date_Acceptance As Global.System.Data.DataColumn
        
        Private columnSupp_Line_Item_Cost_Price As Global.System.Data.DataColumn
        
        Private columnSupp_Line_Item_Quantity As Global.System.Data.DataColumn
        
        Private columnProduct_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SuppQuoteJoinSuppLineItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Reference_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Reference_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supplier_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupplier_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Date_RecievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Date_Recieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Total_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Total_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Acceptance_StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Acceptance_Status
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Quote_Date_AcceptanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Quote_Date_Acceptance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Line_Item_Cost_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Line_Item_Cost_Price
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Supp_Line_Item_QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupp_Line_Item_Quantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Product_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SuppQuoteJoinSuppLineItemRow
            Get
                Return CType(Me.Rows(index),SuppQuoteJoinSuppLineItemRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SuppQuoteJoinSuppLineItemRowChanging As SuppQuoteJoinSuppLineItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SuppQuoteJoinSuppLineItemRowChanged As SuppQuoteJoinSuppLineItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SuppQuoteJoinSuppLineItemRowDeleting As SuppQuoteJoinSuppLineItemRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SuppQuoteJoinSuppLineItemRowDeleted As SuppQuoteJoinSuppLineItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSuppQuoteJoinSuppLineItemRow(ByVal row As SuppQuoteJoinSuppLineItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSuppQuoteJoinSuppLineItemRow(ByVal parentSupplierRowByFK_Supplier_Quote_Supplier2 As SupplierRow, ByVal Supp_Quote_Date_Recieved As Date, ByVal Supp_Quote_Total_Price As Decimal, ByVal Supp_Quote_Acceptance_Status As String, ByVal Supp_Quote_Date_Acceptance As Date, ByVal Supp_Line_Item_Cost_Price As Decimal, ByVal Supp_Line_Item_Quantity As Integer, ByVal Product_ID As Integer) As SuppQuoteJoinSuppLineItemRow
            Dim rowSuppQuoteJoinSuppLineItemRow As SuppQuoteJoinSuppLineItemRow = CType(Me.NewRow,SuppQuoteJoinSuppLineItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Supp_Quote_Date_Recieved, Supp_Quote_Total_Price, Supp_Quote_Acceptance_Status, Supp_Quote_Date_Acceptance, Supp_Line_Item_Cost_Price, Supp_Line_Item_Quantity, Product_ID}
            If (Not (parentSupplierRowByFK_Supplier_Quote_Supplier2) Is Nothing) Then
                columnValuesArray(1) = parentSupplierRowByFK_Supplier_Quote_Supplier2(0)
            End If
            rowSuppQuoteJoinSuppLineItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSuppQuoteJoinSuppLineItemRow)
            Return rowSuppQuoteJoinSuppLineItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBySupp_Quote_Reference_ID(ByVal Supp_Quote_Reference_ID As Integer) As SuppQuoteJoinSuppLineItemRow
            Return CType(Me.Rows.Find(New Object() {Supp_Quote_Reference_ID}),SuppQuoteJoinSuppLineItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SuppQuoteJoinSuppLineItemDataTable = CType(MyBase.Clone,SuppQuoteJoinSuppLineItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SuppQuoteJoinSuppLineItemDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSupp_Quote_Reference_ID = MyBase.Columns("Supp_Quote_Reference_ID")
            Me.columnSupplier_ID = MyBase.Columns("Supplier_ID")
            Me.columnSupp_Quote_Date_Recieved = MyBase.Columns("Supp_Quote_Date_Recieved")
            Me.columnSupp_Quote_Total_Price = MyBase.Columns("Supp_Quote_Total_Price")
            Me.columnSupp_Quote_Acceptance_Status = MyBase.Columns("Supp_Quote_Acceptance_Status")
            Me.columnSupp_Quote_Date_Acceptance = MyBase.Columns("Supp_Quote_Date_Acceptance")
            Me.columnSupp_Line_Item_Cost_Price = MyBase.Columns("Supp_Line_Item_Cost_Price")
            Me.columnSupp_Line_Item_Quantity = MyBase.Columns("Supp_Line_Item_Quantity")
            Me.columnProduct_ID = MyBase.Columns("Product_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSupp_Quote_Reference_ID = New Global.System.Data.DataColumn("Supp_Quote_Reference_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Reference_ID)
            Me.columnSupplier_ID = New Global.System.Data.DataColumn("Supplier_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupplier_ID)
            Me.columnSupp_Quote_Date_Recieved = New Global.System.Data.DataColumn("Supp_Quote_Date_Recieved", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Date_Recieved)
            Me.columnSupp_Quote_Total_Price = New Global.System.Data.DataColumn("Supp_Quote_Total_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Total_Price)
            Me.columnSupp_Quote_Acceptance_Status = New Global.System.Data.DataColumn("Supp_Quote_Acceptance_Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Acceptance_Status)
            Me.columnSupp_Quote_Date_Acceptance = New Global.System.Data.DataColumn("Supp_Quote_Date_Acceptance", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Quote_Date_Acceptance)
            Me.columnSupp_Line_Item_Cost_Price = New Global.System.Data.DataColumn("Supp_Line_Item_Cost_Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Line_Item_Cost_Price)
            Me.columnSupp_Line_Item_Quantity = New Global.System.Data.DataColumn("Supp_Line_Item_Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupp_Line_Item_Quantity)
            Me.columnProduct_ID = New Global.System.Data.DataColumn("Product_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSupp_Quote_Reference_ID}, true))
            Me.columnSupp_Quote_Reference_ID.AutoIncrement = true
            Me.columnSupp_Quote_Reference_ID.AutoIncrementSeed = -1
            Me.columnSupp_Quote_Reference_ID.AutoIncrementStep = -1
            Me.columnSupp_Quote_Reference_ID.AllowDBNull = false
            Me.columnSupp_Quote_Reference_ID.ReadOnly = true
            Me.columnSupp_Quote_Reference_ID.Unique = true
            Me.columnSupplier_ID.AllowDBNull = false
            Me.columnSupp_Quote_Date_Recieved.AllowDBNull = false
            Me.columnSupp_Quote_Total_Price.AllowDBNull = false
            Me.columnSupp_Quote_Acceptance_Status.AllowDBNull = false
            Me.columnSupp_Quote_Acceptance_Status.MaxLength = 1
            Me.columnSupp_Line_Item_Cost_Price.AllowDBNull = false
            Me.columnSupp_Line_Item_Quantity.AllowDBNull = false
            Me.columnProduct_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSuppQuoteJoinSuppLineItemRow() As SuppQuoteJoinSuppLineItemRow
            Return CType(Me.NewRow,SuppQuoteJoinSuppLineItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SuppQuoteJoinSuppLineItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SuppQuoteJoinSuppLineItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SuppQuoteJoinSuppLineItemRowChangedEvent) Is Nothing) Then
                RaiseEvent SuppQuoteJoinSuppLineItemRowChanged(Me, New SuppQuoteJoinSuppLineItemRowChangeEvent(CType(e.Row,SuppQuoteJoinSuppLineItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SuppQuoteJoinSuppLineItemRowChangingEvent) Is Nothing) Then
                RaiseEvent SuppQuoteJoinSuppLineItemRowChanging(Me, New SuppQuoteJoinSuppLineItemRowChangeEvent(CType(e.Row,SuppQuoteJoinSuppLineItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SuppQuoteJoinSuppLineItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent SuppQuoteJoinSuppLineItemRowDeleted(Me, New SuppQuoteJoinSuppLineItemRowChangeEvent(CType(e.Row,SuppQuoteJoinSuppLineItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SuppQuoteJoinSuppLineItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent SuppQuoteJoinSuppLineItemRowDeleting(Me, New SuppQuoteJoinSuppLineItemRowChangeEvent(CType(e.Row,SuppQuoteJoinSuppLineItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSuppQuoteJoinSuppLineItemRow(ByVal row As SuppQuoteJoinSuppLineItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As group16DataSet = New group16DataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SuppQuoteJoinSuppLineItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CustomerRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustomer As CustomerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomer = CType(Me.Table,CustomerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Customer_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomer.Customer_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer.Customer_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_FName() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_FNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_FNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_SName() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_SNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_SNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_DOB() As Date
            Get
                Return CType(Me(Me.tableCustomer.Cust_DOBColumn),Date)
            End Get
            Set
                Me(Me.tableCustomer.Cust_DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Phone_No() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_Phone_NoColumn),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Alt_Phone_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.Cust_Alt_Phone_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_Alt_Phone_No' in table 'Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.Cust_Alt_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Email() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_EmailColumn),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Password() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.Cust_PasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_Password' in table 'Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.Cust_PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Street_Addr_1() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_Street_Addr_1Column),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_Street_Addr_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Street_Addr_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.Cust_Street_Addr_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_Street_Addr_2' in table 'Customer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.Cust_Street_Addr_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Suburb() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_SuburbColumn),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_SuburbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_City() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_CityColumn),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Province() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_ProvinceColumn),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Postal_Code() As Decimal
            Get
                Return CType(Me(Me.tableCustomer.Cust_Postal_CodeColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustomer.Cust_Postal_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Active_Status() As String
            Get
                Return CType(Me(Me.tableCustomer.Cust_Active_StatusColumn),String)
            End Get
            Set
                Me(Me.tableCustomer.Cust_Active_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCust_Alt_Phone_NoNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.Cust_Alt_Phone_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCust_Alt_Phone_NoNull()
            Me(Me.tableCustomer.Cust_Alt_Phone_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCust_PasswordNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.Cust_PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCust_PasswordNull()
            Me(Me.tableCustomer.Cust_PasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCust_Street_Addr_2Null() As Boolean
            Return Me.IsNull(Me.tableCustomer.Cust_Street_Addr_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCust_Street_Addr_2Null()
            Me(Me.tableCustomer.Cust_Street_Addr_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustomer_QuoteRows() As Customer_QuoteRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Customer") Is Nothing) Then
                Return New Customer_QuoteRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Customer")),Customer_QuoteRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Customer_QuoteRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustomer_Quote As Customer_QuoteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomer_Quote = CType(Me.Table,Customer_QuoteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomer_Quote.Cust_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer_Quote.Cust_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Customer_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomer_Quote.Customer_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer_Quote.Customer_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomer_Quote.Employee_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer_Quote.Employee_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust__Quote_Total_Price() As Decimal
            Get
                Return CType(Me(Me.tableCustomer_Quote.Cust__Quote_Total_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustomer_Quote.Cust__Quote_Total_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Date_Issued() As Date
            Get
                Return CType(Me(Me.tableCustomer_Quote.Cust_Quote_Date_IssuedColumn),Date)
            End Get
            Set
                Me(Me.tableCustomer_Quote.Cust_Quote_Date_IssuedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Acceptance_Status() As String
            Get
                Return CType(Me(Me.tableCustomer_Quote.Cust_Quote_Acceptance_StatusColumn),String)
            End Get
            Set
                Me(Me.tableCustomer_Quote.Cust_Quote_Acceptance_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Date_Accepted() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCustomer_Quote.Cust_Quote_Date_AcceptedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_Quote_Date_Accepted' in table 'Customer_Quote' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer_Quote.Cust_Quote_Date_AcceptedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CustomerRow() As CustomerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Customer")),CustomerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Customer"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EmployeeRow() As EmployeeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Employee")),EmployeeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Employee"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CustomerQuoteJoinCustomerRow() As CustomerQuoteJoinCustomerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Customer1")),CustomerQuoteJoinCustomerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Customer1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCust_Quote_Date_AcceptedNull() As Boolean
            Return Me.IsNull(Me.tableCustomer_Quote.Cust_Quote_Date_AcceptedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCust_Quote_Date_AcceptedNull()
            Me(Me.tableCustomer_Quote.Cust_Quote_Date_AcceptedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustomer_Quote_Line_ItemRows() As Customer_Quote_Line_ItemRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Customer_Quote") Is Nothing) Then
                Return New Customer_Quote_Line_ItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Customer_Quote")),Customer_Quote_Line_ItemRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustLineItemJoinProductsRows() As CustLineItemJoinProductsRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Customer_Quote1") Is Nothing) Then
                Return New CustLineItemJoinProductsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Customer_Quote1")),CustLineItemJoinProductsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Customer_Quote_Line_ItemRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustomer_Quote_Line_Item As Customer_Quote_Line_ItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomer_Quote_Line_Item = CType(Me.Table,Customer_Quote_Line_ItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Product_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Product_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Cust_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Cust_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Supplier_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Cost_Price() As Decimal
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Cost_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Cost_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Sale_incl_VAT() As Decimal
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Sale_incl_VATColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Sale_incl_VATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Sale_excl_VAT() As Decimal
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Sale_excl_VATColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Sale_excl_VATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Markup_Percentage() As Decimal
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Markup_PercentageColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Markup_PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Discount_Percentage() As Decimal
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Discount_PercentageColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_Discount_PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Quantity() As Integer
            Get
                Return CType(Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer_Quote_Line_Item.Cust_Line_Item_QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Customer_QuoteRow() As Customer_QuoteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Customer_Quote")),Customer_QuoteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Customer_Quote"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProductRow() As ProductRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Product")),ProductRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Product"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SupplierRow() As SupplierRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Supplier")),SupplierRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Supplier"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class EmployeeRow
        Inherits Global.System.Data.DataRow
        
        Private tableEmployee As EmployeeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEmployee = CType(Me.Table,EmployeeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_ID() As Integer
            Get
                Return CType(Me(Me.tableEmployee.Employee_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableEmployee.Employee_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_FName() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_FNameColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_FNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_SName() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_SNameColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_SNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_DOB() As Date
            Get
                Return CType(Me(Me.tableEmployee.Employee_DOBColumn),Date)
            End Get
            Set
                Me(Me.tableEmployee.Employee_DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Gender() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_GenderColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Phone_No() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_Phone_NoColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Alt_Phone_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee.Employee_Alt_Phone_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_Alt_Phone_No' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee.Employee_Alt_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Email() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_EmailColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Password() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_PasswordColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_SA_ID_No() As Decimal
            Get
                Return CType(Me(Me.tableEmployee.Employee_SA_ID_NoColumn),Decimal)
            End Get
            Set
                Me(Me.tableEmployee.Employee_SA_ID_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Street_Addr_1() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_Street_Addr_1Column),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_Street_Addr_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Street_Addr_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableEmployee.Employee_Street_Addr_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_Street_Addr_2' in table 'Employee' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEmployee.Employee_Street_Addr_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Suburb() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_SuburbColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_SuburbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_City() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_CityColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Province() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_ProvinceColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Postal_Code() As Decimal
            Get
                Return CType(Me(Me.tableEmployee.Employee_Postal_CodeColumn),Decimal)
            End Get
            Set
                Me(Me.tableEmployee.Employee_Postal_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Position() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_PositionColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Admin_Level() As Integer
            Get
                Return CType(Me(Me.tableEmployee.Employee_Admin_LevelColumn),Integer)
            End Get
            Set
                Me(Me.tableEmployee.Employee_Admin_LevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_Active_Status() As String
            Get
                Return CType(Me(Me.tableEmployee.Employee_Active_StatusColumn),String)
            End Get
            Set
                Me(Me.tableEmployee.Employee_Active_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEmployee_Alt_Phone_NoNull() As Boolean
            Return Me.IsNull(Me.tableEmployee.Employee_Alt_Phone_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEmployee_Alt_Phone_NoNull()
            Me(Me.tableEmployee.Employee_Alt_Phone_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEmployee_Street_Addr_2Null() As Boolean
            Return Me.IsNull(Me.tableEmployee.Employee_Street_Addr_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEmployee_Street_Addr_2Null()
            Me(Me.tableEmployee.Employee_Street_Addr_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustomer_QuoteRows() As Customer_QuoteRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Employee") Is Nothing) Then
                Return New Customer_QuoteRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Employee")),Customer_QuoteRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ProductRow
        Inherits Global.System.Data.DataRow
        
        Private tableProduct As ProductDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProduct = CType(Me.Table,ProductDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_ID() As Integer
            Get
                Return CType(Me(Me.tableProduct.Product_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProduct.Product_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Name() As String
            Get
                Return CType(Me(Me.tableProduct.Product_NameColumn),String)
            End Get
            Set
                Me(Me.tableProduct.Product_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Brand() As String
            Get
                Return CType(Me(Me.tableProduct.Product_BrandColumn),String)
            End Get
            Set
                Me(Me.tableProduct.Product_BrandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Description() As String
            Get
                Return CType(Me(Me.tableProduct.Product_DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableProduct.Product_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Active_Status() As String
            Get
                Return CType(Me(Me.tableProduct.Product_Active_StatusColumn),String)
            End Get
            Set
                Me(Me.tableProduct.Product_Active_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SuppLineItemJoinProductRow() As SuppLineItemJoinProductRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Product1")),SuppLineItemJoinProductRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Product1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustomer_Quote_Line_ItemRows() As Customer_Quote_Line_ItemRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Product") Is Nothing) Then
                Return New Customer_Quote_Line_ItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Product")),Customer_Quote_Line_ItemRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSupplier_Quote_Line_ItemRows() As Supplier_Quote_Line_ItemRow()
            If (Me.Table.ChildRelations("FK_Supplier_Quote_Line_Item_Product") Is Nothing) Then
                Return New Supplier_Quote_Line_ItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Supplier_Quote_Line_Item_Product")),Supplier_Quote_Line_ItemRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustLineItemJoinProductsRows() As CustLineItemJoinProductsRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Product2") Is Nothing) Then
                Return New CustLineItemJoinProductsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Product2")),CustLineItemJoinProductsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SupplierRow
        Inherits Global.System.Data.DataRow
        
        Private tableSupplier As SupplierDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupplier = CType(Me.Table,SupplierDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_ID() As Integer
            Get
                Return CType(Me(Me.tableSupplier.Supplier_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Name() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_NameColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Street_Addr_1() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_Street_Addr_1Column),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Street_Addr_1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Street_Addr_2() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.Supplier_Street_Addr_2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Street_Addr_2' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Street_Addr_2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Suburb() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_SuburbColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_SuburbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_City() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_CityColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Province() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_ProvinceColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_ProvinceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Postal_Code() As Decimal
            Get
                Return CType(Me(Me.tableSupplier.Supplier_Postal_CodeColumn),Decimal)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Postal_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Phone_No() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_Phone_NoColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Alt_Phone_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.Supplier_Alt_Phone_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Alt_Phone_No' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Alt_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Email() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_EmailColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Password() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.Supplier_PasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Password' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.Supplier_PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_FName() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_Rep_FNameColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Rep_FNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_SName() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_Rep_SNameColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Rep_SNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_Email() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_Rep_EmailColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Rep_EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_Phone_No() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_Rep_Phone_NoColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Rep_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_Alt_Phone_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableSupplier.Supplier_Rep_Alt_Phone_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supplier_Rep_Alt_Phone_No' in table 'Supplier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Rep_Alt_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Active_Status() As String
            Get
                Return CType(Me(Me.tableSupplier.Supplier_Active_StatusColumn),String)
            End Get
            Set
                Me(Me.tableSupplier.Supplier_Active_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SupplierQuoteJoinSupplierRow() As SupplierQuoteJoinSupplierRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Supplier1")),SupplierQuoteJoinSupplierRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Supplier1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSupplier_Street_Addr_2Null() As Boolean
            Return Me.IsNull(Me.tableSupplier.Supplier_Street_Addr_2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSupplier_Street_Addr_2Null()
            Me(Me.tableSupplier.Supplier_Street_Addr_2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSupplier_Alt_Phone_NoNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.Supplier_Alt_Phone_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSupplier_Alt_Phone_NoNull()
            Me(Me.tableSupplier.Supplier_Alt_Phone_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSupplier_PasswordNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.Supplier_PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSupplier_PasswordNull()
            Me(Me.tableSupplier.Supplier_PasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSupplier_Rep_Alt_Phone_NoNull() As Boolean
            Return Me.IsNull(Me.tableSupplier.Supplier_Rep_Alt_Phone_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSupplier_Rep_Alt_Phone_NoNull()
            Me(Me.tableSupplier.Supplier_Rep_Alt_Phone_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustomer_Quote_Line_ItemRows() As Customer_Quote_Line_ItemRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Supplier") Is Nothing) Then
                Return New Customer_Quote_Line_ItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Supplier")),Customer_Quote_Line_ItemRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSupplier_QuoteRows() As Supplier_QuoteRow()
            If (Me.Table.ChildRelations("FK_Supplier_Quote_Supplier") Is Nothing) Then
                Return New Supplier_QuoteRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Supplier_Quote_Supplier")),Supplier_QuoteRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustLineItemJoinProductsRows() As CustLineItemJoinProductsRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Supplier2") Is Nothing) Then
                Return New CustLineItemJoinProductsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Supplier2")),CustLineItemJoinProductsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSuppQuoteJoinSuppLineItemRows() As SuppQuoteJoinSuppLineItemRow()
            If (Me.Table.ChildRelations("FK_Supplier_Quote_Supplier2") Is Nothing) Then
                Return New SuppQuoteJoinSuppLineItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Supplier_Quote_Supplier2")),SuppQuoteJoinSuppLineItemRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Supplier_QuoteRow
        Inherits Global.System.Data.DataRow
        
        Private tableSupplier_Quote As Supplier_QuoteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupplier_Quote = CType(Me.Table,Supplier_QuoteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableSupplier_Quote.Supp_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSupplier_Quote.Supp_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_ID() As Integer
            Get
                Return CType(Me(Me.tableSupplier_Quote.Supplier_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSupplier_Quote.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Total_Price() As Decimal
            Get
                Return CType(Me(Me.tableSupplier_Quote.Supp_Quote_Total_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableSupplier_Quote.Supp_Quote_Total_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Date_Recieved() As Date
            Get
                Return CType(Me(Me.tableSupplier_Quote.Supp_Quote_Date_RecievedColumn),Date)
            End Get
            Set
                Me(Me.tableSupplier_Quote.Supp_Quote_Date_RecievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Acceptance_Status() As String
            Get
                Return CType(Me(Me.tableSupplier_Quote.Supp_Quote_Acceptance_StatusColumn),String)
            End Get
            Set
                Me(Me.tableSupplier_Quote.Supp_Quote_Acceptance_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Date_Acceptance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupplier_Quote.Supp_Quote_Date_AcceptanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supp_Quote_Date_Acceptance' in table 'Supplier_Quote' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplier_Quote.Supp_Quote_Date_AcceptanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SupplierRow() As SupplierRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Supplier_Quote_Supplier")),SupplierRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Supplier_Quote_Supplier"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SupplierQuoteJoinSupplierRow() As SupplierQuoteJoinSupplierRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Supplier_Quote_Supplier1")),SupplierQuoteJoinSupplierRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Supplier_Quote_Supplier1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSupp_Quote_Date_AcceptanceNull() As Boolean
            Return Me.IsNull(Me.tableSupplier_Quote.Supp_Quote_Date_AcceptanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSupp_Quote_Date_AcceptanceNull()
            Me(Me.tableSupplier_Quote.Supp_Quote_Date_AcceptanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSupplier_Quote_Line_ItemRows() As Supplier_Quote_Line_ItemRow()
            If (Me.Table.ChildRelations("FK_Supplier_Quote_Line_Item_Supplier_Quote") Is Nothing) Then
                Return New Supplier_Quote_Line_ItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Supplier_Quote_Line_Item_Supplier_Quote")),Supplier_Quote_Line_ItemRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class Supplier_Quote_Line_ItemRow
        Inherits Global.System.Data.DataRow
        
        Private tableSupplier_Quote_Line_Item As Supplier_Quote_Line_ItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupplier_Quote_Line_Item = CType(Me.Table,Supplier_Quote_Line_ItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableSupplier_Quote_Line_Item.Supp_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSupplier_Quote_Line_Item.Supp_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_ID() As Integer
            Get
                Return CType(Me(Me.tableSupplier_Quote_Line_Item.Product_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSupplier_Quote_Line_Item.Product_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Line_Item_Cost_Price() As Decimal
            Get
                Return CType(Me(Me.tableSupplier_Quote_Line_Item.Supp_Line_Item_Cost_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableSupplier_Quote_Line_Item.Supp_Line_Item_Cost_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Line_Item_Quantity() As Integer
            Get
                Return CType(Me(Me.tableSupplier_Quote_Line_Item.Supp_Line_Item_QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableSupplier_Quote_Line_Item.Supp_Line_Item_QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProductRow() As ProductRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Supplier_Quote_Line_Item_Product")),ProductRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Supplier_Quote_Line_Item_Product"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_QuoteRow() As Supplier_QuoteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Supplier_Quote_Line_Item_Supplier_Quote")),Supplier_QuoteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Supplier_Quote_Line_Item_Supplier_Quote"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SuppLineItemJoinProductRow() As SuppLineItemJoinProductRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Supplier_Quote_Line_Item_Product1")),SuppLineItemJoinProductRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Supplier_Quote_Line_Item_Product1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SuppQuoteJoinSuppLineItemRow() As SuppQuoteJoinSuppLineItemRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Supplier_Quote_Line_Item_Supplier_Quote1")),SuppQuoteJoinSuppLineItemRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Supplier_Quote_Line_Item_Supplier_Quote1"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SuppLineItemJoinProductRow
        Inherits Global.System.Data.DataRow
        
        Private tableSuppLineItemJoinProduct As SuppLineItemJoinProductDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSuppLineItemJoinProduct = CType(Me.Table,SuppLineItemJoinProductDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_ID() As Integer
            Get
                Return CType(Me(Me.tableSuppLineItemJoinProduct.Product_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSuppLineItemJoinProduct.Product_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableSuppLineItemJoinProduct.Supp_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSuppLineItemJoinProduct.Supp_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Line_Item_Cost_Price() As Decimal
            Get
                Return CType(Me(Me.tableSuppLineItemJoinProduct.Supp_Line_Item_Cost_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableSuppLineItemJoinProduct.Supp_Line_Item_Cost_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Line_Item_Quantity() As Integer
            Get
                Return CType(Me(Me.tableSuppLineItemJoinProduct.Supp_Line_Item_QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableSuppLineItemJoinProduct.Supp_Line_Item_QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Name() As String
            Get
                Return CType(Me(Me.tableSuppLineItemJoinProduct.Product_NameColumn),String)
            End Get
            Set
                Me(Me.tableSuppLineItemJoinProduct.Product_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Brand() As String
            Get
                Return CType(Me(Me.tableSuppLineItemJoinProduct.Product_BrandColumn),String)
            End Get
            Set
                Me(Me.tableSuppLineItemJoinProduct.Product_BrandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Description() As String
            Get
                Return CType(Me(Me.tableSuppLineItemJoinProduct.Product_DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableSuppLineItemJoinProduct.Product_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Active_Status() As String
            Get
                Return CType(Me(Me.tableSuppLineItemJoinProduct.Product_Active_StatusColumn),String)
            End Get
            Set
                Me(Me.tableSuppLineItemJoinProduct.Product_Active_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetProductRows() As ProductRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Product1") Is Nothing) Then
                Return New ProductRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Product1")),ProductRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSupplier_Quote_Line_ItemRows() As Supplier_Quote_Line_ItemRow()
            If (Me.Table.ChildRelations("FK_Supplier_Quote_Line_Item_Product1") Is Nothing) Then
                Return New Supplier_Quote_Line_ItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Supplier_Quote_Line_Item_Product1")),Supplier_Quote_Line_ItemRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SupplierQuoteJoinSupplierRow
        Inherits Global.System.Data.DataRow
        
        Private tableSupplierQuoteJoinSupplier As SupplierQuoteJoinSupplierDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSupplierQuoteJoinSupplier = CType(Me.Table,SupplierQuoteJoinSupplierDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_ID() As Integer
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Total_Price() As Decimal
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Total_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Total_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Date_Recieved() As Date
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Date_RecievedColumn),Date)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Date_RecievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Acceptance_Status() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Acceptance_StatusColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Acceptance_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Date_Acceptance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Date_AcceptanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supp_Quote_Date_Acceptance' in table 'SupplierQuoteJoinSupp"& _ 
                            "lier' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Date_AcceptanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Name() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_NameColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Phone_No() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Phone_NoColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_FName() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Rep_FNameColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Rep_FNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_SName() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Rep_SNameColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Rep_SNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Email() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_EmailColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Active_Status() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Active_StatusColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Active_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_Phone_No() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Rep_Phone_NoColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Rep_Phone_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Rep_Email() As String
            Get
                Return CType(Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Rep_EmailColumn),String)
            End Get
            Set
                Me(Me.tableSupplierQuoteJoinSupplier.Supplier_Rep_EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSupp_Quote_Date_AcceptanceNull() As Boolean
            Return Me.IsNull(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Date_AcceptanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSupp_Quote_Date_AcceptanceNull()
            Me(Me.tableSupplierQuoteJoinSupplier.Supp_Quote_Date_AcceptanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSupplier_QuoteRows() As Supplier_QuoteRow()
            If (Me.Table.ChildRelations("FK_Supplier_Quote_Supplier1") Is Nothing) Then
                Return New Supplier_QuoteRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Supplier_Quote_Supplier1")),Supplier_QuoteRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSupplierRows() As SupplierRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Supplier1") Is Nothing) Then
                Return New SupplierRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Line_Item_Supplier1")),SupplierRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CustomerQuoteJoinCustomerRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustomerQuoteJoinCustomer As CustomerQuoteJoinCustomerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomerQuoteJoinCustomer = CType(Me.Table,CustomerQuoteJoinCustomerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Customer_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Customer_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Customer_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_ID() As Integer
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Employee_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Employee_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust__Quote_Total_Price() As Decimal
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Cust__Quote_Total_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Cust__Quote_Total_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Date_Issued() As Date
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Date_IssuedColumn),Date)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Date_IssuedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Acceptance_Status() As String
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Acceptance_StatusColumn),String)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Acceptance_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Date_Accepted() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Date_AcceptedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cust_Quote_Date_Accepted' in table 'CustomerQuoteJoinCustom"& _ 
                            "er' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Date_AcceptedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_FName() As String
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Cust_FNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Cust_FNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_SName() As String
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Cust_SNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Cust_SNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_FName() As String
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Employee_FNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Employee_FNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Employee_SName() As String
            Get
                Return CType(Me(Me.tableCustomerQuoteJoinCustomer.Employee_SNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomerQuoteJoinCustomer.Employee_SNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCust_Quote_Date_AcceptedNull() As Boolean
            Return Me.IsNull(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Date_AcceptedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCust_Quote_Date_AcceptedNull()
            Me(Me.tableCustomerQuoteJoinCustomer.Cust_Quote_Date_AcceptedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetCustomer_QuoteRows() As Customer_QuoteRow()
            If (Me.Table.ChildRelations("FK_Customer_Quote_Customer1") Is Nothing) Then
                Return New Customer_QuoteRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Customer_Quote_Customer1")),Customer_QuoteRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CustLineItemJoinProductsRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustLineItemJoinProducts As CustLineItemJoinProductsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustLineItemJoinProducts = CType(Me.Table,CustLineItemJoinProductsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_ID() As Integer
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Product_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Product_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Cust_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Cust_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_ID() As Integer
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Supplier_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Cost_Price() As Decimal
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Cost_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Cost_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Sale_incl_VAT() As Decimal
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Sale_incl_VATColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Sale_incl_VATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Sale_excl_VAT() As Decimal
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Sale_excl_VATColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Sale_excl_VATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Markup_Percentage() As Decimal
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Markup_PercentageColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Markup_PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Discount_Percentage() As Decimal
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Discount_PercentageColumn),Decimal)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_Discount_PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Cust_Line_Item_Quantity() As Integer
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Cust_Line_Item_QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Name() As String
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Product_NameColumn),String)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Product_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Brand() As String
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Product_BrandColumn),String)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Product_BrandColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Description() As String
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Product_DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Product_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_Active_Status() As String
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Product_Active_StatusColumn),String)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Product_Active_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_Name() As String
            Get
                Return CType(Me(Me.tableCustLineItemJoinProducts.Supplier_NameColumn),String)
            End Get
            Set
                Me(Me.tableCustLineItemJoinProducts.Supplier_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Customer_QuoteRow() As Customer_QuoteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Customer_Quote1")),Customer_QuoteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Customer_Quote1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ProductRow() As ProductRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Product2")),ProductRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Product2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SupplierRow() As SupplierRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Supplier2")),SupplierRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Customer_Quote_Line_Item_Supplier2"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SuppQuoteJoinSuppLineItemRow
        Inherits Global.System.Data.DataRow
        
        Private tableSuppQuoteJoinSuppLineItem As SuppQuoteJoinSuppLineItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSuppQuoteJoinSuppLineItem = CType(Me.Table,SuppQuoteJoinSuppLineItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Reference_ID() As Integer
            Get
                Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Reference_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Reference_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supplier_ID() As Integer
            Get
                Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Supplier_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Supplier_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Date_Recieved() As Date
            Get
                Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Date_RecievedColumn),Date)
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Date_RecievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Total_Price() As Decimal
            Get
                Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Total_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Total_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Acceptance_Status() As String
            Get
                Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Acceptance_StatusColumn),String)
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Acceptance_StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Quote_Date_Acceptance() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Date_AcceptanceColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Supp_Quote_Date_Acceptance' in table 'SuppQuoteJoinSuppLine"& _ 
                            "Item' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Date_AcceptanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Line_Item_Cost_Price() As Decimal
            Get
                Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Line_Item_Cost_PriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Line_Item_Cost_PriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Supp_Line_Item_Quantity() As Integer
            Get
                Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Line_Item_QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Line_Item_QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Product_ID() As Integer
            Get
                Return CType(Me(Me.tableSuppQuoteJoinSuppLineItem.Product_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableSuppQuoteJoinSuppLineItem.Product_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SupplierRow() As SupplierRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Supplier_Quote_Supplier2")),SupplierRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Supplier_Quote_Supplier2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSupp_Quote_Date_AcceptanceNull() As Boolean
            Return Me.IsNull(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Date_AcceptanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSupp_Quote_Date_AcceptanceNull()
            Me(Me.tableSuppQuoteJoinSuppLineItem.Supp_Quote_Date_AcceptanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetSupplier_Quote_Line_ItemRows() As Supplier_Quote_Line_ItemRow()
            If (Me.Table.ChildRelations("FK_Supplier_Quote_Line_Item_Supplier_Quote1") Is Nothing) Then
                Return New Supplier_Quote_Line_ItemRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Supplier_Quote_Line_Item_Supplier_Quote1")),Supplier_Quote_Line_ItemRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CustomerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustomerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CustomerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CustomerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Customer_QuoteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Customer_QuoteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Customer_QuoteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Customer_QuoteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Customer_Quote_Line_ItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Customer_Quote_Line_ItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Customer_Quote_Line_ItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Customer_Quote_Line_ItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class EmployeeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EmployeeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As EmployeeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As EmployeeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ProductRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProductRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ProductRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ProductRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SupplierRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SupplierRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SupplierRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SupplierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Supplier_QuoteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Supplier_QuoteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Supplier_QuoteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Supplier_QuoteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class Supplier_Quote_Line_ItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Supplier_Quote_Line_ItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As Supplier_Quote_Line_ItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As Supplier_Quote_Line_ItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SuppLineItemJoinProductRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SuppLineItemJoinProductRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SuppLineItemJoinProductRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SuppLineItemJoinProductRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SupplierQuoteJoinSupplierRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SupplierQuoteJoinSupplierRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SupplierQuoteJoinSupplierRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SupplierQuoteJoinSupplierRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CustomerQuoteJoinCustomerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustomerQuoteJoinCustomerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CustomerQuoteJoinCustomerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CustomerQuoteJoinCustomerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class CustLineItemJoinProductsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustLineItemJoinProductsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As CustLineItemJoinProductsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As CustLineItemJoinProductsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SuppQuoteJoinSuppLineItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SuppQuoteJoinSuppLineItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SuppQuoteJoinSuppLineItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SuppQuoteJoinSuppLineItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace group16DataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Customer"
            tableMapping.ColumnMappings.Add("Customer_ID", "Customer_ID")
            tableMapping.ColumnMappings.Add("Cust_FName", "Cust_FName")
            tableMapping.ColumnMappings.Add("Cust_SName", "Cust_SName")
            tableMapping.ColumnMappings.Add("Cust_DOB", "Cust_DOB")
            tableMapping.ColumnMappings.Add("Cust_Phone_No", "Cust_Phone_No")
            tableMapping.ColumnMappings.Add("Cust_Alt_Phone_No", "Cust_Alt_Phone_No")
            tableMapping.ColumnMappings.Add("Cust_Email", "Cust_Email")
            tableMapping.ColumnMappings.Add("Cust_Password", "Cust_Password")
            tableMapping.ColumnMappings.Add("Cust_Street_Addr_1", "Cust_Street_Addr_1")
            tableMapping.ColumnMappings.Add("Cust_Street_Addr_2", "Cust_Street_Addr_2")
            tableMapping.ColumnMappings.Add("Cust_Suburb", "Cust_Suburb")
            tableMapping.ColumnMappings.Add("Cust_City", "Cust_City")
            tableMapping.ColumnMappings.Add("Cust_Province", "Cust_Province")
            tableMapping.ColumnMappings.Add("Cust_Postal_Code", "Cust_Postal_Code")
            tableMapping.ColumnMappings.Add("Cust_Active_Status", "Cust_Active_Status")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Customer] WHERE (([Customer_ID] = @Original_Customer_ID) AND ("& _ 
                "[Cust_FName] = @Original_Cust_FName) AND ([Cust_SName] = @Original_Cust_SName) A"& _ 
                "ND ([Cust_DOB] = @Original_Cust_DOB) AND ([Cust_Phone_No] = @Original_Cust_Phone"& _ 
                "_No) AND ((@IsNull_Cust_Alt_Phone_No = 1 AND [Cust_Alt_Phone_No] IS NULL) OR ([C"& _ 
                "ust_Alt_Phone_No] = @Original_Cust_Alt_Phone_No)) AND ([Cust_Email] = @Original_"& _ 
                "Cust_Email) AND ((@IsNull_Cust_Password = 1 AND [Cust_Password] IS NULL) OR ([Cu"& _ 
                "st_Password] = @Original_Cust_Password)) AND ([Cust_Street_Addr_1] = @Original_C"& _ 
                "ust_Street_Addr_1) AND ((@IsNull_Cust_Street_Addr_2 = 1 AND [Cust_Street_Addr_2]"& _ 
                " IS NULL) OR ([Cust_Street_Addr_2] = @Original_Cust_Street_Addr_2)) AND ([Cust_S"& _ 
                "uburb] = @Original_Cust_Suburb) AND ([Cust_City] = @Original_Cust_City) AND ([Cu"& _ 
                "st_Province] = @Original_Cust_Province) AND ([Cust_Postal_Code] = @Original_Cust"& _ 
                "_Postal_Code) AND ([Cust_Active_Status] = @Original_Cust_Active_Status))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Customer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_FName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_SName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_DOB", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_DOB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cust_Alt_Phone_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cust_Password", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Password", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cust_Street_Addr_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Suburb", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_City", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Province", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Cust_Postal_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Active_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Customer] ([Cust_FName], [Cust_SName], [Cust_DOB], [Cust_Phone"& _ 
                "_No], [Cust_Alt_Phone_No], [Cust_Email], [Cust_Password], [Cust_Street_Addr_1], "& _ 
                "[Cust_Street_Addr_2], [Cust_Suburb], [Cust_City], [Cust_Province], [Cust_Postal_"& _ 
                "Code], [Cust_Active_Status]) VALUES (@Cust_FName, @Cust_SName, @Cust_DOB, @Cust_"& _ 
                "Phone_No, @Cust_Alt_Phone_No, @Cust_Email, @Cust_Password, @Cust_Street_Addr_1, "& _ 
                "@Cust_Street_Addr_2, @Cust_Suburb, @Cust_City, @Cust_Province, @Cust_Postal_Code"& _ 
                ", @Cust_Active_Status);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Customer_ID, Cust_FName, Cust_SName, Cust_DOB, C"& _ 
                "ust_Phone_No, Cust_Alt_Phone_No, Cust_Email, Cust_Password, Cust_Street_Addr_1, "& _ 
                "Cust_Street_Addr_2, Cust_Suburb, Cust_City, Cust_Province, Cust_Postal_Code, Cus"& _ 
                "t_Active_Status FROM Customer WHERE (Customer_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_FName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_SName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_DOB", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_DOB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Alt_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Suburb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Province", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Cust_Postal_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Active_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Customer] SET [Cust_FName] = @Cust_FName, [Cust_SName] = @Cust_SNam"& _ 
                "e, [Cust_DOB] = @Cust_DOB, [Cust_Phone_No] = @Cust_Phone_No, [Cust_Alt_Phone_No]"& _ 
                " = @Cust_Alt_Phone_No, [Cust_Email] = @Cust_Email, [Cust_Password] = @Cust_Passw"& _ 
                "ord, [Cust_Street_Addr_1] = @Cust_Street_Addr_1, [Cust_Street_Addr_2] = @Cust_St"& _ 
                "reet_Addr_2, [Cust_Suburb] = @Cust_Suburb, [Cust_City] = @Cust_City, [Cust_Provi"& _ 
                "nce] = @Cust_Province, [Cust_Postal_Code] = @Cust_Postal_Code, [Cust_Active_Stat"& _ 
                "us] = @Cust_Active_Status WHERE (([Customer_ID] = @Original_Customer_ID) AND ([C"& _ 
                "ust_FName] = @Original_Cust_FName) AND ([Cust_SName] = @Original_Cust_SName) AND"& _ 
                " ([Cust_DOB] = @Original_Cust_DOB) AND ([Cust_Phone_No] = @Original_Cust_Phone_N"& _ 
                "o) AND ((@IsNull_Cust_Alt_Phone_No = 1 AND [Cust_Alt_Phone_No] IS NULL) OR ([Cus"& _ 
                "t_Alt_Phone_No] = @Original_Cust_Alt_Phone_No)) AND ([Cust_Email] = @Original_Cu"& _ 
                "st_Email) AND ((@IsNull_Cust_Password = 1 AND [Cust_Password] IS NULL) OR ([Cust"& _ 
                "_Password] = @Original_Cust_Password)) AND ([Cust_Street_Addr_1] = @Original_Cus"& _ 
                "t_Street_Addr_1) AND ((@IsNull_Cust_Street_Addr_2 = 1 AND [Cust_Street_Addr_2] I"& _ 
                "S NULL) OR ([Cust_Street_Addr_2] = @Original_Cust_Street_Addr_2)) AND ([Cust_Sub"& _ 
                "urb] = @Original_Cust_Suburb) AND ([Cust_City] = @Original_Cust_City) AND ([Cust"& _ 
                "_Province] = @Original_Cust_Province) AND ([Cust_Postal_Code] = @Original_Cust_P"& _ 
                "ostal_Code) AND ([Cust_Active_Status] = @Original_Cust_Active_Status));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "Customer_ID, Cust_FName, Cust_SName, Cust_DOB, Cust_Phone_No, Cust_Alt_Phone_No,"& _ 
                " Cust_Email, Cust_Password, Cust_Street_Addr_1, Cust_Street_Addr_2, Cust_Suburb,"& _ 
                " Cust_City, Cust_Province, Cust_Postal_Code, Cust_Active_Status FROM Customer WH"& _ 
                "ERE (Customer_ID = @Customer_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_FName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_SName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_DOB", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_DOB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Alt_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Suburb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Province", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Cust_Postal_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Active_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Customer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_FName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_SName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_DOB", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_DOB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cust_Alt_Phone_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cust_Password", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Password", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cust_Street_Addr_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Street_Addr_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Suburb", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_City", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Province", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Cust_Postal_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Active_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Customer_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Customer_ID, Cust_FName, Cust_SName, Cust_DOB, Cust_Phone_No, Cust_Alt_Pho"& _ 
                "ne_No, Cust_Email, Cust_Password, Cust_Street_Addr_1, Cust_Street_Addr_2, Cust_S"& _ 
                "uburb, Cust_City, Cust_Province, Cust_Postal_Code, Cust_Active_Status FROM dbo.C"& _ 
                "ustomer"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        COUNT(*) AS Customer_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Customer"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Cu"& _ 
                "st_Email = @CustomerEmailAddress)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Customer_ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerEmailAddress", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.CustomerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.CustomerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.CustomerDataTable = New group16DataSet.CustomerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As group16DataSet.CustomerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As group16DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Customer")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Customer_ID As Integer, ByVal Original_Cust_FName As String, ByVal Original_Cust_SName As String, ByVal Original_Cust_DOB As Date, ByVal Original_Cust_Phone_No As String, ByVal Original_Cust_Alt_Phone_No As String, ByVal Original_Cust_Email As String, ByVal Original_Cust_Password As String, ByVal Original_Cust_Street_Addr_1 As String, ByVal Original_Cust_Street_Addr_2 As String, ByVal Original_Cust_Suburb As String, ByVal Original_Cust_City As String, ByVal Original_Cust_Province As String, ByVal Original_Cust_Postal_Code As Decimal, ByVal Original_Cust_Active_Status As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Customer_ID,Integer)
            If (Original_Cust_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_FName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Cust_FName,String)
            End If
            If (Original_Cust_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_SName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Cust_SName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Cust_DOB,Date)
            If (Original_Cust_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Phone_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Cust_Phone_No,String)
            End If
            If (Original_Cust_Alt_Phone_No Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Cust_Alt_Phone_No,String)
            End If
            If (Original_Cust_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Email")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Cust_Email,String)
            End If
            If (Original_Cust_Password Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Cust_Password,String)
            End If
            If (Original_Cust_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Street_Addr_1")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Cust_Street_Addr_1,String)
            End If
            If (Original_Cust_Street_Addr_2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Cust_Street_Addr_2,String)
            End If
            If (Original_Cust_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Suburb")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Cust_Suburb,String)
            End If
            If (Original_Cust_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_City")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Cust_City,String)
            End If
            If (Original_Cust_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Province")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Cust_Province,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Cust_Postal_Code,Decimal)
            If (Original_Cust_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Active_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Cust_Active_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Cust_FName As String, ByVal Cust_SName As String, ByVal Cust_DOB As Date, ByVal Cust_Phone_No As String, ByVal Cust_Alt_Phone_No As String, ByVal Cust_Email As String, ByVal Cust_Password As String, ByVal Cust_Street_Addr_1 As String, ByVal Cust_Street_Addr_2 As String, ByVal Cust_Suburb As String, ByVal Cust_City As String, ByVal Cust_Province As String, ByVal Cust_Postal_Code As Decimal, ByVal Cust_Active_Status As String) As Integer
            If (Cust_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_FName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Cust_FName,String)
            End If
            If (Cust_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_SName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Cust_SName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Cust_DOB,Date)
            If (Cust_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Phone_No")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Cust_Phone_No,String)
            End If
            If (Cust_Alt_Phone_No Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Cust_Alt_Phone_No,String)
            End If
            If (Cust_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Email")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Cust_Email,String)
            End If
            If (Cust_Password Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Cust_Password,String)
            End If
            If (Cust_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Street_Addr_1")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Cust_Street_Addr_1,String)
            End If
            If (Cust_Street_Addr_2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Cust_Street_Addr_2,String)
            End If
            If (Cust_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Suburb")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Cust_Suburb,String)
            End If
            If (Cust_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_City")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Cust_City,String)
            End If
            If (Cust_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Province")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Cust_Province,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(Cust_Postal_Code,Decimal)
            If (Cust_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Active_Status")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Cust_Active_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Cust_FName As String,  _
                    ByVal Cust_SName As String,  _
                    ByVal Cust_DOB As Date,  _
                    ByVal Cust_Phone_No As String,  _
                    ByVal Cust_Alt_Phone_No As String,  _
                    ByVal Cust_Email As String,  _
                    ByVal Cust_Password As String,  _
                    ByVal Cust_Street_Addr_1 As String,  _
                    ByVal Cust_Street_Addr_2 As String,  _
                    ByVal Cust_Suburb As String,  _
                    ByVal Cust_City As String,  _
                    ByVal Cust_Province As String,  _
                    ByVal Cust_Postal_Code As Decimal,  _
                    ByVal Cust_Active_Status As String,  _
                    ByVal Original_Customer_ID As Integer,  _
                    ByVal Original_Cust_FName As String,  _
                    ByVal Original_Cust_SName As String,  _
                    ByVal Original_Cust_DOB As Date,  _
                    ByVal Original_Cust_Phone_No As String,  _
                    ByVal Original_Cust_Alt_Phone_No As String,  _
                    ByVal Original_Cust_Email As String,  _
                    ByVal Original_Cust_Password As String,  _
                    ByVal Original_Cust_Street_Addr_1 As String,  _
                    ByVal Original_Cust_Street_Addr_2 As String,  _
                    ByVal Original_Cust_Suburb As String,  _
                    ByVal Original_Cust_City As String,  _
                    ByVal Original_Cust_Province As String,  _
                    ByVal Original_Cust_Postal_Code As Decimal,  _
                    ByVal Original_Cust_Active_Status As String,  _
                    ByVal Customer_ID As Integer) As Integer
            If (Cust_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_FName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Cust_FName,String)
            End If
            If (Cust_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_SName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Cust_SName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Cust_DOB,Date)
            If (Cust_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Phone_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Cust_Phone_No,String)
            End If
            If (Cust_Alt_Phone_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Cust_Alt_Phone_No,String)
            End If
            If (Cust_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Cust_Email,String)
            End If
            If (Cust_Password Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Cust_Password,String)
            End If
            If (Cust_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Street_Addr_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Cust_Street_Addr_1,String)
            End If
            If (Cust_Street_Addr_2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Cust_Street_Addr_2,String)
            End If
            If (Cust_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Suburb")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Cust_Suburb,String)
            End If
            If (Cust_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_City")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Cust_City,String)
            End If
            If (Cust_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Cust_Province,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Cust_Postal_Code,Decimal)
            If (Cust_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Active_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Cust_Active_Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Customer_ID,Integer)
            If (Original_Cust_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_FName")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Cust_FName,String)
            End If
            If (Original_Cust_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_SName")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Cust_SName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Cust_DOB,Date)
            If (Original_Cust_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Phone_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Cust_Phone_No,String)
            End If
            If (Original_Cust_Alt_Phone_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Cust_Alt_Phone_No,String)
            End If
            If (Original_Cust_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Cust_Email,String)
            End If
            If (Original_Cust_Password Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Cust_Password,String)
            End If
            If (Original_Cust_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Street_Addr_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Cust_Street_Addr_1,String)
            End If
            If (Original_Cust_Street_Addr_2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Cust_Street_Addr_2,String)
            End If
            If (Original_Cust_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Suburb")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Cust_Suburb,String)
            End If
            If (Original_Cust_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_City")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Cust_City,String)
            End If
            If (Original_Cust_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Cust_Province,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Cust_Postal_Code,Decimal)
            If (Original_Cust_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Active_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Cust_Active_Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Customer_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Cust_FName As String,  _
                    ByVal Cust_SName As String,  _
                    ByVal Cust_DOB As Date,  _
                    ByVal Cust_Phone_No As String,  _
                    ByVal Cust_Alt_Phone_No As String,  _
                    ByVal Cust_Email As String,  _
                    ByVal Cust_Password As String,  _
                    ByVal Cust_Street_Addr_1 As String,  _
                    ByVal Cust_Street_Addr_2 As String,  _
                    ByVal Cust_Suburb As String,  _
                    ByVal Cust_City As String,  _
                    ByVal Cust_Province As String,  _
                    ByVal Cust_Postal_Code As Decimal,  _
                    ByVal Cust_Active_Status As String,  _
                    ByVal Original_Customer_ID As Integer,  _
                    ByVal Original_Cust_FName As String,  _
                    ByVal Original_Cust_SName As String,  _
                    ByVal Original_Cust_DOB As Date,  _
                    ByVal Original_Cust_Phone_No As String,  _
                    ByVal Original_Cust_Alt_Phone_No As String,  _
                    ByVal Original_Cust_Email As String,  _
                    ByVal Original_Cust_Password As String,  _
                    ByVal Original_Cust_Street_Addr_1 As String,  _
                    ByVal Original_Cust_Street_Addr_2 As String,  _
                    ByVal Original_Cust_Suburb As String,  _
                    ByVal Original_Cust_City As String,  _
                    ByVal Original_Cust_Province As String,  _
                    ByVal Original_Cust_Postal_Code As Decimal,  _
                    ByVal Original_Cust_Active_Status As String) As Integer
            Return Me.Update(Cust_FName, Cust_SName, Cust_DOB, Cust_Phone_No, Cust_Alt_Phone_No, Cust_Email, Cust_Password, Cust_Street_Addr_1, Cust_Street_Addr_2, Cust_Suburb, Cust_City, Cust_Province, Cust_Postal_Code, Cust_Active_Status, Original_Customer_ID, Original_Cust_FName, Original_Cust_SName, Original_Cust_DOB, Original_Cust_Phone_No, Original_Cust_Alt_Phone_No, Original_Cust_Email, Original_Cust_Password, Original_Cust_Street_Addr_1, Original_Cust_Street_Addr_2, Original_Cust_Suburb, Original_Cust_City, Original_Cust_Province, Original_Cust_Postal_Code, Original_Cust_Active_Status, Original_Customer_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckUniqueEmailQuery(ByVal CustomerEmailAddress As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (CustomerEmailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CustomerEmailAddress")
            Else
                command.Parameters(0).Value = CType(CustomerEmailAddress,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Customer_QuoteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Customer_Quote"
            tableMapping.ColumnMappings.Add("Cust_Quote_Reference_ID", "Cust_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Customer_ID", "Customer_ID")
            tableMapping.ColumnMappings.Add("Employee_ID", "Employee_ID")
            tableMapping.ColumnMappings.Add("Cust__Quote_Total_Price", "Cust__Quote_Total_Price")
            tableMapping.ColumnMappings.Add("Cust_Quote_Date_Issued", "Cust_Quote_Date_Issued")
            tableMapping.ColumnMappings.Add("Cust_Quote_Acceptance_Status", "Cust_Quote_Acceptance_Status")
            tableMapping.ColumnMappings.Add("Cust_Quote_Date_Accepted", "Cust_Quote_Date_Accepted")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Customer_Quote] WHERE (([Cust_Quote_Reference_ID] = @Original_"& _ 
                "Cust_Quote_Reference_ID) AND ([Customer_ID] = @Original_Customer_ID) AND ([Emplo"& _ 
                "yee_ID] = @Original_Employee_ID) AND ([Cust__Quote_Total_Price] = @Original_Cust"& _ 
                "__Quote_Total_Price) AND ([Cust_Quote_Date_Issued] = @Original_Cust_Quote_Date_I"& _ 
                "ssued) AND ([Cust_Quote_Acceptance_Status] = @Original_Cust_Quote_Acceptance_Sta"& _ 
                "tus) AND ((@IsNull_Cust_Quote_Date_Accepted = 1 AND [Cust_Quote_Date_Accepted] I"& _ 
                "S NULL) OR ([Cust_Quote_Date_Accepted] = @Original_Cust_Quote_Date_Accepted)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Customer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust__Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust__Quote_Total_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Date_Issued", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Issued", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Acceptance_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Acceptance_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cust_Quote_Date_Accepted", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Accepted", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Date_Accepted", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Accepted", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Customer_Quote] ([Cust_Quote_Reference_ID], [Customer_ID], [Em"& _ 
                "ployee_ID], [Cust__Quote_Total_Price], [Cust_Quote_Date_Issued], [Cust_Quote_Acc"& _ 
                "eptance_Status], [Cust_Quote_Date_Accepted]) VALUES (@Cust_Quote_Reference_ID, @"& _ 
                "Customer_ID, @Employee_ID, @Cust__Quote_Total_Price, @Cust_Quote_Date_Issued, @C"& _ 
                "ust_Quote_Acceptance_Status, @Cust_Quote_Date_Accepted);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Cust_Quote_Refe"& _ 
                "rence_ID, Customer_ID, Employee_ID, Cust__Quote_Total_Price, Cust_Quote_Date_Iss"& _ 
                "ued, Cust_Quote_Acceptance_Status, Cust_Quote_Date_Accepted FROM Customer_Quote "& _ 
                "WHERE (Cust_Quote_Reference_ID = @Cust_Quote_Reference_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Customer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust__Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust__Quote_Total_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Date_Issued", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Issued", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Acceptance_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Acceptance_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Date_Accepted", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Accepted", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Customer_Quote] SET [Cust_Quote_Reference_ID] = @Cust_Quote_Referen"& _ 
                "ce_ID, [Customer_ID] = @Customer_ID, [Employee_ID] = @Employee_ID, [Cust__Quote_"& _ 
                "Total_Price] = @Cust__Quote_Total_Price, [Cust_Quote_Date_Issued] = @Cust_Quote_"& _ 
                "Date_Issued, [Cust_Quote_Acceptance_Status] = @Cust_Quote_Acceptance_Status, [Cu"& _ 
                "st_Quote_Date_Accepted] = @Cust_Quote_Date_Accepted WHERE (([Cust_Quote_Referenc"& _ 
                "e_ID] = @Original_Cust_Quote_Reference_ID) AND ([Customer_ID] = @Original_Custom"& _ 
                "er_ID) AND ([Employee_ID] = @Original_Employee_ID) AND ([Cust__Quote_Total_Price"& _ 
                "] = @Original_Cust__Quote_Total_Price) AND ([Cust_Quote_Date_Issued] = @Original"& _ 
                "_Cust_Quote_Date_Issued) AND ([Cust_Quote_Acceptance_Status] = @Original_Cust_Qu"& _ 
                "ote_Acceptance_Status) AND ((@IsNull_Cust_Quote_Date_Accepted = 1 AND [Cust_Quot"& _ 
                "e_Date_Accepted] IS NULL) OR ([Cust_Quote_Date_Accepted] = @Original_Cust_Quote_"& _ 
                "Date_Accepted)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Cust_Quote_Reference_ID, Customer_ID, Employee_ID, Cus"& _ 
                "t__Quote_Total_Price, Cust_Quote_Date_Issued, Cust_Quote_Acceptance_Status, Cust"& _ 
                "_Quote_Date_Accepted FROM Customer_Quote WHERE (Cust_Quote_Reference_ID = @Cust_"& _ 
                "Quote_Reference_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Customer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust__Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust__Quote_Total_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Date_Issued", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Issued", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Acceptance_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Acceptance_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Date_Accepted", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Accepted", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Customer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Customer_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust__Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust__Quote_Total_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Date_Issued", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Issued", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Acceptance_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Acceptance_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Cust_Quote_Date_Accepted", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Accepted", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Date_Accepted", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Date_Accepted", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Cust_Quote_Reference_ID, Customer_ID, Employee_ID, Cust__Quote_Total_Price"& _ 
                ", Cust_Quote_Date_Issued, Cust_Quote_Acceptance_Status, Cust_Quote_Date_Accepted"& _ 
                " FROM dbo.Customer_Quote"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE       Customer_Quote"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Cust__Quote_Total_Price = @Cust__"& _ 
                "Quote_Total_Price"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Cust_Quote_Reference_ID = @Original_Cust_Quote_"& _ 
                "Reference_ID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust__Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust__Quote_Total_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE       Customer_Quote"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Cust_Quote_Date_Accepted = NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "WHERE        (Cust_Quote_Reference_ID = @Original_Cust_Quote_Reference_ID);   "
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.Customer_QuoteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.Customer_QuoteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.Customer_QuoteDataTable = New group16DataSet.Customer_QuoteDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As group16DataSet.Customer_QuoteDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As group16DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Customer_Quote")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Cust_Quote_Reference_ID As Integer, ByVal Original_Customer_ID As Integer, ByVal Original_Employee_ID As Integer, ByVal Original_Cust__Quote_Total_Price As Decimal, ByVal Original_Cust_Quote_Date_Issued As Date, ByVal Original_Cust_Quote_Acceptance_Status As String, ByVal Original_Cust_Quote_Date_Accepted As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Cust_Quote_Reference_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Customer_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Employee_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Cust__Quote_Total_Price,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Cust_Quote_Date_Issued,Date)
            If (Original_Cust_Quote_Acceptance_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Quote_Acceptance_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Cust_Quote_Acceptance_Status,String)
            End If
            If (Original_Cust_Quote_Date_Accepted.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Cust_Quote_Date_Accepted.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Cust_Quote_Reference_ID As Integer, ByVal Customer_ID As Integer, ByVal Employee_ID As Integer, ByVal Cust__Quote_Total_Price As Decimal, ByVal Cust_Quote_Date_Issued As Date, ByVal Cust_Quote_Acceptance_Status As String, ByVal Cust_Quote_Date_Accepted As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Cust_Quote_Reference_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Customer_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Employee_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Cust__Quote_Total_Price,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Cust_Quote_Date_Issued,Date)
            If (Cust_Quote_Acceptance_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Quote_Acceptance_Status")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Cust_Quote_Acceptance_Status,String)
            End If
            If (Cust_Quote_Date_Accepted.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Cust_Quote_Date_Accepted.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Cust_Quote_Reference_ID As Integer, ByVal Customer_ID As Integer, ByVal Employee_ID As Integer, ByVal Cust__Quote_Total_Price As Decimal, ByVal Cust_Quote_Date_Issued As Date, ByVal Cust_Quote_Acceptance_Status As String, ByVal Cust_Quote_Date_Accepted As Global.System.Nullable(Of Date), ByVal Original_Cust_Quote_Reference_ID As Integer, ByVal Original_Customer_ID As Integer, ByVal Original_Employee_ID As Integer, ByVal Original_Cust__Quote_Total_Price As Decimal, ByVal Original_Cust_Quote_Date_Issued As Date, ByVal Original_Cust_Quote_Acceptance_Status As String, ByVal Original_Cust_Quote_Date_Accepted As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Cust_Quote_Reference_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Customer_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Employee_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Cust__Quote_Total_Price,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Cust_Quote_Date_Issued,Date)
            If (Cust_Quote_Acceptance_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Cust_Quote_Acceptance_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Cust_Quote_Acceptance_Status,String)
            End If
            If (Cust_Quote_Date_Accepted.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Cust_Quote_Date_Accepted.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Cust_Quote_Reference_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Customer_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Employee_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Cust__Quote_Total_Price,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Cust_Quote_Date_Issued,Date)
            If (Original_Cust_Quote_Acceptance_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Cust_Quote_Acceptance_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Cust_Quote_Acceptance_Status,String)
            End If
            If (Original_Cust_Quote_Date_Accepted.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Cust_Quote_Date_Accepted.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Customer_ID As Integer, ByVal Employee_ID As Integer, ByVal Cust__Quote_Total_Price As Decimal, ByVal Cust_Quote_Date_Issued As Date, ByVal Cust_Quote_Acceptance_Status As String, ByVal Cust_Quote_Date_Accepted As Global.System.Nullable(Of Date), ByVal Original_Cust_Quote_Reference_ID As Integer, ByVal Original_Customer_ID As Integer, ByVal Original_Employee_ID As Integer, ByVal Original_Cust__Quote_Total_Price As Decimal, ByVal Original_Cust_Quote_Date_Issued As Date, ByVal Original_Cust_Quote_Acceptance_Status As String, ByVal Original_Cust_Quote_Date_Accepted As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_Cust_Quote_Reference_ID, Customer_ID, Employee_ID, Cust__Quote_Total_Price, Cust_Quote_Date_Issued, Cust_Quote_Acceptance_Status, Cust_Quote_Date_Accepted, Original_Cust_Quote_Reference_ID, Original_Customer_ID, Original_Employee_ID, Original_Cust__Quote_Total_Price, Original_Cust_Quote_Date_Issued, Original_Cust_Quote_Acceptance_Status, Original_Cust_Quote_Date_Accepted)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function TotalPriceUpdateQuery(ByVal Cust__Quote_Total_Price As Decimal, ByVal Original_Cust_Quote_Reference_ID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Cust__Quote_Total_Price,Decimal)
            command.Parameters(1).Value = CType(Original_Cust_Quote_Reference_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateDateAcceptedNULLQuery(ByVal Original_Cust_Quote_Reference_ID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(Original_Cust_Quote_Reference_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Customer_Quote_Line_ItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Customer_Quote_Line_Item"
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID")
            tableMapping.ColumnMappings.Add("Cust_Quote_Reference_ID", "Cust_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Cost_Price", "Cust_Line_Item_Cost_Price")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Sale_incl_VAT", "Cust_Line_Item_Sale_incl_VAT")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Sale_excl_VAT", "Cust_Line_Item_Sale_excl_VAT")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Markup_Percentage", "Cust_Line_Item_Markup_Percentage")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Discount_Percentage", "Cust_Line_Item_Discount_Percentage")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Quantity", "Cust_Line_Item_Quantity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Customer_Quote_Line_Item] WHERE (([Product_ID] = @Original_Pro"& _ 
                "duct_ID) AND ([Cust_Quote_Reference_ID] = @Original_Cust_Quote_Reference_ID) AND"& _ 
                " ([Supplier_ID] = @Original_Supplier_ID) AND ([Cust_Line_Item_Cost_Price] = @Ori"& _ 
                "ginal_Cust_Line_Item_Cost_Price) AND ([Cust_Line_Item_Sale_incl_VAT] = @Original"& _ 
                "_Cust_Line_Item_Sale_incl_VAT) AND ([Cust_Line_Item_Sale_excl_VAT] = @Original_C"& _ 
                "ust_Line_Item_Sale_excl_VAT) AND ([Cust_Line_Item_Markup_Percentage] = @Original"& _ 
                "_Cust_Line_Item_Markup_Percentage) AND ([Cust_Line_Item_Discount_Percentage] = @"& _ 
                "Original_Cust_Line_Item_Discount_Percentage) AND ([Cust_Line_Item_Quantity] = @O"& _ 
                "riginal_Cust_Line_Item_Quantity))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Sale_incl_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_incl_VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Sale_excl_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_excl_VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Markup_Percentage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Markup_Percentage", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Discount_Percentage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Discount_Percentage", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Line_Item_Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Customer_Quote_Line_Item] ([Product_ID], [Cust_Quote_Reference"& _ 
                "_ID], [Supplier_ID], [Cust_Line_Item_Cost_Price], [Cust_Line_Item_Sale_incl_VAT]"& _ 
                ", [Cust_Line_Item_Sale_excl_VAT], [Cust_Line_Item_Markup_Percentage], [Cust_Line"& _ 
                "_Item_Discount_Percentage], [Cust_Line_Item_Quantity]) VALUES (@Product_ID, @Cus"& _ 
                "t_Quote_Reference_ID, @Supplier_ID, @Cust_Line_Item_Cost_Price, @Cust_Line_Item_"& _ 
                "Sale_incl_VAT, @Cust_Line_Item_Sale_excl_VAT, @Cust_Line_Item_Markup_Percentage,"& _ 
                " @Cust_Line_Item_Discount_Percentage, @Cust_Line_Item_Quantity);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Product"& _ 
                "_ID, Cust_Quote_Reference_ID, Supplier_ID, Cust_Line_Item_Cost_Price, Cust_Line_"& _ 
                "Item_Sale_incl_VAT, Cust_Line_Item_Sale_excl_VAT, Cust_Line_Item_Markup_Percenta"& _ 
                "ge, Cust_Line_Item_Discount_Percentage, Cust_Line_Item_Quantity FROM Customer_Qu"& _ 
                "ote_Line_Item WHERE (Cust_Quote_Reference_ID = @Cust_Quote_Reference_ID) AND (Pr"& _ 
                "oduct_ID = @Product_ID) AND (Supplier_ID = @Supplier_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Sale_incl_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_incl_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Sale_excl_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_excl_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Markup_Percentage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Markup_Percentage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Discount_Percentage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Discount_Percentage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Line_Item_Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Customer_Quote_Line_Item] SET [Product_ID] = @Product_ID, [Cust_Quo"& _ 
                "te_Reference_ID] = @Cust_Quote_Reference_ID, [Supplier_ID] = @Supplier_ID, [Cust"& _ 
                "_Line_Item_Cost_Price] = @Cust_Line_Item_Cost_Price, [Cust_Line_Item_Sale_incl_V"& _ 
                "AT] = @Cust_Line_Item_Sale_incl_VAT, [Cust_Line_Item_Sale_excl_VAT] = @Cust_Line"& _ 
                "_Item_Sale_excl_VAT, [Cust_Line_Item_Markup_Percentage] = @Cust_Line_Item_Markup"& _ 
                "_Percentage, [Cust_Line_Item_Discount_Percentage] = @Cust_Line_Item_Discount_Per"& _ 
                "centage, [Cust_Line_Item_Quantity] = @Cust_Line_Item_Quantity WHERE (([Product_I"& _ 
                "D] = @Original_Product_ID) AND ([Cust_Quote_Reference_ID] = @Original_Cust_Quote"& _ 
                "_Reference_ID) AND ([Supplier_ID] = @Original_Supplier_ID) AND ([Cust_Line_Item_"& _ 
                "Cost_Price] = @Original_Cust_Line_Item_Cost_Price) AND ([Cust_Line_Item_Sale_inc"& _ 
                "l_VAT] = @Original_Cust_Line_Item_Sale_incl_VAT) AND ([Cust_Line_Item_Sale_excl_"& _ 
                "VAT] = @Original_Cust_Line_Item_Sale_excl_VAT) AND ([Cust_Line_Item_Markup_Perce"& _ 
                "ntage] = @Original_Cust_Line_Item_Markup_Percentage) AND ([Cust_Line_Item_Discou"& _ 
                "nt_Percentage] = @Original_Cust_Line_Item_Discount_Percentage) AND ([Cust_Line_I"& _ 
                "tem_Quantity] = @Original_Cust_Line_Item_Quantity));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Product_ID, Cust_Qu"& _ 
                "ote_Reference_ID, Supplier_ID, Cust_Line_Item_Cost_Price, Cust_Line_Item_Sale_in"& _ 
                "cl_VAT, Cust_Line_Item_Sale_excl_VAT, Cust_Line_Item_Markup_Percentage, Cust_Lin"& _ 
                "e_Item_Discount_Percentage, Cust_Line_Item_Quantity FROM Customer_Quote_Line_Ite"& _ 
                "m WHERE (Cust_Quote_Reference_ID = @Cust_Quote_Reference_ID) AND (Product_ID = @"& _ 
                "Product_ID) AND (Supplier_ID = @Supplier_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Sale_incl_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_incl_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Sale_excl_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_excl_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Markup_Percentage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Markup_Percentage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Discount_Percentage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Discount_Percentage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Line_Item_Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Sale_incl_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_incl_VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Sale_excl_VAT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_excl_VAT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Markup_Percentage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Markup_Percentage", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Discount_Percentage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Discount_Percentage", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Line_Item_Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Product_ID, Cust_Quote_Reference_ID, Supplier_ID, Cust_Line_Item_Cost_Pric"& _ 
                "e, Cust_Line_Item_Sale_incl_VAT, Cust_Line_Item_Sale_excl_VAT, Cust_Line_Item_Ma"& _ 
                "rkup_Percentage, Cust_Line_Item_Discount_Percentage, Cust_Line_Item_Quantity FRO"& _ 
                "M dbo.Customer_Quote_Line_Item"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        SUM(Cust_Line_Item_Sale_incl_VAT * Cust_Line_Item_Quantity) AS Tota"& _ 
                "l_Price"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Customer_Quote_Line_Item"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Cust_Quote_Refe"& _ 
                "rence_ID = @Cust_Quote_Reference_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE       Customer_Quote_Line_Item"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Cust_Line_Item_Cost_Pri"& _ 
                "ce = @Cust_Line_Item_Cost_Price, Cust_Line_Item_Sale_incl_VAT = @Cust_Line_Item_"& _ 
                "Sale_incl_VAT, Cust_Line_Item_Sale_excl_VAT = @Cust_Line_Item_Sale_excl_VAT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                        Cust_Line_Item_Markup_Percentage = @Cust_Line_Item_Marku"& _ 
                "p_Percentage, Cust_Line_Item_Discount_Percentage = @Cust_Line_Item_Discount_Perc"& _ 
                "entage, Cust_Line_Item_Quantity = @Cust_Line_Item_Quantity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Produc"& _ 
                "t_ID = @Original_Product_ID) AND (Cust_Quote_Reference_ID = @Original_Cust_Quote"& _ 
                "_Reference_ID) AND (Supplier_ID = @Original_Supplier_ID);"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Sale_incl_VAT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_incl_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Sale_excl_VAT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 2, "Cust_Line_Item_Sale_excl_VAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Markup_Percentage", Global.System.Data.SqlDbType.[Decimal], 5, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Markup_Percentage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Discount_Percentage", Global.System.Data.SqlDbType.[Decimal], 5, Global.System.Data.ParameterDirection.Input, 3, 0, "Cust_Line_Item_Discount_Percentage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Cust_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Line_Item_Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Cust_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Cust_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.Customer_Quote_Line_ItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.Customer_Quote_Line_ItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.Customer_Quote_Line_ItemDataTable = New group16DataSet.Customer_Quote_Line_ItemDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As group16DataSet.Customer_Quote_Line_ItemDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As group16DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Customer_Quote_Line_Item")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Product_ID As Integer, ByVal Original_Cust_Quote_Reference_ID As Integer, ByVal Original_Supplier_ID As Integer, ByVal Original_Cust_Line_Item_Cost_Price As Decimal, ByVal Original_Cust_Line_Item_Sale_incl_VAT As Decimal, ByVal Original_Cust_Line_Item_Sale_excl_VAT As Decimal, ByVal Original_Cust_Line_Item_Markup_Percentage As Decimal, ByVal Original_Cust_Line_Item_Discount_Percentage As Decimal, ByVal Original_Cust_Line_Item_Quantity As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Product_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Cust_Quote_Reference_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Supplier_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Cust_Line_Item_Cost_Price,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Cust_Line_Item_Sale_incl_VAT,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Cust_Line_Item_Sale_excl_VAT,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Cust_Line_Item_Markup_Percentage,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Cust_Line_Item_Discount_Percentage,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Cust_Line_Item_Quantity,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Product_ID As Integer, ByVal Cust_Quote_Reference_ID As Integer, ByVal Supplier_ID As Integer, ByVal Cust_Line_Item_Cost_Price As Decimal, ByVal Cust_Line_Item_Sale_incl_VAT As Decimal, ByVal Cust_Line_Item_Sale_excl_VAT As Decimal, ByVal Cust_Line_Item_Markup_Percentage As Decimal, ByVal Cust_Line_Item_Discount_Percentage As Decimal, ByVal Cust_Line_Item_Quantity As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Product_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Cust_Quote_Reference_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Supplier_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Cust_Line_Item_Cost_Price,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Cust_Line_Item_Sale_incl_VAT,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Cust_Line_Item_Sale_excl_VAT,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Cust_Line_Item_Markup_Percentage,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Cust_Line_Item_Discount_Percentage,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Cust_Line_Item_Quantity,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Product_ID As Integer,  _
                    ByVal Cust_Quote_Reference_ID As Integer,  _
                    ByVal Supplier_ID As Integer,  _
                    ByVal Cust_Line_Item_Cost_Price As Decimal,  _
                    ByVal Cust_Line_Item_Sale_incl_VAT As Decimal,  _
                    ByVal Cust_Line_Item_Sale_excl_VAT As Decimal,  _
                    ByVal Cust_Line_Item_Markup_Percentage As Decimal,  _
                    ByVal Cust_Line_Item_Discount_Percentage As Decimal,  _
                    ByVal Cust_Line_Item_Quantity As Integer,  _
                    ByVal Original_Product_ID As Integer,  _
                    ByVal Original_Cust_Quote_Reference_ID As Integer,  _
                    ByVal Original_Supplier_ID As Integer,  _
                    ByVal Original_Cust_Line_Item_Cost_Price As Decimal,  _
                    ByVal Original_Cust_Line_Item_Sale_incl_VAT As Decimal,  _
                    ByVal Original_Cust_Line_Item_Sale_excl_VAT As Decimal,  _
                    ByVal Original_Cust_Line_Item_Markup_Percentage As Decimal,  _
                    ByVal Original_Cust_Line_Item_Discount_Percentage As Decimal,  _
                    ByVal Original_Cust_Line_Item_Quantity As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Product_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Cust_Quote_Reference_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Supplier_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Cust_Line_Item_Cost_Price,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Cust_Line_Item_Sale_incl_VAT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Cust_Line_Item_Sale_excl_VAT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Cust_Line_Item_Markup_Percentage,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Cust_Line_Item_Discount_Percentage,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Cust_Line_Item_Quantity,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Product_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Cust_Quote_Reference_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Supplier_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Cust_Line_Item_Cost_Price,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Cust_Line_Item_Sale_incl_VAT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Cust_Line_Item_Sale_excl_VAT,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Cust_Line_Item_Markup_Percentage,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Cust_Line_Item_Discount_Percentage,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Cust_Line_Item_Quantity,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Cust_Line_Item_Cost_Price As Decimal, ByVal Cust_Line_Item_Sale_incl_VAT As Decimal, ByVal Cust_Line_Item_Sale_excl_VAT As Decimal, ByVal Cust_Line_Item_Markup_Percentage As Decimal, ByVal Cust_Line_Item_Discount_Percentage As Decimal, ByVal Cust_Line_Item_Quantity As Integer, ByVal Original_Product_ID As Integer, ByVal Original_Cust_Quote_Reference_ID As Integer, ByVal Original_Supplier_ID As Integer, ByVal Original_Cust_Line_Item_Cost_Price As Decimal, ByVal Original_Cust_Line_Item_Sale_incl_VAT As Decimal, ByVal Original_Cust_Line_Item_Sale_excl_VAT As Decimal, ByVal Original_Cust_Line_Item_Markup_Percentage As Decimal, ByVal Original_Cust_Line_Item_Discount_Percentage As Decimal, ByVal Original_Cust_Line_Item_Quantity As Integer) As Integer
            Return Me.Update(Original_Product_ID, Original_Cust_Quote_Reference_ID, Original_Supplier_ID, Cust_Line_Item_Cost_Price, Cust_Line_Item_Sale_incl_VAT, Cust_Line_Item_Sale_excl_VAT, Cust_Line_Item_Markup_Percentage, Cust_Line_Item_Discount_Percentage, Cust_Line_Item_Quantity, Original_Product_ID, Original_Cust_Quote_Reference_ID, Original_Supplier_ID, Original_Cust_Line_Item_Cost_Price, Original_Cust_Line_Item_Sale_incl_VAT, Original_Cust_Line_Item_Sale_excl_VAT, Original_Cust_Line_Item_Markup_Percentage, Original_Cust_Line_Item_Discount_Percentage, Original_Cust_Line_Item_Quantity)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function TotalCustQuotePriceQuery(ByVal Cust_Quote_Reference_ID As Integer) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Cust_Quote_Reference_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)()
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateCustLineItemQuery(ByVal Cust_Line_Item_Cost_Price As Decimal, ByVal Cust_Line_Item_Sale_incl_VAT As Decimal, ByVal Cust_Line_Item_Sale_excl_VAT As Decimal, ByVal Cust_Line_Item_Markup_Percentage As Decimal, ByVal Cust_Line_Item_Discount_Percentage As Decimal, ByVal Cust_Line_Item_Quantity As Integer, ByVal Original_Product_ID As Integer, ByVal Original_Cust_Quote_Reference_ID As Integer, ByVal Original_Supplier_ID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(Cust_Line_Item_Cost_Price,Decimal)
            command.Parameters(1).Value = CType(Cust_Line_Item_Sale_incl_VAT,Decimal)
            command.Parameters(2).Value = CType(Cust_Line_Item_Sale_excl_VAT,Decimal)
            command.Parameters(3).Value = CType(Cust_Line_Item_Markup_Percentage,Decimal)
            command.Parameters(4).Value = CType(Cust_Line_Item_Discount_Percentage,Decimal)
            command.Parameters(5).Value = CType(Cust_Line_Item_Quantity,Integer)
            command.Parameters(6).Value = CType(Original_Product_ID,Integer)
            command.Parameters(7).Value = CType(Original_Cust_Quote_Reference_ID,Integer)
            command.Parameters(8).Value = CType(Original_Supplier_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EmployeeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Employee"
            tableMapping.ColumnMappings.Add("Employee_ID", "Employee_ID")
            tableMapping.ColumnMappings.Add("Employee_FName", "Employee_FName")
            tableMapping.ColumnMappings.Add("Employee_SName", "Employee_SName")
            tableMapping.ColumnMappings.Add("Employee_DOB", "Employee_DOB")
            tableMapping.ColumnMappings.Add("Employee_Gender", "Employee_Gender")
            tableMapping.ColumnMappings.Add("Employee_Phone_No", "Employee_Phone_No")
            tableMapping.ColumnMappings.Add("Employee_Alt_Phone_No", "Employee_Alt_Phone_No")
            tableMapping.ColumnMappings.Add("Employee_Email", "Employee_Email")
            tableMapping.ColumnMappings.Add("Employee_Password", "Employee_Password")
            tableMapping.ColumnMappings.Add("Employee_SA_ID_No", "Employee_SA_ID_No")
            tableMapping.ColumnMappings.Add("Employee_Street_Addr_1", "Employee_Street_Addr_1")
            tableMapping.ColumnMappings.Add("Employee_Street_Addr_2", "Employee_Street_Addr_2")
            tableMapping.ColumnMappings.Add("Employee_Suburb", "Employee_Suburb")
            tableMapping.ColumnMappings.Add("Employee_City", "Employee_City")
            tableMapping.ColumnMappings.Add("Employee_Province", "Employee_Province")
            tableMapping.ColumnMappings.Add("Employee_Postal_Code", "Employee_Postal_Code")
            tableMapping.ColumnMappings.Add("Employee_Position", "Employee_Position")
            tableMapping.ColumnMappings.Add("Employee_Admin_Level", "Employee_Admin_Level")
            tableMapping.ColumnMappings.Add("Employee_Active_Status", "Employee_Active_Status")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Employee] WHERE (([Employee_ID] = @Original_Employee_ID) AND ("& _ 
                "[Employee_FName] = @Original_Employee_FName) AND ([Employee_SName] = @Original_E"& _ 
                "mployee_SName) AND ([Employee_DOB] = @Original_Employee_DOB) AND ([Employee_Gend"& _ 
                "er] = @Original_Employee_Gender) AND ([Employee_Phone_No] = @Original_Employee_P"& _ 
                "hone_No) AND ((@IsNull_Employee_Alt_Phone_No = 1 AND [Employee_Alt_Phone_No] IS "& _ 
                "NULL) OR ([Employee_Alt_Phone_No] = @Original_Employee_Alt_Phone_No)) AND ([Empl"& _ 
                "oyee_Email] = @Original_Employee_Email) AND ([Employee_Password] = @Original_Emp"& _ 
                "loyee_Password) AND ([Employee_SA_ID_No] = @Original_Employee_SA_ID_No) AND ([Em"& _ 
                "ployee_Street_Addr_1] = @Original_Employee_Street_Addr_1) AND ((@IsNull_Employee"& _ 
                "_Street_Addr_2 = 1 AND [Employee_Street_Addr_2] IS NULL) OR ([Employee_Street_Ad"& _ 
                "dr_2] = @Original_Employee_Street_Addr_2)) AND ([Employee_Suburb] = @Original_Em"& _ 
                "ployee_Suburb) AND ([Employee_City] = @Original_Employee_City) AND ([Employee_Pr"& _ 
                "ovince] = @Original_Employee_Province) AND ([Employee_Postal_Code] = @Original_E"& _ 
                "mployee_Postal_Code) AND ([Employee_Position] = @Original_Employee_Position) AND"& _ 
                " ([Employee_Admin_Level] = @Original_Employee_Admin_Level) AND ([Employee_Active"& _ 
                "_Status] = @Original_Employee_Active_Status))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_FName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_SName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_DOB", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_DOB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Gender", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Employee_Alt_Phone_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_SA_ID_No", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 0, "Employee_SA_ID_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Employee_Street_Addr_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Suburb", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_City", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Province", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Employee_Postal_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Position", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Position", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Admin_Level", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Admin_Level", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Active_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Employee] ([Employee_FName], [Employee_SName], [Employee_DOB],"& _ 
                " [Employee_Gender], [Employee_Phone_No], [Employee_Alt_Phone_No], [Employee_Emai"& _ 
                "l], [Employee_Password], [Employee_SA_ID_No], [Employee_Street_Addr_1], [Employe"& _ 
                "e_Street_Addr_2], [Employee_Suburb], [Employee_City], [Employee_Province], [Empl"& _ 
                "oyee_Postal_Code], [Employee_Position], [Employee_Admin_Level], [Employee_Active"& _ 
                "_Status]) VALUES (@Employee_FName, @Employee_SName, @Employee_DOB, @Employee_Gen"& _ 
                "der, @Employee_Phone_No, @Employee_Alt_Phone_No, @Employee_Email, @Employee_Pass"& _ 
                "word, @Employee_SA_ID_No, @Employee_Street_Addr_1, @Employee_Street_Addr_2, @Emp"& _ 
                "loyee_Suburb, @Employee_City, @Employee_Province, @Employee_Postal_Code, @Employ"& _ 
                "ee_Position, @Employee_Admin_Level, @Employee_Active_Status);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Employee_I"& _ 
                "D, Employee_FName, Employee_SName, Employee_DOB, Employee_Gender, Employee_Phone"& _ 
                "_No, Employee_Alt_Phone_No, Employee_Email, Employee_Password, Employee_SA_ID_No"& _ 
                ", Employee_Street_Addr_1, Employee_Street_Addr_2, Employee_Suburb, Employee_City"& _ 
                ", Employee_Province, Employee_Postal_Code, Employee_Position, Employee_Admin_Lev"& _ 
                "el, Employee_Active_Status FROM Employee WHERE (Employee_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_FName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_SName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_DOB", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_DOB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Gender", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Alt_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_SA_ID_No", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 0, "Employee_SA_ID_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Suburb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Province", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Employee_Postal_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Position", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Position", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Admin_Level", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Admin_Level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Active_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Employee] SET [Employee_FName] = @Employee_FName, [Employee_SName] "& _ 
                "= @Employee_SName, [Employee_DOB] = @Employee_DOB, [Employee_Gender] = @Employee"& _ 
                "_Gender, [Employee_Phone_No] = @Employee_Phone_No, [Employee_Alt_Phone_No] = @Em"& _ 
                "ployee_Alt_Phone_No, [Employee_Email] = @Employee_Email, [Employee_Password] = @"& _ 
                "Employee_Password, [Employee_SA_ID_No] = @Employee_SA_ID_No, [Employee_Street_Ad"& _ 
                "dr_1] = @Employee_Street_Addr_1, [Employee_Street_Addr_2] = @Employee_Street_Add"& _ 
                "r_2, [Employee_Suburb] = @Employee_Suburb, [Employee_City] = @Employee_City, [Em"& _ 
                "ployee_Province] = @Employee_Province, [Employee_Postal_Code] = @Employee_Postal"& _ 
                "_Code, [Employee_Position] = @Employee_Position, [Employee_Admin_Level] = @Emplo"& _ 
                "yee_Admin_Level, [Employee_Active_Status] = @Employee_Active_Status WHERE (([Emp"& _ 
                "loyee_ID] = @Original_Employee_ID) AND ([Employee_FName] = @Original_Employee_FN"& _ 
                "ame) AND ([Employee_SName] = @Original_Employee_SName) AND ([Employee_DOB] = @Or"& _ 
                "iginal_Employee_DOB) AND ([Employee_Gender] = @Original_Employee_Gender) AND ([E"& _ 
                "mployee_Phone_No] = @Original_Employee_Phone_No) AND ((@IsNull_Employee_Alt_Phon"& _ 
                "e_No = 1 AND [Employee_Alt_Phone_No] IS NULL) OR ([Employee_Alt_Phone_No] = @Ori"& _ 
                "ginal_Employee_Alt_Phone_No)) AND ([Employee_Email] = @Original_Employee_Email) "& _ 
                "AND ([Employee_Password] = @Original_Employee_Password) AND ([Employee_SA_ID_No]"& _ 
                " = @Original_Employee_SA_ID_No) AND ([Employee_Street_Addr_1] = @Original_Employ"& _ 
                "ee_Street_Addr_1) AND ((@IsNull_Employee_Street_Addr_2 = 1 AND [Employee_Street_"& _ 
                "Addr_2] IS NULL) OR ([Employee_Street_Addr_2] = @Original_Employee_Street_Addr_2"& _ 
                ")) AND ([Employee_Suburb] = @Original_Employee_Suburb) AND ([Employee_City] = @O"& _ 
                "riginal_Employee_City) AND ([Employee_Province] = @Original_Employee_Province) A"& _ 
                "ND ([Employee_Postal_Code] = @Original_Employee_Postal_Code) AND ([Employee_Posi"& _ 
                "tion] = @Original_Employee_Position) AND ([Employee_Admin_Level] = @Original_Emp"& _ 
                "loyee_Admin_Level) AND ([Employee_Active_Status] = @Original_Employee_Active_Sta"& _ 
                "tus));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Employee_ID, Employee_FName, Employee_SName, Employee_DOB, Employ"& _ 
                "ee_Gender, Employee_Phone_No, Employee_Alt_Phone_No, Employee_Email, Employee_Pa"& _ 
                "ssword, Employee_SA_ID_No, Employee_Street_Addr_1, Employee_Street_Addr_2, Emplo"& _ 
                "yee_Suburb, Employee_City, Employee_Province, Employee_Postal_Code, Employee_Pos"& _ 
                "ition, Employee_Admin_Level, Employee_Active_Status FROM Employee WHERE (Employe"& _ 
                "e_ID = @Employee_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_FName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_SName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_DOB", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_DOB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Gender", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Gender", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Alt_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_SA_ID_No", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 0, "Employee_SA_ID_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Suburb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Province", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Employee_Postal_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Position", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Position", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Admin_Level", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Admin_Level", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Active_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_FName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_SName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_DOB", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_DOB", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Gender", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Gender", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Employee_Alt_Phone_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_SA_ID_No", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 13, 0, "Employee_SA_ID_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Employee_Street_Addr_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Street_Addr_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Suburb", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_City", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Province", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Employee_Postal_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Position", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Position", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Admin_Level", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Admin_Level", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Employee_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Active_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Employee_ID, Employee_FName, Employee_SName, Employee_DOB, Employee_Gender"& _ 
                ", Employee_Phone_No, Employee_Alt_Phone_No, Employee_Email, Employee_Password, E"& _ 
                "mployee_SA_ID_No, Employee_Street_Addr_1, Employee_Street_Addr_2, Employee_Subur"& _ 
                "b, Employee_City, Employee_Province, Employee_Postal_Code, Employee_Position, Em"& _ 
                "ployee_Admin_Level, Employee_Active_Status FROM dbo.Employee"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Employee_ID, Employee_FName, Employee_SName, Employee_DOB, Employee"& _ 
                "_Gender, Employee_Phone_No, Employee_Alt_Phone_No, Employee_Email, Employee_Pass"& _ 
                "word, Employee_SA_ID_No, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Employee_Street_Addr_1, Empl"& _ 
                "oyee_Street_Addr_2, Employee_Suburb, Employee_City, Employee_Province, Employee_"& _ 
                "Postal_Code, Employee_Position, Employee_Admin_Level, Employee_Active_Status"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM            Employee"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Employee_Password = @Employee_Password) AN"& _ 
                "D (Employee_Email = @Employee_Email)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Password", Global.System.Data.SqlDbType.[Char], 10, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Employee_Email", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        COUNT(*) AS Employee_Email"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Employee"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        "& _ 
                "(Employee_Email = @EmployeeEmailAddress)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Employee_ID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmployeeEmailAddress", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Employee_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.EmployeeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.EmployeeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.EmployeeDataTable = New group16DataSet.EmployeeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As group16DataSet.EmployeeDataTable, ByVal Employee_Password As String, ByVal Employee_Email As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Employee_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Password")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Employee_Password,String)
            End If
            If (Employee_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Email")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Employee_Email,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal Employee_Password As String, ByVal Employee_Email As String) As group16DataSet.EmployeeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Employee_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Password")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Employee_Password,String)
            End If
            If (Employee_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Email")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Employee_Email,String)
            End If
            Dim dataTable As group16DataSet.EmployeeDataTable = New group16DataSet.EmployeeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As group16DataSet.EmployeeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As group16DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Employee")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Employee_ID As Integer,  _
                    ByVal Original_Employee_FName As String,  _
                    ByVal Original_Employee_SName As String,  _
                    ByVal Original_Employee_DOB As Date,  _
                    ByVal Original_Employee_Gender As String,  _
                    ByVal Original_Employee_Phone_No As String,  _
                    ByVal Original_Employee_Alt_Phone_No As String,  _
                    ByVal Original_Employee_Email As String,  _
                    ByVal Original_Employee_Password As String,  _
                    ByVal Original_Employee_SA_ID_No As Decimal,  _
                    ByVal Original_Employee_Street_Addr_1 As String,  _
                    ByVal Original_Employee_Street_Addr_2 As String,  _
                    ByVal Original_Employee_Suburb As String,  _
                    ByVal Original_Employee_City As String,  _
                    ByVal Original_Employee_Province As String,  _
                    ByVal Original_Employee_Postal_Code As Decimal,  _
                    ByVal Original_Employee_Position As String,  _
                    ByVal Original_Employee_Admin_Level As Integer,  _
                    ByVal Original_Employee_Active_Status As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Employee_ID,Integer)
            If (Original_Employee_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_FName")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Employee_FName,String)
            End If
            If (Original_Employee_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_SName")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Employee_SName,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Employee_DOB,Date)
            If (Original_Employee_Gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Gender")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Employee_Gender,String)
            End If
            If (Original_Employee_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Phone_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Employee_Phone_No,String)
            End If
            If (Original_Employee_Alt_Phone_No Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Employee_Alt_Phone_No,String)
            End If
            If (Original_Employee_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Email")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Employee_Email,String)
            End If
            If (Original_Employee_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Password")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Employee_Password,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Employee_SA_ID_No,Decimal)
            If (Original_Employee_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Street_Addr_1")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Employee_Street_Addr_1,String)
            End If
            If (Original_Employee_Street_Addr_2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Employee_Street_Addr_2,String)
            End If
            If (Original_Employee_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Suburb")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Employee_Suburb,String)
            End If
            If (Original_Employee_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_City")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Employee_City,String)
            End If
            If (Original_Employee_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Province")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Employee_Province,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Employee_Postal_Code,Decimal)
            If (Original_Employee_Position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Position")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Employee_Position,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_Employee_Admin_Level,Integer)
            If (Original_Employee_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Active_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Employee_Active_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Employee_FName As String,  _
                    ByVal Employee_SName As String,  _
                    ByVal Employee_DOB As Date,  _
                    ByVal Employee_Gender As String,  _
                    ByVal Employee_Phone_No As String,  _
                    ByVal Employee_Alt_Phone_No As String,  _
                    ByVal Employee_Email As String,  _
                    ByVal Employee_Password As String,  _
                    ByVal Employee_SA_ID_No As Decimal,  _
                    ByVal Employee_Street_Addr_1 As String,  _
                    ByVal Employee_Street_Addr_2 As String,  _
                    ByVal Employee_Suburb As String,  _
                    ByVal Employee_City As String,  _
                    ByVal Employee_Province As String,  _
                    ByVal Employee_Postal_Code As Decimal,  _
                    ByVal Employee_Position As String,  _
                    ByVal Employee_Admin_Level As Integer,  _
                    ByVal Employee_Active_Status As String) As Integer
            If (Employee_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_FName")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Employee_FName,String)
            End If
            If (Employee_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_SName")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Employee_SName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Employee_DOB,Date)
            If (Employee_Gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Gender")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Employee_Gender,String)
            End If
            If (Employee_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Phone_No")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Employee_Phone_No,String)
            End If
            If (Employee_Alt_Phone_No Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Employee_Alt_Phone_No,String)
            End If
            If (Employee_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Email")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Employee_Email,String)
            End If
            If (Employee_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Password")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Employee_Password,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Employee_SA_ID_No,Decimal)
            If (Employee_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Street_Addr_1")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Employee_Street_Addr_1,String)
            End If
            If (Employee_Street_Addr_2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Employee_Street_Addr_2,String)
            End If
            If (Employee_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Suburb")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Employee_Suburb,String)
            End If
            If (Employee_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_City")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Employee_City,String)
            End If
            If (Employee_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Province")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Employee_Province,String)
            End If
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(Employee_Postal_Code,Decimal)
            If (Employee_Position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Position")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Employee_Position,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(Employee_Admin_Level,Integer)
            If (Employee_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Active_Status")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Employee_Active_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Employee_FName As String,  _
                    ByVal Employee_SName As String,  _
                    ByVal Employee_DOB As Date,  _
                    ByVal Employee_Gender As String,  _
                    ByVal Employee_Phone_No As String,  _
                    ByVal Employee_Alt_Phone_No As String,  _
                    ByVal Employee_Email As String,  _
                    ByVal Employee_Password As String,  _
                    ByVal Employee_SA_ID_No As Decimal,  _
                    ByVal Employee_Street_Addr_1 As String,  _
                    ByVal Employee_Street_Addr_2 As String,  _
                    ByVal Employee_Suburb As String,  _
                    ByVal Employee_City As String,  _
                    ByVal Employee_Province As String,  _
                    ByVal Employee_Postal_Code As Decimal,  _
                    ByVal Employee_Position As String,  _
                    ByVal Employee_Admin_Level As Integer,  _
                    ByVal Employee_Active_Status As String,  _
                    ByVal Original_Employee_ID As Integer,  _
                    ByVal Original_Employee_FName As String,  _
                    ByVal Original_Employee_SName As String,  _
                    ByVal Original_Employee_DOB As Date,  _
                    ByVal Original_Employee_Gender As String,  _
                    ByVal Original_Employee_Phone_No As String,  _
                    ByVal Original_Employee_Alt_Phone_No As String,  _
                    ByVal Original_Employee_Email As String,  _
                    ByVal Original_Employee_Password As String,  _
                    ByVal Original_Employee_SA_ID_No As Decimal,  _
                    ByVal Original_Employee_Street_Addr_1 As String,  _
                    ByVal Original_Employee_Street_Addr_2 As String,  _
                    ByVal Original_Employee_Suburb As String,  _
                    ByVal Original_Employee_City As String,  _
                    ByVal Original_Employee_Province As String,  _
                    ByVal Original_Employee_Postal_Code As Decimal,  _
                    ByVal Original_Employee_Position As String,  _
                    ByVal Original_Employee_Admin_Level As Integer,  _
                    ByVal Original_Employee_Active_Status As String,  _
                    ByVal Employee_ID As Integer) As Integer
            If (Employee_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_FName")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Employee_FName,String)
            End If
            If (Employee_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_SName")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Employee_SName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Employee_DOB,Date)
            If (Employee_Gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Gender")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Employee_Gender,String)
            End If
            If (Employee_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Phone_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Employee_Phone_No,String)
            End If
            If (Employee_Alt_Phone_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Employee_Alt_Phone_No,String)
            End If
            If (Employee_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Employee_Email,String)
            End If
            If (Employee_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Password")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Employee_Password,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Employee_SA_ID_No,Decimal)
            If (Employee_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Street_Addr_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Employee_Street_Addr_1,String)
            End If
            If (Employee_Street_Addr_2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Employee_Street_Addr_2,String)
            End If
            If (Employee_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Suburb")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Employee_Suburb,String)
            End If
            If (Employee_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_City")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Employee_City,String)
            End If
            If (Employee_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Employee_Province,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Employee_Postal_Code,Decimal)
            If (Employee_Position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Position")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Employee_Position,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Employee_Admin_Level,Integer)
            If (Employee_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Employee_Active_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Employee_Active_Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Employee_ID,Integer)
            If (Original_Employee_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_FName")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Employee_FName,String)
            End If
            If (Original_Employee_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_SName")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Employee_SName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Employee_DOB,Date)
            If (Original_Employee_Gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Gender")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Employee_Gender,String)
            End If
            If (Original_Employee_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Phone_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Employee_Phone_No,String)
            End If
            If (Original_Employee_Alt_Phone_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Employee_Alt_Phone_No,String)
            End If
            If (Original_Employee_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Employee_Email,String)
            End If
            If (Original_Employee_Password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Password")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Employee_Password,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Employee_SA_ID_No,Decimal)
            If (Original_Employee_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Street_Addr_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Employee_Street_Addr_1,String)
            End If
            If (Original_Employee_Street_Addr_2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Employee_Street_Addr_2,String)
            End If
            If (Original_Employee_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Suburb")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Employee_Suburb,String)
            End If
            If (Original_Employee_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_City")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Employee_City,String)
            End If
            If (Original_Employee_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Employee_Province,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Employee_Postal_Code,Decimal)
            If (Original_Employee_Position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Position")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Employee_Position,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Employee_Admin_Level,Integer)
            If (Original_Employee_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Employee_Active_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Employee_Active_Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Employee_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Employee_FName As String,  _
                    ByVal Employee_SName As String,  _
                    ByVal Employee_DOB As Date,  _
                    ByVal Employee_Gender As String,  _
                    ByVal Employee_Phone_No As String,  _
                    ByVal Employee_Alt_Phone_No As String,  _
                    ByVal Employee_Email As String,  _
                    ByVal Employee_Password As String,  _
                    ByVal Employee_SA_ID_No As Decimal,  _
                    ByVal Employee_Street_Addr_1 As String,  _
                    ByVal Employee_Street_Addr_2 As String,  _
                    ByVal Employee_Suburb As String,  _
                    ByVal Employee_City As String,  _
                    ByVal Employee_Province As String,  _
                    ByVal Employee_Postal_Code As Decimal,  _
                    ByVal Employee_Position As String,  _
                    ByVal Employee_Admin_Level As Integer,  _
                    ByVal Employee_Active_Status As String,  _
                    ByVal Original_Employee_ID As Integer,  _
                    ByVal Original_Employee_FName As String,  _
                    ByVal Original_Employee_SName As String,  _
                    ByVal Original_Employee_DOB As Date,  _
                    ByVal Original_Employee_Gender As String,  _
                    ByVal Original_Employee_Phone_No As String,  _
                    ByVal Original_Employee_Alt_Phone_No As String,  _
                    ByVal Original_Employee_Email As String,  _
                    ByVal Original_Employee_Password As String,  _
                    ByVal Original_Employee_SA_ID_No As Decimal,  _
                    ByVal Original_Employee_Street_Addr_1 As String,  _
                    ByVal Original_Employee_Street_Addr_2 As String,  _
                    ByVal Original_Employee_Suburb As String,  _
                    ByVal Original_Employee_City As String,  _
                    ByVal Original_Employee_Province As String,  _
                    ByVal Original_Employee_Postal_Code As Decimal,  _
                    ByVal Original_Employee_Position As String,  _
                    ByVal Original_Employee_Admin_Level As Integer,  _
                    ByVal Original_Employee_Active_Status As String) As Integer
            Return Me.Update(Employee_FName, Employee_SName, Employee_DOB, Employee_Gender, Employee_Phone_No, Employee_Alt_Phone_No, Employee_Email, Employee_Password, Employee_SA_ID_No, Employee_Street_Addr_1, Employee_Street_Addr_2, Employee_Suburb, Employee_City, Employee_Province, Employee_Postal_Code, Employee_Position, Employee_Admin_Level, Employee_Active_Status, Original_Employee_ID, Original_Employee_FName, Original_Employee_SName, Original_Employee_DOB, Original_Employee_Gender, Original_Employee_Phone_No, Original_Employee_Alt_Phone_No, Original_Employee_Email, Original_Employee_Password, Original_Employee_SA_ID_No, Original_Employee_Street_Addr_1, Original_Employee_Street_Addr_2, Original_Employee_Suburb, Original_Employee_City, Original_Employee_Province, Original_Employee_Postal_Code, Original_Employee_Position, Original_Employee_Admin_Level, Original_Employee_Active_Status, Original_Employee_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetUniqueEmailQuery(ByVal EmployeeEmailAddress As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (EmployeeEmailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("EmployeeEmailAddress")
            Else
                command.Parameters(0).Value = CType(EmployeeEmailAddress,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProductTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Product"
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID")
            tableMapping.ColumnMappings.Add("Product_Name", "Product_Name")
            tableMapping.ColumnMappings.Add("Product_Brand", "Product_Brand")
            tableMapping.ColumnMappings.Add("Product_Description", "Product_Description")
            tableMapping.ColumnMappings.Add("Product_Active_Status", "Product_Active_Status")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Product] WHERE (([Product_ID] = @Original_Product_ID) AND ([Pr"& _ 
                "oduct_Name] = @Original_Product_Name) AND ([Product_Brand] = @Original_Product_B"& _ 
                "rand) AND ([Product_Active_Status] = @Original_Product_Active_Status))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_Brand", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Brand", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Active_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Product] ([Product_Name], [Product_Brand], [Product_Descriptio"& _ 
                "n], [Product_Active_Status]) VALUES (@Product_Name, @Product_Brand, @Product_Des"& _ 
                "cription, @Product_Active_Status);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Product_ID, Product_Name, Product_Bra"& _ 
                "nd, Product_Description, Product_Active_Status FROM Product WHERE (Product_ID = "& _ 
                "SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Brand", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Brand", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Description", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Active_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Product] SET [Product_Name] = @Product_Name, [Product_Brand] = @Pro"& _ 
                "duct_Brand, [Product_Description] = @Product_Description, [Product_Active_Status"& _ 
                "] = @Product_Active_Status WHERE (([Product_ID] = @Original_Product_ID) AND ([Pr"& _ 
                "oduct_Name] = @Original_Product_Name) AND ([Product_Brand] = @Original_Product_B"& _ 
                "rand) AND ([Product_Active_Status] = @Original_Product_Active_Status));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "Product_ID, Product_Name, Product_Brand, Product_Description, Product_Active_Sta"& _ 
                "tus FROM Product WHERE (Product_ID = @Product_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Brand", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Brand", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Description", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Active_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_Brand", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Brand", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_Active_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Product_ID, Product_Name, Product_Brand, Product_Description, Product_Acti"& _ 
                "ve_Status FROM dbo.Product"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.ProductDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.ProductDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.ProductDataTable = New group16DataSet.ProductDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As group16DataSet.ProductDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As group16DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Product")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Product_ID As Integer, ByVal Original_Product_Name As String, ByVal Original_Product_Brand As String, ByVal Original_Product_Active_Status As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Product_ID,Integer)
            If (Original_Product_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Product_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Product_Name,String)
            End If
            If (Original_Product_Brand Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Product_Brand")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Product_Brand,String)
            End If
            If (Original_Product_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Product_Active_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Product_Active_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Product_Name As String, ByVal Product_Brand As String, ByVal Product_Description As String, ByVal Product_Active_Status As String) As Integer
            If (Product_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Product_Name,String)
            End If
            If (Product_Brand Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Brand")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Product_Brand,String)
            End If
            If (Product_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Description")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Product_Description,String)
            End If
            If (Product_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Active_Status")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Product_Active_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Product_Name As String, ByVal Product_Brand As String, ByVal Product_Description As String, ByVal Product_Active_Status As String, ByVal Original_Product_ID As Integer, ByVal Original_Product_Name As String, ByVal Original_Product_Brand As String, ByVal Original_Product_Active_Status As String, ByVal Product_ID As Integer) As Integer
            If (Product_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Product_Name,String)
            End If
            If (Product_Brand Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Brand")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Product_Brand,String)
            End If
            If (Product_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Product_Description,String)
            End If
            If (Product_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Active_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Product_Active_Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Product_ID,Integer)
            If (Original_Product_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Product_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Product_Name,String)
            End If
            If (Original_Product_Brand Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Product_Brand")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Product_Brand,String)
            End If
            If (Original_Product_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Product_Active_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Product_Active_Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Product_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Product_Name As String, ByVal Product_Brand As String, ByVal Product_Description As String, ByVal Product_Active_Status As String, ByVal Original_Product_ID As Integer, ByVal Original_Product_Name As String, ByVal Original_Product_Brand As String, ByVal Original_Product_Active_Status As String) As Integer
            Return Me.Update(Product_Name, Product_Brand, Product_Description, Product_Active_Status, Original_Product_ID, Original_Product_Name, Original_Product_Brand, Original_Product_Active_Status, Original_Product_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SupplierTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Supplier"
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Supplier_Name", "Supplier_Name")
            tableMapping.ColumnMappings.Add("Supplier_Street_Addr_1", "Supplier_Street_Addr_1")
            tableMapping.ColumnMappings.Add("Supplier_Street_Addr_2", "Supplier_Street_Addr_2")
            tableMapping.ColumnMappings.Add("Supplier_Suburb", "Supplier_Suburb")
            tableMapping.ColumnMappings.Add("Supplier_City", "Supplier_City")
            tableMapping.ColumnMappings.Add("Supplier_Province", "Supplier_Province")
            tableMapping.ColumnMappings.Add("Supplier_Postal_Code", "Supplier_Postal_Code")
            tableMapping.ColumnMappings.Add("Supplier_Phone_No", "Supplier_Phone_No")
            tableMapping.ColumnMappings.Add("Supplier_Alt_Phone_No", "Supplier_Alt_Phone_No")
            tableMapping.ColumnMappings.Add("Supplier_Email", "Supplier_Email")
            tableMapping.ColumnMappings.Add("Supplier_Password", "Supplier_Password")
            tableMapping.ColumnMappings.Add("Supplier_Rep_FName", "Supplier_Rep_FName")
            tableMapping.ColumnMappings.Add("Supplier_Rep_SName", "Supplier_Rep_SName")
            tableMapping.ColumnMappings.Add("Supplier_Rep_Email", "Supplier_Rep_Email")
            tableMapping.ColumnMappings.Add("Supplier_Rep_Phone_No", "Supplier_Rep_Phone_No")
            tableMapping.ColumnMappings.Add("Supplier_Rep_Alt_Phone_No", "Supplier_Rep_Alt_Phone_No")
            tableMapping.ColumnMappings.Add("Supplier_Active_Status", "Supplier_Active_Status")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Supplier] WHERE (([Supplier_ID] = @Original_Supplier_ID) AND ("& _ 
                "[Supplier_Name] = @Original_Supplier_Name) AND ([Supplier_Street_Addr_1] = @Orig"& _ 
                "inal_Supplier_Street_Addr_1) AND ((@IsNull_Supplier_Street_Addr_2 = 1 AND [Suppl"& _ 
                "ier_Street_Addr_2] IS NULL) OR ([Supplier_Street_Addr_2] = @Original_Supplier_St"& _ 
                "reet_Addr_2)) AND ([Supplier_Suburb] = @Original_Supplier_Suburb) AND ([Supplier"& _ 
                "_City] = @Original_Supplier_City) AND ([Supplier_Province] = @Original_Supplier_"& _ 
                "Province) AND ([Supplier_Postal_Code] = @Original_Supplier_Postal_Code) AND ([Su"& _ 
                "pplier_Phone_No] = @Original_Supplier_Phone_No) AND ((@IsNull_Supplier_Alt_Phone"& _ 
                "_No = 1 AND [Supplier_Alt_Phone_No] IS NULL) OR ([Supplier_Alt_Phone_No] = @Orig"& _ 
                "inal_Supplier_Alt_Phone_No)) AND ([Supplier_Email] = @Original_Supplier_Email) A"& _ 
                "ND ((@IsNull_Supplier_Password = 1 AND [Supplier_Password] IS NULL) OR ([Supplie"& _ 
                "r_Password] = @Original_Supplier_Password)) AND ([Supplier_Rep_FName] = @Origina"& _ 
                "l_Supplier_Rep_FName) AND ([Supplier_Rep_SName] = @Original_Supplier_Rep_SName) "& _ 
                "AND ([Supplier_Rep_Email] = @Original_Supplier_Rep_Email) AND ([Supplier_Rep_Pho"& _ 
                "ne_No] = @Original_Supplier_Rep_Phone_No) AND ((@IsNull_Supplier_Rep_Alt_Phone_N"& _ 
                "o = 1 AND [Supplier_Rep_Alt_Phone_No] IS NULL) OR ([Supplier_Rep_Alt_Phone_No] ="& _ 
                " @Original_Supplier_Rep_Alt_Phone_No)) AND ([Supplier_Active_Status] = @Original"& _ 
                "_Supplier_Active_Status))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supplier_Street_Addr_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Suburb", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_City", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Province", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Supplier_Postal_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supplier_Alt_Phone_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supplier_Password", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Password", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_FName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_SName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supplier_Rep_Alt_Phone_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Active_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Supplier] ([Supplier_Name], [Supplier_Street_Addr_1], [Supplie"& _ 
                "r_Street_Addr_2], [Supplier_Suburb], [Supplier_City], [Supplier_Province], [Supp"& _ 
                "lier_Postal_Code], [Supplier_Phone_No], [Supplier_Alt_Phone_No], [Supplier_Email"& _ 
                "], [Supplier_Password], [Supplier_Rep_FName], [Supplier_Rep_SName], [Supplier_Re"& _ 
                "p_Email], [Supplier_Rep_Phone_No], [Supplier_Rep_Alt_Phone_No], [Supplier_Active"& _ 
                "_Status]) VALUES (@Supplier_Name, @Supplier_Street_Addr_1, @Supplier_Street_Addr"& _ 
                "_2, @Supplier_Suburb, @Supplier_City, @Supplier_Province, @Supplier_Postal_Code,"& _ 
                " @Supplier_Phone_No, @Supplier_Alt_Phone_No, @Supplier_Email, @Supplier_Password"& _ 
                ", @Supplier_Rep_FName, @Supplier_Rep_SName, @Supplier_Rep_Email, @Supplier_Rep_P"& _ 
                "hone_No, @Supplier_Rep_Alt_Phone_No, @Supplier_Active_Status);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Supplier_"& _ 
                "ID, Supplier_Name, Supplier_Street_Addr_1, Supplier_Street_Addr_2, Supplier_Subu"& _ 
                "rb, Supplier_City, Supplier_Province, Supplier_Postal_Code, Supplier_Phone_No, S"& _ 
                "upplier_Alt_Phone_No, Supplier_Email, Supplier_Password, Supplier_Rep_FName, Sup"& _ 
                "plier_Rep_SName, Supplier_Rep_Email, Supplier_Rep_Phone_No, Supplier_Rep_Alt_Pho"& _ 
                "ne_No, Supplier_Active_Status FROM Supplier WHERE (Supplier_ID = SCOPE_IDENTITY("& _ 
                "))"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Suburb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Province", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Supplier_Postal_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Alt_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_FName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_SName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Alt_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Active_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Supplier] SET [Supplier_Name] = @Supplier_Name, [Supplier_Street_Ad"& _ 
                "dr_1] = @Supplier_Street_Addr_1, [Supplier_Street_Addr_2] = @Supplier_Street_Add"& _ 
                "r_2, [Supplier_Suburb] = @Supplier_Suburb, [Supplier_City] = @Supplier_City, [Su"& _ 
                "pplier_Province] = @Supplier_Province, [Supplier_Postal_Code] = @Supplier_Postal"& _ 
                "_Code, [Supplier_Phone_No] = @Supplier_Phone_No, [Supplier_Alt_Phone_No] = @Supp"& _ 
                "lier_Alt_Phone_No, [Supplier_Email] = @Supplier_Email, [Supplier_Password] = @Su"& _ 
                "pplier_Password, [Supplier_Rep_FName] = @Supplier_Rep_FName, [Supplier_Rep_SName"& _ 
                "] = @Supplier_Rep_SName, [Supplier_Rep_Email] = @Supplier_Rep_Email, [Supplier_R"& _ 
                "ep_Phone_No] = @Supplier_Rep_Phone_No, [Supplier_Rep_Alt_Phone_No] = @Supplier_R"& _ 
                "ep_Alt_Phone_No, [Supplier_Active_Status] = @Supplier_Active_Status WHERE (([Sup"& _ 
                "plier_ID] = @Original_Supplier_ID) AND ([Supplier_Name] = @Original_Supplier_Nam"& _ 
                "e) AND ([Supplier_Street_Addr_1] = @Original_Supplier_Street_Addr_1) AND ((@IsNu"& _ 
                "ll_Supplier_Street_Addr_2 = 1 AND [Supplier_Street_Addr_2] IS NULL) OR ([Supplie"& _ 
                "r_Street_Addr_2] = @Original_Supplier_Street_Addr_2)) AND ([Supplier_Suburb] = @"& _ 
                "Original_Supplier_Suburb) AND ([Supplier_City] = @Original_Supplier_City) AND (["& _ 
                "Supplier_Province] = @Original_Supplier_Province) AND ([Supplier_Postal_Code] = "& _ 
                "@Original_Supplier_Postal_Code) AND ([Supplier_Phone_No] = @Original_Supplier_Ph"& _ 
                "one_No) AND ((@IsNull_Supplier_Alt_Phone_No = 1 AND [Supplier_Alt_Phone_No] IS N"& _ 
                "ULL) OR ([Supplier_Alt_Phone_No] = @Original_Supplier_Alt_Phone_No)) AND ([Suppl"& _ 
                "ier_Email] = @Original_Supplier_Email) AND ((@IsNull_Supplier_Password = 1 AND ["& _ 
                "Supplier_Password] IS NULL) OR ([Supplier_Password] = @Original_Supplier_Passwor"& _ 
                "d)) AND ([Supplier_Rep_FName] = @Original_Supplier_Rep_FName) AND ([Supplier_Rep"& _ 
                "_SName] = @Original_Supplier_Rep_SName) AND ([Supplier_Rep_Email] = @Original_Su"& _ 
                "pplier_Rep_Email) AND ([Supplier_Rep_Phone_No] = @Original_Supplier_Rep_Phone_No"& _ 
                ") AND ((@IsNull_Supplier_Rep_Alt_Phone_No = 1 AND [Supplier_Rep_Alt_Phone_No] IS"& _ 
                " NULL) OR ([Supplier_Rep_Alt_Phone_No] = @Original_Supplier_Rep_Alt_Phone_No)) A"& _ 
                "ND ([Supplier_Active_Status] = @Original_Supplier_Active_Status));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Suppl"& _ 
                "ier_ID, Supplier_Name, Supplier_Street_Addr_1, Supplier_Street_Addr_2, Supplier_"& _ 
                "Suburb, Supplier_City, Supplier_Province, Supplier_Postal_Code, Supplier_Phone_N"& _ 
                "o, Supplier_Alt_Phone_No, Supplier_Email, Supplier_Password, Supplier_Rep_FName,"& _ 
                " Supplier_Rep_SName, Supplier_Rep_Email, Supplier_Rep_Phone_No, Supplier_Rep_Alt"& _ 
                "_Phone_No, Supplier_Active_Status FROM Supplier WHERE (Supplier_ID = @Supplier_I"& _ 
                "D)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Suburb", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_City", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Province", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Supplier_Postal_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Alt_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_FName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_SName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Rep_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Alt_Phone_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Active_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Street_Addr_1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supplier_Street_Addr_2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Street_Addr_2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Street_Addr_2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Suburb", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Suburb", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_City", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_City", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Province", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Province", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Postal_Code", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "Supplier_Postal_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supplier_Alt_Phone_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supplier_Password", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Password", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Password", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_FName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_FName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_SName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_SName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_Email", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supplier_Rep_Alt_Phone_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Rep_Alt_Phone_No", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Alt_Phone_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_Active_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Active_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Supplier_ID, Supplier_Name, Supplier_Street_Addr_1, Supplier_Street_Addr_2"& _ 
                ", Supplier_Suburb, Supplier_City, Supplier_Province, Supplier_Postal_Code, Suppl"& _ 
                "ier_Phone_No, Supplier_Alt_Phone_No, Supplier_Email, Supplier_Password, Supplier"& _ 
                "_Rep_FName, Supplier_Rep_SName, Supplier_Rep_Email, Supplier_Rep_Phone_No, Suppl"& _ 
                "ier_Rep_Alt_Phone_No, Supplier_Active_Status FROM dbo.Supplier"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        COUNT(*) AS Supplier_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Supplier"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Su"& _ 
                "pplier_Email = @SupplierEmailAddress) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (Supplier_Rep"& _ 
                "_Email = @SupplierRepEmailAddress)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY Supplier_ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SupplierEmailAddress", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SupplierRepEmailAddress", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_Rep_Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.SupplierDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.SupplierDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.SupplierDataTable = New group16DataSet.SupplierDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As group16DataSet.SupplierDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As group16DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Supplier")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Supplier_ID As Integer,  _
                    ByVal Original_Supplier_Name As String,  _
                    ByVal Original_Supplier_Street_Addr_1 As String,  _
                    ByVal Original_Supplier_Street_Addr_2 As String,  _
                    ByVal Original_Supplier_Suburb As String,  _
                    ByVal Original_Supplier_City As String,  _
                    ByVal Original_Supplier_Province As String,  _
                    ByVal Original_Supplier_Postal_Code As Decimal,  _
                    ByVal Original_Supplier_Phone_No As String,  _
                    ByVal Original_Supplier_Alt_Phone_No As String,  _
                    ByVal Original_Supplier_Email As String,  _
                    ByVal Original_Supplier_Password As String,  _
                    ByVal Original_Supplier_Rep_FName As String,  _
                    ByVal Original_Supplier_Rep_SName As String,  _
                    ByVal Original_Supplier_Rep_Email As String,  _
                    ByVal Original_Supplier_Rep_Phone_No As String,  _
                    ByVal Original_Supplier_Rep_Alt_Phone_No As String,  _
                    ByVal Original_Supplier_Active_Status As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Supplier_ID,Integer)
            If (Original_Supplier_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Supplier_Name,String)
            End If
            If (Original_Supplier_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Street_Addr_1")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Supplier_Street_Addr_1,String)
            End If
            If (Original_Supplier_Street_Addr_2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Supplier_Street_Addr_2,String)
            End If
            If (Original_Supplier_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Suburb")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Supplier_Suburb,String)
            End If
            If (Original_Supplier_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_City")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Supplier_City,String)
            End If
            If (Original_Supplier_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Province")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Supplier_Province,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Supplier_Postal_Code,Decimal)
            If (Original_Supplier_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Phone_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Supplier_Phone_No,String)
            End If
            If (Original_Supplier_Alt_Phone_No Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Supplier_Alt_Phone_No,String)
            End If
            If (Original_Supplier_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Email")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Supplier_Email,String)
            End If
            If (Original_Supplier_Password Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Supplier_Password,String)
            End If
            If (Original_Supplier_Rep_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Rep_FName")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Supplier_Rep_FName,String)
            End If
            If (Original_Supplier_Rep_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Rep_SName")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Supplier_Rep_SName,String)
            End If
            If (Original_Supplier_Rep_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Rep_Email")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_Supplier_Rep_Email,String)
            End If
            If (Original_Supplier_Rep_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Rep_Phone_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Supplier_Rep_Phone_No,String)
            End If
            If (Original_Supplier_Rep_Alt_Phone_No Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Supplier_Rep_Alt_Phone_No,String)
            End If
            If (Original_Supplier_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Active_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_Supplier_Active_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Supplier_Name As String,  _
                    ByVal Supplier_Street_Addr_1 As String,  _
                    ByVal Supplier_Street_Addr_2 As String,  _
                    ByVal Supplier_Suburb As String,  _
                    ByVal Supplier_City As String,  _
                    ByVal Supplier_Province As String,  _
                    ByVal Supplier_Postal_Code As Decimal,  _
                    ByVal Supplier_Phone_No As String,  _
                    ByVal Supplier_Alt_Phone_No As String,  _
                    ByVal Supplier_Email As String,  _
                    ByVal Supplier_Password As String,  _
                    ByVal Supplier_Rep_FName As String,  _
                    ByVal Supplier_Rep_SName As String,  _
                    ByVal Supplier_Rep_Email As String,  _
                    ByVal Supplier_Rep_Phone_No As String,  _
                    ByVal Supplier_Rep_Alt_Phone_No As String,  _
                    ByVal Supplier_Active_Status As String) As Integer
            If (Supplier_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Supplier_Name,String)
            End If
            If (Supplier_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Street_Addr_1")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Supplier_Street_Addr_1,String)
            End If
            If (Supplier_Street_Addr_2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Supplier_Street_Addr_2,String)
            End If
            If (Supplier_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Suburb")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Supplier_Suburb,String)
            End If
            If (Supplier_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_City")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Supplier_City,String)
            End If
            If (Supplier_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Province")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Supplier_Province,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Supplier_Postal_Code,Decimal)
            If (Supplier_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Phone_No")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Supplier_Phone_No,String)
            End If
            If (Supplier_Alt_Phone_No Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Supplier_Alt_Phone_No,String)
            End If
            If (Supplier_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Email")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Supplier_Email,String)
            End If
            If (Supplier_Password Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Supplier_Password,String)
            End If
            If (Supplier_Rep_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Rep_FName")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Supplier_Rep_FName,String)
            End If
            If (Supplier_Rep_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Rep_SName")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Supplier_Rep_SName,String)
            End If
            If (Supplier_Rep_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Rep_Email")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Supplier_Rep_Email,String)
            End If
            If (Supplier_Rep_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Rep_Phone_No")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Supplier_Rep_Phone_No,String)
            End If
            If (Supplier_Rep_Alt_Phone_No Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Supplier_Rep_Alt_Phone_No,String)
            End If
            If (Supplier_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Active_Status")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Supplier_Active_Status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Supplier_Name As String,  _
                    ByVal Supplier_Street_Addr_1 As String,  _
                    ByVal Supplier_Street_Addr_2 As String,  _
                    ByVal Supplier_Suburb As String,  _
                    ByVal Supplier_City As String,  _
                    ByVal Supplier_Province As String,  _
                    ByVal Supplier_Postal_Code As Decimal,  _
                    ByVal Supplier_Phone_No As String,  _
                    ByVal Supplier_Alt_Phone_No As String,  _
                    ByVal Supplier_Email As String,  _
                    ByVal Supplier_Password As String,  _
                    ByVal Supplier_Rep_FName As String,  _
                    ByVal Supplier_Rep_SName As String,  _
                    ByVal Supplier_Rep_Email As String,  _
                    ByVal Supplier_Rep_Phone_No As String,  _
                    ByVal Supplier_Rep_Alt_Phone_No As String,  _
                    ByVal Supplier_Active_Status As String,  _
                    ByVal Original_Supplier_ID As Integer,  _
                    ByVal Original_Supplier_Name As String,  _
                    ByVal Original_Supplier_Street_Addr_1 As String,  _
                    ByVal Original_Supplier_Street_Addr_2 As String,  _
                    ByVal Original_Supplier_Suburb As String,  _
                    ByVal Original_Supplier_City As String,  _
                    ByVal Original_Supplier_Province As String,  _
                    ByVal Original_Supplier_Postal_Code As Decimal,  _
                    ByVal Original_Supplier_Phone_No As String,  _
                    ByVal Original_Supplier_Alt_Phone_No As String,  _
                    ByVal Original_Supplier_Email As String,  _
                    ByVal Original_Supplier_Password As String,  _
                    ByVal Original_Supplier_Rep_FName As String,  _
                    ByVal Original_Supplier_Rep_SName As String,  _
                    ByVal Original_Supplier_Rep_Email As String,  _
                    ByVal Original_Supplier_Rep_Phone_No As String,  _
                    ByVal Original_Supplier_Rep_Alt_Phone_No As String,  _
                    ByVal Original_Supplier_Active_Status As String,  _
                    ByVal Supplier_ID As Integer) As Integer
            If (Supplier_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Supplier_Name,String)
            End If
            If (Supplier_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Street_Addr_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Supplier_Street_Addr_1,String)
            End If
            If (Supplier_Street_Addr_2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Supplier_Street_Addr_2,String)
            End If
            If (Supplier_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Suburb")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Supplier_Suburb,String)
            End If
            If (Supplier_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_City")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Supplier_City,String)
            End If
            If (Supplier_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Supplier_Province,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Supplier_Postal_Code,Decimal)
            If (Supplier_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Phone_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Supplier_Phone_No,String)
            End If
            If (Supplier_Alt_Phone_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Supplier_Alt_Phone_No,String)
            End If
            If (Supplier_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Supplier_Email,String)
            End If
            If (Supplier_Password Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Supplier_Password,String)
            End If
            If (Supplier_Rep_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Rep_FName")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Supplier_Rep_FName,String)
            End If
            If (Supplier_Rep_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Rep_SName")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Supplier_Rep_SName,String)
            End If
            If (Supplier_Rep_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Rep_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Supplier_Rep_Email,String)
            End If
            If (Supplier_Rep_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Rep_Phone_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Supplier_Rep_Phone_No,String)
            End If
            If (Supplier_Rep_Alt_Phone_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Supplier_Rep_Alt_Phone_No,String)
            End If
            If (Supplier_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supplier_Active_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Supplier_Active_Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Supplier_ID,Integer)
            If (Original_Supplier_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Supplier_Name,String)
            End If
            If (Original_Supplier_Street_Addr_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Street_Addr_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Supplier_Street_Addr_1,String)
            End If
            If (Original_Supplier_Street_Addr_2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Supplier_Street_Addr_2,String)
            End If
            If (Original_Supplier_Suburb Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Suburb")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Supplier_Suburb,String)
            End If
            If (Original_Supplier_City Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_City")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Supplier_City,String)
            End If
            If (Original_Supplier_Province Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Province")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Supplier_Province,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Supplier_Postal_Code,Decimal)
            If (Original_Supplier_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Phone_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Supplier_Phone_No,String)
            End If
            If (Original_Supplier_Alt_Phone_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Supplier_Alt_Phone_No,String)
            End If
            If (Original_Supplier_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Supplier_Email,String)
            End If
            If (Original_Supplier_Password Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Supplier_Password,String)
            End If
            If (Original_Supplier_Rep_FName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Rep_FName")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Supplier_Rep_FName,String)
            End If
            If (Original_Supplier_Rep_SName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Rep_SName")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Supplier_Rep_SName,String)
            End If
            If (Original_Supplier_Rep_Email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Rep_Email")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Supplier_Rep_Email,String)
            End If
            If (Original_Supplier_Rep_Phone_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Rep_Phone_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Supplier_Rep_Phone_No,String)
            End If
            If (Original_Supplier_Rep_Alt_Phone_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Supplier_Rep_Alt_Phone_No,String)
            End If
            If (Original_Supplier_Active_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supplier_Active_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Supplier_Active_Status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Supplier_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Supplier_Name As String,  _
                    ByVal Supplier_Street_Addr_1 As String,  _
                    ByVal Supplier_Street_Addr_2 As String,  _
                    ByVal Supplier_Suburb As String,  _
                    ByVal Supplier_City As String,  _
                    ByVal Supplier_Province As String,  _
                    ByVal Supplier_Postal_Code As Decimal,  _
                    ByVal Supplier_Phone_No As String,  _
                    ByVal Supplier_Alt_Phone_No As String,  _
                    ByVal Supplier_Email As String,  _
                    ByVal Supplier_Password As String,  _
                    ByVal Supplier_Rep_FName As String,  _
                    ByVal Supplier_Rep_SName As String,  _
                    ByVal Supplier_Rep_Email As String,  _
                    ByVal Supplier_Rep_Phone_No As String,  _
                    ByVal Supplier_Rep_Alt_Phone_No As String,  _
                    ByVal Supplier_Active_Status As String,  _
                    ByVal Original_Supplier_ID As Integer,  _
                    ByVal Original_Supplier_Name As String,  _
                    ByVal Original_Supplier_Street_Addr_1 As String,  _
                    ByVal Original_Supplier_Street_Addr_2 As String,  _
                    ByVal Original_Supplier_Suburb As String,  _
                    ByVal Original_Supplier_City As String,  _
                    ByVal Original_Supplier_Province As String,  _
                    ByVal Original_Supplier_Postal_Code As Decimal,  _
                    ByVal Original_Supplier_Phone_No As String,  _
                    ByVal Original_Supplier_Alt_Phone_No As String,  _
                    ByVal Original_Supplier_Email As String,  _
                    ByVal Original_Supplier_Password As String,  _
                    ByVal Original_Supplier_Rep_FName As String,  _
                    ByVal Original_Supplier_Rep_SName As String,  _
                    ByVal Original_Supplier_Rep_Email As String,  _
                    ByVal Original_Supplier_Rep_Phone_No As String,  _
                    ByVal Original_Supplier_Rep_Alt_Phone_No As String,  _
                    ByVal Original_Supplier_Active_Status As String) As Integer
            Return Me.Update(Supplier_Name, Supplier_Street_Addr_1, Supplier_Street_Addr_2, Supplier_Suburb, Supplier_City, Supplier_Province, Supplier_Postal_Code, Supplier_Phone_No, Supplier_Alt_Phone_No, Supplier_Email, Supplier_Password, Supplier_Rep_FName, Supplier_Rep_SName, Supplier_Rep_Email, Supplier_Rep_Phone_No, Supplier_Rep_Alt_Phone_No, Supplier_Active_Status, Original_Supplier_ID, Original_Supplier_Name, Original_Supplier_Street_Addr_1, Original_Supplier_Street_Addr_2, Original_Supplier_Suburb, Original_Supplier_City, Original_Supplier_Province, Original_Supplier_Postal_Code, Original_Supplier_Phone_No, Original_Supplier_Alt_Phone_No, Original_Supplier_Email, Original_Supplier_Password, Original_Supplier_Rep_FName, Original_Supplier_Rep_SName, Original_Supplier_Rep_Email, Original_Supplier_Rep_Phone_No, Original_Supplier_Rep_Alt_Phone_No, Original_Supplier_Active_Status, Original_Supplier_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckUniqueSupplierEmailQuery(ByVal SupplierEmailAddress As String, ByVal SupplierRepEmailAddress As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (SupplierEmailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SupplierEmailAddress")
            Else
                command.Parameters(0).Value = CType(SupplierEmailAddress,String)
            End If
            If (SupplierRepEmailAddress Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SupplierRepEmailAddress")
            Else
                command.Parameters(1).Value = CType(SupplierRepEmailAddress,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)()
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Supplier_QuoteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Supplier_Quote"
            tableMapping.ColumnMappings.Add("Supp_Quote_Reference_ID", "Supp_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Supp_Quote_Total_Price", "Supp_Quote_Total_Price")
            tableMapping.ColumnMappings.Add("Supp_Quote_Date_Recieved", "Supp_Quote_Date_Recieved")
            tableMapping.ColumnMappings.Add("Supp_Quote_Acceptance_Status", "Supp_Quote_Acceptance_Status")
            tableMapping.ColumnMappings.Add("Supp_Quote_Date_Acceptance", "Supp_Quote_Date_Acceptance")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Supplier_Quote] WHERE (([Supp_Quote_Reference_ID] = @Original_"& _ 
                "Supp_Quote_Reference_ID) AND ([Supplier_ID] = @Original_Supplier_ID) AND ([Supp_"& _ 
                "Quote_Total_Price] = @Original_Supp_Quote_Total_Price) AND ([Supp_Quote_Date_Rec"& _ 
                "ieved] = @Original_Supp_Quote_Date_Recieved) AND ([Supp_Quote_Acceptance_Status]"& _ 
                " = @Original_Supp_Quote_Acceptance_Status) AND ((@IsNull_Supp_Quote_Date_Accepta"& _ 
                "nce = 1 AND [Supp_Quote_Date_Acceptance] IS NULL) OR ([Supp_Quote_Date_Acceptanc"& _ 
                "e] = @Original_Supp_Quote_Date_Acceptance)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Quote_Total_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Date_Recieved", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Recieved", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Acceptance_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Acceptance_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supp_Quote_Date_Acceptance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Acceptance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Date_Acceptance", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Acceptance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Supplier_Quote] ([Supplier_ID], [Supp_Quote_Total_Price], [Sup"& _ 
                "p_Quote_Date_Recieved], [Supp_Quote_Acceptance_Status], [Supp_Quote_Date_Accepta"& _ 
                "nce]) VALUES (@Supplier_ID, @Supp_Quote_Total_Price, @Supp_Quote_Date_Recieved, "& _ 
                "@Supp_Quote_Acceptance_Status, @Supp_Quote_Date_Acceptance);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Supp_Quote_"& _ 
                "Reference_ID, Supplier_ID, Supp_Quote_Total_Price, Supp_Quote_Date_Recieved, Sup"& _ 
                "p_Quote_Acceptance_Status, Supp_Quote_Date_Acceptance FROM Supplier_Quote WHERE "& _ 
                "(Supp_Quote_Reference_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Quote_Total_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Date_Recieved", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Recieved", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Acceptance_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Acceptance_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Date_Acceptance", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Acceptance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Supplier_Quote] SET [Supplier_ID] = @Supplier_ID, [Supp_Quote_Total"& _ 
                "_Price] = @Supp_Quote_Total_Price, [Supp_Quote_Date_Recieved] = @Supp_Quote_Date"& _ 
                "_Recieved, [Supp_Quote_Acceptance_Status] = @Supp_Quote_Acceptance_Status, [Supp"& _ 
                "_Quote_Date_Acceptance] = @Supp_Quote_Date_Acceptance WHERE (([Supp_Quote_Refere"& _ 
                "nce_ID] = @Original_Supp_Quote_Reference_ID) AND ([Supplier_ID] = @Original_Supp"& _ 
                "lier_ID) AND ([Supp_Quote_Total_Price] = @Original_Supp_Quote_Total_Price) AND ("& _ 
                "[Supp_Quote_Date_Recieved] = @Original_Supp_Quote_Date_Recieved) AND ([Supp_Quot"& _ 
                "e_Acceptance_Status] = @Original_Supp_Quote_Acceptance_Status) AND ((@IsNull_Sup"& _ 
                "p_Quote_Date_Acceptance = 1 AND [Supp_Quote_Date_Acceptance] IS NULL) OR ([Supp_"& _ 
                "Quote_Date_Acceptance] = @Original_Supp_Quote_Date_Acceptance)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Supp_Q"& _ 
                "uote_Reference_ID, Supplier_ID, Supp_Quote_Total_Price, Supp_Quote_Date_Recieved"& _ 
                ", Supp_Quote_Acceptance_Status, Supp_Quote_Date_Acceptance FROM Supplier_Quote W"& _ 
                "HERE (Supp_Quote_Reference_ID = @Supp_Quote_Reference_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Quote_Total_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Date_Recieved", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Recieved", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Acceptance_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Acceptance_Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Date_Acceptance", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Acceptance", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supplier_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supplier_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Total_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Quote_Total_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Date_Recieved", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Recieved", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Acceptance_Status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Acceptance_Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Supp_Quote_Date_Acceptance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Acceptance", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Date_Acceptance", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Date_Acceptance", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Supp_Quote_Reference_ID, Supplier_ID, Supp_Quote_Total_Price, Supp_Quote_D"& _ 
                "ate_Recieved, Supp_Quote_Acceptance_Status, Supp_Quote_Date_Acceptance FROM dbo."& _ 
                "Supplier_Quote"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE       Supplier_Quote"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Supp_Quote_Total_Price = @Total"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "WHERE        (Supp_Quote_Reference_ID = @Original_Supp_Quote_Reference_ID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Total", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Quote_Total_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "UPDATE       Supplier_Quote"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Supp_Quote_Date_Acceptance = NULL"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Supp_Quote_Reference_ID = @Original_Supp_Quote_Reference_ID);  "
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.Supplier_QuoteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.Supplier_QuoteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.Supplier_QuoteDataTable = New group16DataSet.Supplier_QuoteDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As group16DataSet.Supplier_QuoteDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As group16DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Supplier_Quote")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Supp_Quote_Reference_ID As Integer, ByVal Original_Supplier_ID As Integer, ByVal Original_Supp_Quote_Total_Price As Decimal, ByVal Original_Supp_Quote_Date_Recieved As Date, ByVal Original_Supp_Quote_Acceptance_Status As String, ByVal Original_Supp_Quote_Date_Acceptance As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Supp_Quote_Reference_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Supplier_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Supp_Quote_Total_Price,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Supp_Quote_Date_Recieved,Date)
            If (Original_Supp_Quote_Acceptance_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supp_Quote_Acceptance_Status")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Supp_Quote_Acceptance_Status,String)
            End If
            If (Original_Supp_Quote_Date_Acceptance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Supp_Quote_Date_Acceptance.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Supplier_ID As Integer, ByVal Supp_Quote_Total_Price As Decimal, ByVal Supp_Quote_Date_Recieved As Date, ByVal Supp_Quote_Acceptance_Status As String, ByVal Supp_Quote_Date_Acceptance As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Supplier_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Supp_Quote_Total_Price,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Supp_Quote_Date_Recieved,Date)
            If (Supp_Quote_Acceptance_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supp_Quote_Acceptance_Status")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Supp_Quote_Acceptance_Status,String)
            End If
            If (Supp_Quote_Date_Acceptance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Supp_Quote_Date_Acceptance.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Supplier_ID As Integer, ByVal Supp_Quote_Total_Price As Decimal, ByVal Supp_Quote_Date_Recieved As Date, ByVal Supp_Quote_Acceptance_Status As String, ByVal Supp_Quote_Date_Acceptance As Global.System.Nullable(Of Date), ByVal Original_Supp_Quote_Reference_ID As Integer, ByVal Original_Supplier_ID As Integer, ByVal Original_Supp_Quote_Total_Price As Decimal, ByVal Original_Supp_Quote_Date_Recieved As Date, ByVal Original_Supp_Quote_Acceptance_Status As String, ByVal Original_Supp_Quote_Date_Acceptance As Global.System.Nullable(Of Date), ByVal Supp_Quote_Reference_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Supplier_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Supp_Quote_Total_Price,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Supp_Quote_Date_Recieved,Date)
            If (Supp_Quote_Acceptance_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Supp_Quote_Acceptance_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Supp_Quote_Acceptance_Status,String)
            End If
            If (Supp_Quote_Date_Acceptance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Supp_Quote_Date_Acceptance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Supp_Quote_Reference_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Supplier_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Supp_Quote_Total_Price,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Supp_Quote_Date_Recieved,Date)
            If (Original_Supp_Quote_Acceptance_Status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Supp_Quote_Acceptance_Status")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Supp_Quote_Acceptance_Status,String)
            End If
            If (Original_Supp_Quote_Date_Acceptance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Supp_Quote_Date_Acceptance.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Supp_Quote_Reference_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Supplier_ID As Integer, ByVal Supp_Quote_Total_Price As Decimal, ByVal Supp_Quote_Date_Recieved As Date, ByVal Supp_Quote_Acceptance_Status As String, ByVal Supp_Quote_Date_Acceptance As Global.System.Nullable(Of Date), ByVal Original_Supp_Quote_Reference_ID As Integer, ByVal Original_Supplier_ID As Integer, ByVal Original_Supp_Quote_Total_Price As Decimal, ByVal Original_Supp_Quote_Date_Recieved As Date, ByVal Original_Supp_Quote_Acceptance_Status As String, ByVal Original_Supp_Quote_Date_Acceptance As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Supplier_ID, Supp_Quote_Total_Price, Supp_Quote_Date_Recieved, Supp_Quote_Acceptance_Status, Supp_Quote_Date_Acceptance, Original_Supp_Quote_Reference_ID, Original_Supplier_ID, Original_Supp_Quote_Total_Price, Original_Supp_Quote_Date_Recieved, Original_Supp_Quote_Acceptance_Status, Original_Supp_Quote_Date_Acceptance, Original_Supp_Quote_Reference_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function TotalPriceUpdateQuery(ByVal Total As Decimal, ByVal Original_Supp_Quote_Reference_ID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Total,Decimal)
            command.Parameters(1).Value = CType(Original_Supp_Quote_Reference_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateDateAcceptedNullQuery(ByVal Original_Supp_Quote_Reference_ID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(Original_Supp_Quote_Reference_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class Supplier_Quote_Line_ItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Supplier_Quote_Line_Item"
            tableMapping.ColumnMappings.Add("Supp_Quote_Reference_ID", "Supp_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID")
            tableMapping.ColumnMappings.Add("Supp_Line_Item_Cost_Price", "Supp_Line_Item_Cost_Price")
            tableMapping.ColumnMappings.Add("Supp_Line_Item_Quantity", "Supp_Line_Item_Quantity")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Supplier_Quote_Line_Item] WHERE (([Supp_Quote_Reference_ID] = @Origi"& _ 
                "nal_Supp_Quote_Reference_ID) AND ([Product_ID] = @Original_Product_ID) AND ([Sup"& _ 
                "p_Line_Item_Cost_Price] = @Original_Supp_Line_Item_Cost_Price) AND ([Supp_Line_I"& _ 
                "tem_Quantity] = @Original_Supp_Line_Item_Quantity))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Line_Item_Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Supplier_Quote_Line_Item] ([Supp_Quote_Reference_ID], [Product_ID], "& _ 
                "[Supp_Line_Item_Cost_Price], [Supp_Line_Item_Quantity]) VALUES (@Supp_Quote_Refe"& _ 
                "rence_ID, @Product_ID, @Supp_Line_Item_Cost_Price, @Supp_Line_Item_Quantity);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT Supp_Quote_Reference_ID, Product_ID, Supp_Line_Item_Cost_Price, Supp_Line_"& _ 
                "Item_Quantity FROM Supplier_Quote_Line_Item WHERE (Product_ID = @Product_ID) AND"& _ 
                " (Supp_Quote_Reference_ID = @Supp_Quote_Reference_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Line_Item_Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Supplier_Quote_Line_Item] SET [Supp_Quote_Reference_ID] = @Supp_Quote_Ref"& _ 
                "erence_ID, [Product_ID] = @Product_ID, [Supp_Line_Item_Cost_Price] = @Supp_Line_"& _ 
                "Item_Cost_Price, [Supp_Line_Item_Quantity] = @Supp_Line_Item_Quantity WHERE (([S"& _ 
                "upp_Quote_Reference_ID] = @Original_Supp_Quote_Reference_ID) AND ([Product_ID] ="& _ 
                " @Original_Product_ID) AND ([Supp_Line_Item_Cost_Price] = @Original_Supp_Line_It"& _ 
                "em_Cost_Price) AND ([Supp_Line_Item_Quantity] = @Original_Supp_Line_Item_Quantit"& _ 
                "y));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Supp_Quote_Reference_ID, Product_ID, Supp_Line_Item_Cost_Price, Sup"& _ 
                "p_Line_Item_Quantity FROM Supplier_Quote_Line_Item WHERE (Product_ID = @Product_"& _ 
                "ID) AND (Supp_Quote_Reference_ID = @Supp_Quote_Reference_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Line_Item_Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Line_Item_Cost_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Line_Item_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Line_Item_Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Supp_Quote_Reference_ID, Product_ID, Supp_Line_Item_Cost_Price, Sup"& _ 
                "p_Line_Item_Quantity"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Supplier_Quote_Line_Item"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Supplier_Quote_Line_Item.Product_ID, Supplier_Quote_Line_Item.Supp_"& _ 
                "Line_Item_Cost_Price, Supplier_Quote_Line_Item.Supp_Line_Item_Quantity, Product."& _ 
                "Product_Name, Product.Product_Brand, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Product.Product_"& _ 
                "Description, Product.Product_Active_Status, Supplier_Quote_Line_Item.Supp_Quote_"& _ 
                "Reference_ID, Product.Product_ID AS Expr1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Supplier_Quote_Line_I"& _ 
                "tem INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Product ON Supplier_Quote_Line_Item.Pro"& _ 
                "duct_ID = Product.Product_ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        SUM(Supp_Line_Item_Cost_Price * Supp_Line_Item_Quantity) AS Total_P"& _ 
                "rice"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Supplier_Quote_Line_Item"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Supp_Quote_Referen"& _ 
                "ce_ID = @Supp_Quote_Reference_ID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE       Supplier_Quote_Line_Item"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                Supp_Line_Item_Quantity"& _ 
                " = @quantity, Supp_Line_Item_Cost_Price = @cost"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (Supp_Quote_Refere"& _ 
                "nce_ID = @Original_Supp_Quote_Reference_ID) AND (Product_ID = @Original_Product_"& _ 
                "ID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantity", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Line_Item_Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cost", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 10, 2, "Supp_Line_Item_Cost_Price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Supp_Quote_Reference_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Supp_Quote_Reference_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Product_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Product_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.Supplier_Quote_Line_ItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.Supplier_Quote_Line_ItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.Supplier_Quote_Line_ItemDataTable = New group16DataSet.Supplier_Quote_Line_ItemDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As group16DataSet.Supplier_Quote_Line_ItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy() As group16DataSet.Supplier_Quote_Line_ItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As group16DataSet.Supplier_Quote_Line_ItemDataTable = New group16DataSet.Supplier_Quote_Line_ItemDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As group16DataSet.Supplier_Quote_Line_ItemDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As group16DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Supplier_Quote_Line_Item")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Supp_Quote_Reference_ID As Integer, ByVal Original_Product_ID As Integer, ByVal Original_Supp_Line_Item_Cost_Price As Decimal, ByVal Original_Supp_Line_Item_Quantity As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Supp_Quote_Reference_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Product_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Supp_Line_Item_Cost_Price,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Supp_Line_Item_Quantity,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Supp_Quote_Reference_ID As Integer, ByVal Product_ID As Integer, ByVal Supp_Line_Item_Cost_Price As Decimal, ByVal Supp_Line_Item_Quantity As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Supp_Quote_Reference_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Product_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Supp_Line_Item_Cost_Price,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Supp_Line_Item_Quantity,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Supp_Quote_Reference_ID As Integer, ByVal Product_ID As Integer, ByVal Supp_Line_Item_Cost_Price As Decimal, ByVal Supp_Line_Item_Quantity As Integer, ByVal Original_Supp_Quote_Reference_ID As Integer, ByVal Original_Product_ID As Integer, ByVal Original_Supp_Line_Item_Cost_Price As Decimal, ByVal Original_Supp_Line_Item_Quantity As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Supp_Quote_Reference_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Product_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Supp_Line_Item_Cost_Price,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Supp_Line_Item_Quantity,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Supp_Quote_Reference_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Product_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Supp_Line_Item_Cost_Price,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Supp_Line_Item_Quantity,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Supp_Line_Item_Cost_Price As Decimal, ByVal Supp_Line_Item_Quantity As Integer, ByVal Original_Supp_Quote_Reference_ID As Integer, ByVal Original_Product_ID As Integer, ByVal Original_Supp_Line_Item_Cost_Price As Decimal, ByVal Original_Supp_Line_Item_Quantity As Integer) As Integer
            Return Me.Update(Original_Supp_Quote_Reference_ID, Original_Product_ID, Supp_Line_Item_Cost_Price, Supp_Line_Item_Quantity, Original_Supp_Quote_Reference_ID, Original_Product_ID, Original_Supp_Line_Item_Cost_Price, Original_Supp_Line_Item_Quantity)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function TotalSuppQuotePriceQuery(ByVal Supp_Quote_Reference_ID As Integer) As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(Supp_Quote_Reference_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)()
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateSuppLineItemQuery(ByVal quantity As Integer, ByVal cost As Decimal, ByVal Original_Supp_Quote_Reference_ID As Integer, ByVal Original_Product_ID As Integer) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(quantity,Integer)
            command.Parameters(1).Value = CType(cost,Decimal)
            command.Parameters(2).Value = CType(Original_Supp_Quote_Reference_ID,Integer)
            command.Parameters(3).Value = CType(Original_Product_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SuppLineItemJoinProductTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SuppLineItemJoinProduct"
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID")
            tableMapping.ColumnMappings.Add("Supp_Quote_Reference_ID", "Supp_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Supp_Line_Item_Cost_Price", "Supp_Line_Item_Cost_Price")
            tableMapping.ColumnMappings.Add("Supp_Line_Item_Quantity", "Supp_Line_Item_Quantity")
            tableMapping.ColumnMappings.Add("Product_Name", "Product_Name")
            tableMapping.ColumnMappings.Add("Product_Brand", "Product_Brand")
            tableMapping.ColumnMappings.Add("Product_Description", "Product_Description")
            tableMapping.ColumnMappings.Add("Product_Active_Status", "Product_Active_Status")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Supplier_Quote_Line_Item.*, Product.Product_Name, Product.Product_B"& _ 
                "rand, Product.Product_Description, Product.Product_Active_Status"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          "& _ 
                "  Supplier_Quote_Line_Item INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Product ON Suppl"& _ 
                "ier_Quote_Line_Item.Product_ID = Product.Product_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.SuppLineItemJoinProductDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.SuppLineItemJoinProductDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.SuppLineItemJoinProductDataTable = New group16DataSet.SuppLineItemJoinProductDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SupplierQuoteJoinSupplierTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SupplierQuoteJoinSupplier"
            tableMapping.ColumnMappings.Add("Supp_Quote_Reference_ID", "Supp_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Supp_Quote_Total_Price", "Supp_Quote_Total_Price")
            tableMapping.ColumnMappings.Add("Supp_Quote_Date_Recieved", "Supp_Quote_Date_Recieved")
            tableMapping.ColumnMappings.Add("Supp_Quote_Acceptance_Status", "Supp_Quote_Acceptance_Status")
            tableMapping.ColumnMappings.Add("Supp_Quote_Date_Acceptance", "Supp_Quote_Date_Acceptance")
            tableMapping.ColumnMappings.Add("Supplier_Name", "Supplier_Name")
            tableMapping.ColumnMappings.Add("Supplier_Phone_No", "Supplier_Phone_No")
            tableMapping.ColumnMappings.Add("Supplier_Rep_FName", "Supplier_Rep_FName")
            tableMapping.ColumnMappings.Add("Supplier_Rep_SName", "Supplier_Rep_SName")
            tableMapping.ColumnMappings.Add("Supplier_Email", "Supplier_Email")
            tableMapping.ColumnMappings.Add("Supplier_Active_Status", "Supplier_Active_Status")
            tableMapping.ColumnMappings.Add("Supplier_Rep_Phone_No", "Supplier_Rep_Phone_No")
            tableMapping.ColumnMappings.Add("Supplier_Rep_Email", "Supplier_Rep_Email")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Supplier_Quote.Supp_Quote_Reference_ID, Supplier_Quote.Supplier_ID,"& _ 
                " Supplier_Quote.Supp_Quote_Total_Price, Supplier_Quote.Supp_Quote_Date_Recieved,"& _ 
                " Supplier_Quote.Supp_Quote_Acceptance_Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplie"& _ 
                "r_Quote.Supp_Quote_Date_Acceptance, Supplier.Supplier_Name, Supplier.Supplier_Ph"& _ 
                "one_No, Supplier.Supplier_Rep_FName, Supplier.Supplier_Rep_SName, Supplier.Suppl"& _ 
                "ier_Email, Supplier.Supplier_Active_Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier."& _ 
                "Supplier_Rep_Phone_No, Supplier.Supplier_Rep_Email"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Supplier_Quo"& _ 
                "te INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier ON Supplier_Quote.Supplier_ID ="& _ 
                " Supplier.Supplier_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Supplier_Quote.Supp_Quote_Reference_ID, Supplier_Quote.Supplier_ID,"& _ 
                " Supplier_Quote.Supp_Quote_Total_Price, Supplier_Quote.Supp_Quote_Date_Recieved,"& _ 
                " Supplier_Quote.Supp_Quote_Acceptance_Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplie"& _ 
                "r_Quote.Supp_Quote_Date_Acceptance, Supplier.Supplier_Name, Supplier.Supplier_Ph"& _ 
                "one_No, Supplier.Supplier_Rep_FName, Supplier.Supplier_Rep_SName, Supplier.Suppl"& _ 
                "ier_Email, Supplier.Supplier_Active_Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier."& _ 
                "Supplier_Rep_Phone_No, Supplier.Supplier_Rep_Email"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Supplier_Quo"& _ 
                "te INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier ON Supplier_Quote.Supplier_ID ="& _ 
                " Supplier.Supplier_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Supplier_Quote.Supp_Quote_Date_Recieved"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        Supplier_Quote.Supp_Quote_Reference_ID, Supplier_Quote.Supplier_ID,"& _ 
                " Supplier_Quote.Supp_Quote_Total_Price, Supplier_Quote.Supp_Quote_Date_Recieved,"& _ 
                " Supplier_Quote.Supp_Quote_Acceptance_Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplie"& _ 
                "r_Quote.Supp_Quote_Date_Acceptance, Supplier.Supplier_Name, Supplier.Supplier_Ph"& _ 
                "one_No, Supplier.Supplier_Rep_FName, Supplier.Supplier_Rep_SName, Supplier.Suppl"& _ 
                "ier_Email, Supplier.Supplier_Active_Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier."& _ 
                "Supplier_Rep_Phone_No, Supplier.Supplier_Rep_Email"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Supplier_Quo"& _ 
                "te INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier ON Supplier_Quote.Supplier_ID ="& _ 
                " Supplier.Supplier_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Supplier_Quote.Supp_Quote_Date_Recieved DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.SupplierQuoteJoinSupplierDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.SupplierQuoteJoinSupplierDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.SupplierQuoteJoinSupplierDataTable = New group16DataSet.SupplierQuoteJoinSupplierDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function DateRecievedAscending(ByVal dataTable As group16DataSet.SupplierQuoteJoinSupplierDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1() As group16DataSet.SupplierQuoteJoinSupplierDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As group16DataSet.SupplierQuoteJoinSupplierDataTable = New group16DataSet.SupplierQuoteJoinSupplierDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function DateRecievedDescending(ByVal dataTable As group16DataSet.SupplierQuoteJoinSupplierDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy() As group16DataSet.SupplierQuoteJoinSupplierDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As group16DataSet.SupplierQuoteJoinSupplierDataTable = New group16DataSet.SupplierQuoteJoinSupplierDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomerQuoteJoinCustomerTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustomerQuoteJoinCustomer"
            tableMapping.ColumnMappings.Add("Cust_Quote_Reference_ID", "Cust_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Customer_ID", "Customer_ID")
            tableMapping.ColumnMappings.Add("Employee_ID", "Employee_ID")
            tableMapping.ColumnMappings.Add("Cust__Quote_Total_Price", "Cust__Quote_Total_Price")
            tableMapping.ColumnMappings.Add("Cust_Quote_Date_Issued", "Cust_Quote_Date_Issued")
            tableMapping.ColumnMappings.Add("Cust_Quote_Acceptance_Status", "Cust_Quote_Acceptance_Status")
            tableMapping.ColumnMappings.Add("Cust_Quote_Date_Accepted", "Cust_Quote_Date_Accepted")
            tableMapping.ColumnMappings.Add("Cust_FName", "Cust_FName")
            tableMapping.ColumnMappings.Add("Cust_SName", "Cust_SName")
            tableMapping.ColumnMappings.Add("Employee_FName", "Employee_FName")
            tableMapping.ColumnMappings.Add("Employee_SName", "Employee_SName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Customer_Quote.Cust_Quote_Reference_ID, Customer_Quote.Customer_ID,"& _ 
                " Customer_Quote.Employee_ID, Customer_Quote.Cust__Quote_Total_Price, Customer_Qu"& _ 
                "ote.Cust_Quote_Date_Issued, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Customer_Quote.Cust_Quote"& _ 
                "_Acceptance_Status, Customer_Quote.Cust_Quote_Date_Accepted, Customer.Cust_FName"& _ 
                ", Customer.Cust_SName, Employee.Employee_FName, Employee.Employee_SName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         Customer_Quote INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Customer ON Custome"& _ 
                "r_Quote.Customer_ID = Customer.Customer_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "Employee ON Customer_Quote.Employee_ID = Employee.Employee_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Customer.Cust_FName, Customer.Cust_SName, Employee.Employee_FName, "& _ 
                "Employee.Employee_SName, Customer_Quote.Cust_Quote_Reference_ID, Customer_Quote."& _ 
                "Customer_ID, Customer_Quote.Employee_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Customer_Quo"& _ 
                "te.Cust__Quote_Total_Price, Customer_Quote.Cust_Quote_Date_Issued, Customer_Quot"& _ 
                "e.Cust_Quote_Acceptance_Status, Customer_Quote.Cust_Quote_Date_Accepted"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         Customer_Quote INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Customer ON Custome"& _ 
                "r_Quote.Customer_ID = Customer.Customer_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "Employee ON Customer_Quote.Employee_ID = Employee.Employee_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Customer"& _ 
                "_Quote.Cust_Quote_Date_Issued"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        Customer_Quote.Cust_Quote_Reference_ID, Customer_Quote.Customer_ID,"& _ 
                " Customer_Quote.Employee_ID, Customer_Quote.Cust__Quote_Total_Price, Customer_Qu"& _ 
                "ote.Cust_Quote_Date_Issued, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Customer_Quote.Cust_Quote"& _ 
                "_Acceptance_Status, Customer_Quote.Cust_Quote_Date_Accepted, Customer.Cust_FName"& _ 
                ", Customer.Cust_SName, Employee.Employee_FName, Employee.Employee_SName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "         Customer_Quote INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Customer ON Custome"& _ 
                "r_Quote.Customer_ID = Customer.Customer_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "Employee ON Customer_Quote.Employee_ID = Employee.Employee_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Customer"& _ 
                "_Quote.Cust_Quote_Date_Issued DESC"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.CustomerQuoteJoinCustomerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.CustomerQuoteJoinCustomerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.CustomerQuoteJoinCustomerDataTable = New group16DataSet.CustomerQuoteJoinCustomerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDateIssuedAscending(ByVal dataTable As group16DataSet.CustomerQuoteJoinCustomerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy() As group16DataSet.CustomerQuoteJoinCustomerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As group16DataSet.CustomerQuoteJoinCustomerDataTable = New group16DataSet.CustomerQuoteJoinCustomerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDateIssuedDescending(ByVal dataTable As group16DataSet.CustomerQuoteJoinCustomerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1() As group16DataSet.CustomerQuoteJoinCustomerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As group16DataSet.CustomerQuoteJoinCustomerDataTable = New group16DataSet.CustomerQuoteJoinCustomerDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustLineItemJoinProductsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustLineItemJoinProducts"
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID")
            tableMapping.ColumnMappings.Add("Cust_Quote_Reference_ID", "Cust_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Cost_Price", "Cust_Line_Item_Cost_Price")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Sale_incl_VAT", "Cust_Line_Item_Sale_incl_VAT")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Sale_excl_VAT", "Cust_Line_Item_Sale_excl_VAT")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Markup_Percentage", "Cust_Line_Item_Markup_Percentage")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Discount_Percentage", "Cust_Line_Item_Discount_Percentage")
            tableMapping.ColumnMappings.Add("Cust_Line_Item_Quantity", "Cust_Line_Item_Quantity")
            tableMapping.ColumnMappings.Add("Product_Name", "Product_Name")
            tableMapping.ColumnMappings.Add("Product_Brand", "Product_Brand")
            tableMapping.ColumnMappings.Add("Product_Description", "Product_Description")
            tableMapping.ColumnMappings.Add("Product_Active_Status", "Product_Active_Status")
            tableMapping.ColumnMappings.Add("Supplier_Name", "Supplier_Name")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Customer_Quote_Line_Item.Product_ID, Customer_Quote_Line_Item.Cust_"& _ 
                "Quote_Reference_ID, Customer_Quote_Line_Item.Supplier_ID, Customer_Quote_Line_It"& _ 
                "em.Cust_Line_Item_Cost_Price, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Customer_Quote_Line_Ite"& _ 
                "m.Cust_Line_Item_Sale_incl_VAT, Customer_Quote_Line_Item.Cust_Line_Item_Sale_exc"& _ 
                "l_VAT, Customer_Quote_Line_Item.Cust_Line_Item_Markup_Percentage, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "             Customer_Quote_Line_Item.Cust_Line_Item_Discount_Percentage, Custom"& _ 
                "er_Quote_Line_Item.Cust_Line_Item_Quantity, Product.Product_Name, Product.Produc"& _ 
                "t_Brand, Product.Product_Description, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Product.Product"& _ 
                "_Active_Status, Supplier.Supplier_Name"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Customer_Quote_Line_Item"& _ 
                " INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Product ON Customer_Quote_Line_Item.Produc"& _ 
                "t_ID = Product.Product_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplier ON Custo"& _ 
                "mer_Quote_Line_Item.Supplier_ID = Supplier.Supplier_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.CustLineItemJoinProductsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.CustLineItemJoinProductsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.CustLineItemJoinProductsDataTable = New group16DataSet.CustLineItemJoinProductsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SuppQuoteJoinSuppLineItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SuppQuoteJoinSuppLineItem"
            tableMapping.ColumnMappings.Add("Supp_Quote_Reference_ID", "Supp_Quote_Reference_ID")
            tableMapping.ColumnMappings.Add("Supplier_ID", "Supplier_ID")
            tableMapping.ColumnMappings.Add("Supp_Quote_Date_Recieved", "Supp_Quote_Date_Recieved")
            tableMapping.ColumnMappings.Add("Supp_Quote_Total_Price", "Supp_Quote_Total_Price")
            tableMapping.ColumnMappings.Add("Supp_Quote_Acceptance_Status", "Supp_Quote_Acceptance_Status")
            tableMapping.ColumnMappings.Add("Supp_Quote_Date_Acceptance", "Supp_Quote_Date_Acceptance")
            tableMapping.ColumnMappings.Add("Supp_Line_Item_Cost_Price", "Supp_Line_Item_Cost_Price")
            tableMapping.ColumnMappings.Add("Supp_Line_Item_Quantity", "Supp_Line_Item_Quantity")
            tableMapping.ColumnMappings.Add("Product_ID", "Product_ID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.M.I.S.S_Vendor_Order_Management_System.My.MySettings.Default.group16ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Supplier_Quote.Supp_Quote_Reference_ID, Supplier_Quote.Supplier_ID,"& _ 
                " Supplier_Quote.Supp_Quote_Date_Recieved, Supplier_Quote.Supp_Quote_Total_Price,"& _ 
                " Supplier_Quote.Supp_Quote_Acceptance_Status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         Supplie"& _ 
                "r_Quote.Supp_Quote_Date_Acceptance, Supplier_Quote_Line_Item.Supp_Line_Item_Cost"& _ 
                "_Price, Supplier_Quote_Line_Item.Supp_Line_Item_Quantity, Supplier_Quote_Line_It"& _ 
                "em.Product_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            Supplier_Quote INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   Supplier_Quote_Line_Item ON Supplier_Quote.Supp_Quote_Reference_ID = Supplier"& _ 
                "_Quote_Line_Item.Supp_Quote_Reference_ID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As group16DataSet.SuppQuoteJoinSuppLineItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As group16DataSet.SuppQuoteJoinSuppLineItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As group16DataSet.SuppQuoteJoinSuppLineItemDataTable = New group16DataSet.SuppQuoteJoinSuppLineItemDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _customerTableAdapter As CustomerTableAdapter
        
        Private _customer_QuoteTableAdapter As Customer_QuoteTableAdapter
        
        Private _customer_Quote_Line_ItemTableAdapter As Customer_Quote_Line_ItemTableAdapter
        
        Private _employeeTableAdapter As EmployeeTableAdapter
        
        Private _productTableAdapter As ProductTableAdapter
        
        Private _supplierTableAdapter As SupplierTableAdapter
        
        Private _supplier_QuoteTableAdapter As Supplier_QuoteTableAdapter
        
        Private _supplier_Quote_Line_ItemTableAdapter As Supplier_Quote_Line_ItemTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CustomerTableAdapter() As CustomerTableAdapter
            Get
                Return Me._customerTableAdapter
            End Get
            Set
                Me._customerTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Customer_QuoteTableAdapter() As Customer_QuoteTableAdapter
            Get
                Return Me._customer_QuoteTableAdapter
            End Get
            Set
                Me._customer_QuoteTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Customer_Quote_Line_ItemTableAdapter() As Customer_Quote_Line_ItemTableAdapter
            Get
                Return Me._customer_Quote_Line_ItemTableAdapter
            End Get
            Set
                Me._customer_Quote_Line_ItemTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EmployeeTableAdapter() As EmployeeTableAdapter
            Get
                Return Me._employeeTableAdapter
            End Get
            Set
                Me._employeeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ProductTableAdapter() As ProductTableAdapter
            Get
                Return Me._productTableAdapter
            End Get
            Set
                Me._productTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SupplierTableAdapter() As SupplierTableAdapter
            Get
                Return Me._supplierTableAdapter
            End Get
            Set
                Me._supplierTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Supplier_QuoteTableAdapter() As Supplier_QuoteTableAdapter
            Get
                Return Me._supplier_QuoteTableAdapter
            End Get
            Set
                Me._supplier_QuoteTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property Supplier_Quote_Line_ItemTableAdapter() As Supplier_Quote_Line_ItemTableAdapter
            Get
                Return Me._supplier_Quote_Line_ItemTableAdapter
            End Get
            Set
                Me._supplier_Quote_Line_ItemTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._customerTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._customerTableAdapter.Connection) Is Nothing)) Then
                    Return Me._customerTableAdapter.Connection
                End If
                If ((Not (Me._customer_QuoteTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._customer_QuoteTableAdapter.Connection) Is Nothing)) Then
                    Return Me._customer_QuoteTableAdapter.Connection
                End If
                If ((Not (Me._customer_Quote_Line_ItemTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._customer_Quote_Line_ItemTableAdapter.Connection) Is Nothing)) Then
                    Return Me._customer_Quote_Line_ItemTableAdapter.Connection
                End If
                If ((Not (Me._employeeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._employeeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._employeeTableAdapter.Connection
                End If
                If ((Not (Me._productTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._productTableAdapter.Connection) Is Nothing)) Then
                    Return Me._productTableAdapter.Connection
                End If
                If ((Not (Me._supplierTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._supplierTableAdapter.Connection) Is Nothing)) Then
                    Return Me._supplierTableAdapter.Connection
                End If
                If ((Not (Me._supplier_QuoteTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._supplier_QuoteTableAdapter.Connection) Is Nothing)) Then
                    Return Me._supplier_QuoteTableAdapter.Connection
                End If
                If ((Not (Me._supplier_Quote_Line_ItemTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._supplier_Quote_Line_ItemTableAdapter.Connection) Is Nothing)) Then
                    Return Me._supplier_Quote_Line_ItemTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._customerTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._customer_QuoteTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._customer_Quote_Line_ItemTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._employeeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._productTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._supplierTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._supplier_QuoteTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._supplier_Quote_Line_ItemTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As group16DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._customerTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Customer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._customerTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._employeeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Employee.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._employeeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._supplierTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Supplier.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._supplierTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._customer_QuoteTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Customer_Quote.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._customer_QuoteTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._productTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Product.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._productTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._supplier_QuoteTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Supplier_Quote.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._supplier_QuoteTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._customer_Quote_Line_ItemTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Customer_Quote_Line_Item.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._customer_Quote_Line_ItemTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._supplier_Quote_Line_ItemTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Supplier_Quote_Line_Item.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._supplier_Quote_Line_ItemTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As group16DataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._customerTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Customer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._customerTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._employeeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Employee.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._employeeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._supplierTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Supplier.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._supplierTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._customer_QuoteTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Customer_Quote.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._customer_QuoteTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._productTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Product.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._productTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._supplier_QuoteTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Supplier_Quote.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._supplier_QuoteTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._customer_Quote_Line_ItemTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Customer_Quote_Line_Item.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._customer_Quote_Line_ItemTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._supplier_Quote_Line_ItemTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Supplier_Quote_Line_Item.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._supplier_Quote_Line_ItemTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As group16DataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._supplier_Quote_Line_ItemTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Supplier_Quote_Line_Item.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._supplier_Quote_Line_ItemTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._customer_Quote_Line_ItemTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Customer_Quote_Line_Item.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._customer_Quote_Line_ItemTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._supplier_QuoteTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Supplier_Quote.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._supplier_QuoteTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._productTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Product.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._productTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._customer_QuoteTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Customer_Quote.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._customer_QuoteTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._supplierTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Supplier.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._supplierTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._employeeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Employee.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._employeeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._customerTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Customer.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._customerTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As group16DataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._customerTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._customerTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._customer_QuoteTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._customer_QuoteTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._customer_Quote_Line_ItemTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._customer_Quote_Line_ItemTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._employeeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._employeeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._productTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._productTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._supplierTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._supplierTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._supplier_QuoteTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._supplier_QuoteTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._supplier_Quote_Line_ItemTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._supplier_Quote_Line_ItemTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._customerTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._customerTableAdapter, Me._customerTableAdapter.Connection)
                    Me._customerTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._customerTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._customerTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._customerTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._customerTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._customer_QuoteTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._customer_QuoteTableAdapter, Me._customer_QuoteTableAdapter.Connection)
                    Me._customer_QuoteTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._customer_QuoteTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._customer_QuoteTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._customer_QuoteTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._customer_QuoteTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._customer_Quote_Line_ItemTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._customer_Quote_Line_ItemTableAdapter, Me._customer_Quote_Line_ItemTableAdapter.Connection)
                    Me._customer_Quote_Line_ItemTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._customer_Quote_Line_ItemTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._customer_Quote_Line_ItemTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._customer_Quote_Line_ItemTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._customer_Quote_Line_ItemTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._employeeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._employeeTableAdapter, Me._employeeTableAdapter.Connection)
                    Me._employeeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._employeeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._employeeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._employeeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._employeeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._productTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._productTableAdapter, Me._productTableAdapter.Connection)
                    Me._productTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._productTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._productTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._productTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._productTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._supplierTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._supplierTableAdapter, Me._supplierTableAdapter.Connection)
                    Me._supplierTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._supplierTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._supplierTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._supplierTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._supplierTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._supplier_QuoteTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._supplier_QuoteTableAdapter, Me._supplier_QuoteTableAdapter.Connection)
                    Me._supplier_QuoteTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._supplier_QuoteTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._supplier_QuoteTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._supplier_QuoteTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._supplier_QuoteTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._supplier_Quote_Line_ItemTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._supplier_Quote_Line_ItemTableAdapter, Me._supplier_Quote_Line_ItemTableAdapter.Connection)
                    Me._supplier_Quote_Line_ItemTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._supplier_Quote_Line_ItemTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._supplier_Quote_Line_ItemTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._supplier_Quote_Line_ItemTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._supplier_Quote_Line_ItemTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._customerTableAdapter) Is Nothing) Then
                    Me._customerTableAdapter.Connection = CType(revertConnections(Me._customerTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._customerTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._customer_QuoteTableAdapter) Is Nothing) Then
                    Me._customer_QuoteTableAdapter.Connection = CType(revertConnections(Me._customer_QuoteTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._customer_QuoteTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._customer_Quote_Line_ItemTableAdapter) Is Nothing) Then
                    Me._customer_Quote_Line_ItemTableAdapter.Connection = CType(revertConnections(Me._customer_Quote_Line_ItemTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._customer_Quote_Line_ItemTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._employeeTableAdapter) Is Nothing) Then
                    Me._employeeTableAdapter.Connection = CType(revertConnections(Me._employeeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._employeeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._productTableAdapter) Is Nothing) Then
                    Me._productTableAdapter.Connection = CType(revertConnections(Me._productTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._productTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._supplierTableAdapter) Is Nothing) Then
                    Me._supplierTableAdapter.Connection = CType(revertConnections(Me._supplierTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._supplierTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._supplier_QuoteTableAdapter) Is Nothing) Then
                    Me._supplier_QuoteTableAdapter.Connection = CType(revertConnections(Me._supplier_QuoteTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._supplier_QuoteTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._supplier_Quote_Line_ItemTableAdapter) Is Nothing) Then
                    Me._supplier_Quote_Line_ItemTableAdapter.Connection = CType(revertConnections(Me._supplier_Quote_Line_ItemTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._supplier_Quote_Line_ItemTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
